/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Models;
using SCM.Services;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Mind.Api.Attributes;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// MIND API for tenant management
    /// </summary>
    public class TenantApiController : Controller
    {

        private ITenantService _tenantService;
        private IMapper _mapper;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="tenantService"></param>
        /// <param name="mapper"></param>
        public TenantApiController(TenantService tenantService, IMapper mapper)
        {
            _tenantService = tenantService;
            _mapper = mapper;
        }

        /// <summary>
        /// Create a tenant
        /// </summary>
        /// <remarks>This can only be done by the logged in tenant.</remarks>
        /// <param name="body">Created tenant object</param>
        /// <response code="200">Successful operation</response>
        /// <response code="422">Validation error</response>
        [HttpPost]
        [Route("/v1/tenant")]
        [ValidateModelState]
        [ValidateTenantNotExists]
        [SwaggerOperation("CreateTenant")]
        [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "Successful operation")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        public virtual async Task<IActionResult> CreateTenant([FromBody]Tenant body)
        {
            try
            {
                var tenant = _mapper.Map<SCM.Models.Tenant>(body);
                await _tenantService.AddAsync(tenant);

                return CreatedAtRoute("/v1/tenant", _mapper.Map<Tenant>(tenant));
            }
            catch (DbUpdateException)
            {
                //Log the error (uncomment ex variable name and write a log.

                return StatusCode(StatusCodes.Status500InternalServerError, new
                {
                    Message = "Unable to save changes. " +
                    "Try again, and if the problem persists " +
                    "see your system administrator."
                });
            }
        }

        /// <summary>
        /// Deletes a tenant
        /// </summary>
        
        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="apiKey"></param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/v1/tenant/{tenantId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteTenant")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult DeleteTenant([FromRoute][Required]int? tenantId, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find all tenants
        /// </summary>
        /// <remarks>Returns all tenants</remarks>
        /// <response code="200">Successful operation</response>
        [HttpGet]
        [Route("/v1/tenant")]
        [ValidateModelState]
        [SwaggerOperation("GetAllTenants")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Tenant>), description: "Successful operation")]
        public virtual IActionResult GetAllTenants()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Tenant>));

            string exampleJson = null;
            exampleJson = "<Tenant>\n  <tenantId>123456789</tenantId>\n  <name>aeiou</name>\n</Tenant>";
            exampleJson = "[ {\n  \"tenantId\" : 0,\n  \"name\" : \"name\"\n}, {\n  \"tenantId\" : 0,\n  \"name\" : \"name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Tenant>>(exampleJson)
            : default(List<Tenant>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find tenant by ID
        /// </summary>
        /// <remarks>Returns a single tenant</remarks>
        /// <param name="tenantId">ID of the tenant</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/tenant/{tenantId}")]
        [ValidateModelState]
        [SwaggerOperation("GetTenantById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult GetTenantById([FromRoute][Required]int? tenantId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Tenant));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<Tenant>\n  <tenantId>123456789</tenantId>\n  <name>aeiou</name>\n</Tenant>";
            exampleJson = "{\n  \"tenantId\" : 0,\n  \"name\" : \"name\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Tenant>(exampleJson)
            : default(Tenant);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
