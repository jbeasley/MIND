/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class TenantAttachmentSetApiController : Controller
    { 
        /// <summary>
        /// Create a new attachment set
        /// </summary>
        
        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="body">attachment set request object that generates a new attachment set</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Validation error</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/v1/tenant/{tenantId}/attachment-set")]
        [ValidateModelState]
        [SwaggerOperation("AddAttachmentSet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AttachmentSet>), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult AddAttachmentSet([FromRoute][Required]int? tenantId, [FromBody]AttachmentSetRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AttachmentSet>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<AttachmentSet>\n  <name>aeiou</name>\n  <region>aeiou</region>\n  <subRegion>aeiou</subRegion>\n  <attachmentRedundancy>aeiou</attachmentRedundancy>\n  <isLayer3>true</isLayer3>\n</AttachmentSet>";
            exampleJson = "[ {\n  \"subRegion\" : \"subRegion\",\n  \"name\" : \"name\",\n  \"attachmentRedundancy\" : \"attachmentRedundancy\",\n  \"isLayer3\" : true,\n  \"region\" : \"region\"\n}, {\n  \"subRegion\" : \"subRegion\",\n  \"name\" : \"name\",\n  \"attachmentRedundancy\" : \"attachmentRedundancy\",\n  \"isLayer3\" : true,\n  \"region\" : \"region\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<AttachmentSet>>(exampleJson)
            : default(List<AttachmentSet>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add a tenant IPv4 network to the inbound policy of a given attachment set
        /// </summary>
        
        /// <param name="attachmentSetId">ID of the attachment set</param>
        /// <param name="tenantIpv4NetworkId">ID of the tenant IPv4 network</param>
        /// <param name="body">request object that generates a new inbound policy entry for a tenant IPv4 network</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/v1/tenant/attachment-set/{attachmentSetId}/inbound-policy/ipv4-network/{tenantIpv4NetworkId}")]
        [ValidateModelState]
        [SwaggerOperation("AddAttachmentSetInboundPoloicyTenantIpv4Network")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult AddAttachmentSetInboundPoloicyTenantIpv4Network([FromRoute][Required]int? attachmentSetId, [FromRoute][Required]int? tenantIpv4NetworkId, [FromBody]VpnTenantIpv4NetworkIn body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add a tenant IPv4 network to the outbound policy of a given attachment set
        /// </summary>
        
        /// <param name="attachmentSetId">ID of the attachment set</param>
        /// <param name="tenantIpv4NetworkId">ID of the tenant IPv4 network</param>
        /// <param name="body">request object that generates a new outbound policy entry for an tenant IPv4 network</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/v1/tenant/attachment-set/{attachmentSetId}/outbound-policy/ipv4-network/{tenantIpv4NetworkId}")]
        [ValidateModelState]
        [SwaggerOperation("AddAttachmentSetOutboundPolicyTenantIpv4Network")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult AddAttachmentSetOutboundPolicyTenantIpv4Network([FromRoute][Required]int? attachmentSetId, [FromRoute][Required]int? tenantIpv4NetworkId, [FromBody]VpnTenantIpv4NetworkOut body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add a routing instance to a given attachment set
        /// </summary>
        
        /// <param name="attachmentSetId">ID of the attachment set</param>
        /// <param name="routingInstanceId">ID of a routing instance to be added to the attachment set</param>
        /// <param name="body">request object that generates a new routing instance entry for an attachment set</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/v1/tenant/attachment-set/{attachmentSetId}/routing-instance/{routingInstanceId}")]
        [ValidateModelState]
        [SwaggerOperation("AddAttachmentSetRoutingInstance")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult AddAttachmentSetRoutingInstance([FromRoute][Required]int? attachmentSetId, [FromRoute][Required]int? routingInstanceId, [FromBody]AttachmentSetRoutingInstance body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes an attachment set
        /// </summary>
        
        /// <param name="attachmentSetId">ID of the attachment set</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/v1/tenant/attachment-set/{attachmentSetId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAttachmentSet")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult DeleteAttachmentSet([FromRoute][Required]int? attachmentSetId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a tenant IPv4 network from the inbound policy of a given attachment set
        /// </summary>
        
        /// <param name="attachmentSetId">ID of the attachment set</param>
        /// <param name="tenantIpv4NetworkId">ID of the tenant IPv4 network</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/v1/tenant/attachment-set/{attachmentSetId}/inbound-policy/ipv4-network/{tenantIpv4NetworkId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAttachmentSetInboundPolicyTenantIpv4Network")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult DeleteAttachmentSetInboundPolicyTenantIpv4Network([FromRoute][Required]int? attachmentSetId, [FromRoute][Required]int? tenantIpv4NetworkId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a tenant IPv4 network from the outbound policy of a given attachment set
        /// </summary>
        
        /// <param name="attachmentSetId">ID of the attachment set</param>
        /// <param name="tenantIpv4NetworkId">ID of the tenant IPv4 network</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/v1/tenant/attachment-set/{attachmentSetId}/outbound-policy/ipv4-network/{tenantIpv4NetworkId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAttachmentSetOutboundPolicyTenantIpv4Network")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult DeleteAttachmentSetOutboundPolicyTenantIpv4Network([FromRoute][Required]int? attachmentSetId, [FromRoute][Required]int? tenantIpv4NetworkId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a routing instance from an attachment set
        /// </summary>
        
        /// <param name="attachmentSetId">ID of the attachment set</param>
        /// <param name="routingInstanceId">ID of a routing instance to be added to the attachment set</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/v1/tenant/attachment-set/{attachmentSetId}/routing-instance/{routingInstanceId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAttachmentSetRoutingInstance")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult DeleteAttachmentSetRoutingInstance([FromRoute][Required]int? attachmentSetId, [FromRoute][Required]int? routingInstanceId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find an attachment set by ID
        /// </summary>
        /// <remarks>Returns a single attachment set</remarks>
        /// <param name="attachmentSetId">ID of the attachment set</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/tenant/attachment-set/{attachmentSetId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAttachmentSetById")]
        [SwaggerResponse(statusCode: 200, type: typeof(AttachmentSet), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult GetAttachmentSetById([FromRoute][Required]int? attachmentSetId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AttachmentSet));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<AttachmentSet>\n  <name>aeiou</name>\n  <region>aeiou</region>\n  <subRegion>aeiou</subRegion>\n  <attachmentRedundancy>aeiou</attachmentRedundancy>\n  <isLayer3>true</isLayer3>\n</AttachmentSet>";
            exampleJson = "{\n  \"subRegion\" : \"subRegion\",\n  \"name\" : \"name\",\n  \"attachmentRedundancy\" : \"attachmentRedundancy\",\n  \"isLayer3\" : true,\n  \"region\" : \"region\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AttachmentSet>(exampleJson)
            : default(AttachmentSet);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find all attachment sets for a given tenant
        /// </summary>
        /// <remarks>Returns all attachment sets for a given tenant</remarks>
        /// <param name="tenantId">ID of the tenant</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/tenant/{tenantId}/attachment-set")]
        [ValidateModelState]
        [SwaggerOperation("GetAttachmentSetsByTenantId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Attachment>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult GetAttachmentSetsByTenantId([FromRoute][Required]int? tenantId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Attachment>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<Attachment>\n  <attachmentId>123</attachmentId>\n  <trustReceivedCosDscp>true</trustReceivedCosDscp>\n  <isLayer3>true</isLayer3>\n  <isBundle>true</isBundle>\n  <isMultiport>true</isMultiport>\n  <isTagged>true</isTagged>\n  <attachmentBandwidthGbps>123</attachmentBandwidthGbps>\n</Attachment>";
            exampleJson = "[ {\n  \"isBundle\" : false,\n  \"isTagged\" : false,\n  \"contractBandwidthPool\" : {\n    \"name\" : \"name\",\n    \"contractBandwidthMbps\" : 5\n  },\n  \"isMultiport\" : false,\n  \"trustReceivedCosDscp\" : true,\n  \"attachmentId\" : 0,\n  \"isLayer3\" : false,\n  \"attachmentBandwidthGbps\" : 5,\n  \"infrastructureDevice\" : {\n    \"useLayer2InterfaceMtu\" : true,\n    \"planeName\" : \"planeName\",\n    \"locationName\" : \"locationName\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"deviceModel\" : \"deviceModel\",\n    \"ports\" : [ {\n      \"portPool\" : \"portPool\",\n      \"name\" : \"name\",\n      \"portStatus\" : \"portStatus\",\n      \"portId\" : 1,\n      \"type\" : \"type\",\n      \"portSfp\" : \"portSfp\",\n      \"portRole\" : \"portRole\"\n    }, {\n      \"portPool\" : \"portPool\",\n      \"name\" : \"name\",\n      \"portStatus\" : \"portStatus\",\n      \"portId\" : 1,\n      \"type\" : \"type\",\n      \"portSfp\" : \"portSfp\",\n      \"portRole\" : \"portRole\"\n    } ],\n    \"deviceID\" : 6,\n    \"deviceStatus\" : \"deviceStatus\"\n  },\n  \"routingInstance\" : {\n    \"routingInstanceId\" : 0,\n    \"name\" : \"name\"\n  },\n  \"tenant\" : {\n    \"tenantId\" : 0,\n    \"name\" : \"name\"\n  }\n}, {\n  \"isBundle\" : false,\n  \"isTagged\" : false,\n  \"contractBandwidthPool\" : {\n    \"name\" : \"name\",\n    \"contractBandwidthMbps\" : 5\n  },\n  \"isMultiport\" : false,\n  \"trustReceivedCosDscp\" : true,\n  \"attachmentId\" : 0,\n  \"isLayer3\" : false,\n  \"attachmentBandwidthGbps\" : 5,\n  \"infrastructureDevice\" : {\n    \"useLayer2InterfaceMtu\" : true,\n    \"planeName\" : \"planeName\",\n    \"locationName\" : \"locationName\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"deviceModel\" : \"deviceModel\",\n    \"ports\" : [ {\n      \"portPool\" : \"portPool\",\n      \"name\" : \"name\",\n      \"portStatus\" : \"portStatus\",\n      \"portId\" : 1,\n      \"type\" : \"type\",\n      \"portSfp\" : \"portSfp\",\n      \"portRole\" : \"portRole\"\n    }, {\n      \"portPool\" : \"portPool\",\n      \"name\" : \"name\",\n      \"portStatus\" : \"portStatus\",\n      \"portId\" : 1,\n      \"type\" : \"type\",\n      \"portSfp\" : \"portSfp\",\n      \"portRole\" : \"portRole\"\n    } ],\n    \"deviceID\" : 6,\n    \"deviceStatus\" : \"deviceStatus\"\n  },\n  \"routingInstance\" : {\n    \"routingInstanceId\" : 0,\n    \"name\" : \"name\"\n  },\n  \"tenant\" : {\n    \"tenantId\" : 0,\n    \"name\" : \"name\"\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Attachment>>(exampleJson)
            : default(List<Attachment>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
