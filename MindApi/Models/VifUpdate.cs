/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VifUpdate : IEquatable<VifUpdate>
    { 
        /// <summary>
        /// The name of an existing contract bandwidth pool. Changing the contract bandwidth pool will cause this vif to share bandwidth with other vifs in the same contract bandwidth pool
        /// </summary>
        /// <value>The name of an existing contract bandwidth pool. Changing the contract bandwidth pool will cause this vif to share bandwidth with other vifs in the same contract bandwidth pool</value>
        [DataMember(Name="contractBandwidthPoolName")]
        public string ContractBandwidthPoolName { get; set; }

        /// <summary>
        /// Select a contract bandwidth if you want this vif to be allocted its own dedicated contract bandwidth pool. If a contract bandwidth is selected, the provider will create a new contract bandwidth pool for this vif
        /// </summary>
        /// <value>Select a contract bandwidth if you want this vif to be allocted its own dedicated contract bandwidth pool. If a contract bandwidth is selected, the provider will create a new contract bandwidth pool for this vif</value>
        [DataMember(Name="contractBandwidthMbps")]
        public int? ContractBandwidthMbps { get; set; }

        /// <summary>
        /// The name of an existing routing instance which will be used by the vif for the routing IP packets
        /// </summary>
        /// <value>The name of an existing routing instance which will be used by the vif for the routing IP packets</value>
        [DataMember(Name="routingInstanceName")]
        public string RoutingInstanceName { get; set; }

        /// <summary>
        /// Determines if the provider should create a new routing instance for the vif. This is useful if the vif currently shares a routing instance with one or more other vifs and it is desired to give this vif its own routing instance
        /// </summary>
        /// <value>Determines if the provider should create a new routing instance for the vif. This is useful if the vif currently shares a routing instance with one or more other vifs and it is desired to give this vif its own routing instance</value>
        [DataMember(Name="createNewRoutingInstance")]
        public bool? CreateNewRoutingInstance { get; set; }

        /// <summary>
        /// Determines whether DSCP and COS markings of packets should be trusted by the provider
        /// </summary>
        /// <value>Determines whether DSCP and COS markings of packets should be trusted by the provider</value>
        [DataMember(Name="trustReceivedCosDscp")]
        public bool? TrustReceivedCosDscp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VifUpdate {\n");
            sb.Append("  ContractBandwidthPoolName: ").Append(ContractBandwidthPoolName).Append("\n");
            sb.Append("  ContractBandwidthMbps: ").Append(ContractBandwidthMbps).Append("\n");
            sb.Append("  RoutingInstanceName: ").Append(RoutingInstanceName).Append("\n");
            sb.Append("  CreateNewRoutingInstance: ").Append(CreateNewRoutingInstance).Append("\n");
            sb.Append("  TrustReceivedCosDscp: ").Append(TrustReceivedCosDscp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VifUpdate)obj);
        }

        /// <summary>
        /// Returns true if VifUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of VifUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VifUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContractBandwidthPoolName == other.ContractBandwidthPoolName ||
                    ContractBandwidthPoolName != null &&
                    ContractBandwidthPoolName.Equals(other.ContractBandwidthPoolName)
                ) && 
                (
                    ContractBandwidthMbps == other.ContractBandwidthMbps ||
                    ContractBandwidthMbps != null &&
                    ContractBandwidthMbps.Equals(other.ContractBandwidthMbps)
                ) && 
                (
                    RoutingInstanceName == other.RoutingInstanceName ||
                    RoutingInstanceName != null &&
                    RoutingInstanceName.Equals(other.RoutingInstanceName)
                ) && 
                (
                    CreateNewRoutingInstance == other.CreateNewRoutingInstance ||
                    CreateNewRoutingInstance != null &&
                    CreateNewRoutingInstance.Equals(other.CreateNewRoutingInstance)
                ) && 
                (
                    TrustReceivedCosDscp == other.TrustReceivedCosDscp ||
                    TrustReceivedCosDscp != null &&
                    TrustReceivedCosDscp.Equals(other.TrustReceivedCosDscp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContractBandwidthPoolName != null)
                    hashCode = hashCode * 59 + ContractBandwidthPoolName.GetHashCode();
                    if (ContractBandwidthMbps != null)
                    hashCode = hashCode * 59 + ContractBandwidthMbps.GetHashCode();
                    if (RoutingInstanceName != null)
                    hashCode = hashCode * 59 + RoutingInstanceName.GetHashCode();
                    if (CreateNewRoutingInstance != null)
                    hashCode = hashCode * 59 + CreateNewRoutingInstance.GetHashCode();
                    if (TrustReceivedCosDscp != null)
                    hashCode = hashCode * 59 + TrustReceivedCosDscp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VifUpdate left, VifUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VifUpdate left, VifUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
