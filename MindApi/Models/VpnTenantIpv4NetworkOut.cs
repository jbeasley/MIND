/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VpnTenantIpv4NetworkOut : IEquatable<VpnTenantIpv4NetworkOut>
    { 
        /// <summary>
        /// The ID of the tenant IPv4 network
        /// </summary>
        /// <value>The ID of the tenant IPv4 network</value>
        [DataMember(Name="tenantIpv4NetworkId")]
        public int? TenantIpv4NetworkId { get; private set; }

        /// <summary>
        /// An IPv4 BGP peer address
        /// </summary>
        /// <value>An IPv4 BGP peer address</value>
        [DataMember(Name="ipv4BgpPeer")]
        public string Ipv4BgpPeer { get; set; }

        /// <summary>
        /// The advertised IP routing preference
        /// </summary>
        /// <value>The advertised IP routing preference</value>
        [DataMember(Name="advertisedIpRoutingPreference")]
        public int? AdvertisedIpRoutingPreference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VpnTenantIpv4NetworkOut {\n");
            sb.Append("  TenantIpv4NetworkId: ").Append(TenantIpv4NetworkId).Append("\n");
            sb.Append("  Ipv4BgpPeer: ").Append(Ipv4BgpPeer).Append("\n");
            sb.Append("  AdvertisedIpRoutingPreference: ").Append(AdvertisedIpRoutingPreference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VpnTenantIpv4NetworkOut)obj);
        }

        /// <summary>
        /// Returns true if VpnTenantIpv4NetworkOut instances are equal
        /// </summary>
        /// <param name="other">Instance of VpnTenantIpv4NetworkOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnTenantIpv4NetworkOut other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TenantIpv4NetworkId == other.TenantIpv4NetworkId ||
                    TenantIpv4NetworkId != null &&
                    TenantIpv4NetworkId.Equals(other.TenantIpv4NetworkId)
                ) && 
                (
                    Ipv4BgpPeer == other.Ipv4BgpPeer ||
                    Ipv4BgpPeer != null &&
                    Ipv4BgpPeer.Equals(other.Ipv4BgpPeer)
                ) && 
                (
                    AdvertisedIpRoutingPreference == other.AdvertisedIpRoutingPreference ||
                    AdvertisedIpRoutingPreference != null &&
                    AdvertisedIpRoutingPreference.Equals(other.AdvertisedIpRoutingPreference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TenantIpv4NetworkId != null)
                    hashCode = hashCode * 59 + TenantIpv4NetworkId.GetHashCode();
                    if (Ipv4BgpPeer != null)
                    hashCode = hashCode * 59 + Ipv4BgpPeer.GetHashCode();
                    if (AdvertisedIpRoutingPreference != null)
                    hashCode = hashCode * 59 + AdvertisedIpRoutingPreference.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VpnTenantIpv4NetworkOut left, VpnTenantIpv4NetworkOut right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VpnTenantIpv4NetworkOut left, VpnTenantIpv4NetworkOut right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
