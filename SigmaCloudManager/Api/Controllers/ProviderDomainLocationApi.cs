/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;
using AutoMapper;
using SCM.Services;
using Mind.Services;
using Microsoft.EntityFrameworkCore;
using Mind.Models;
using Swashbuckle.AspNetCore.Annotations;
using Mind.Builders;

namespace Mind.Api.Controllers
{
    /// <summary>
    /// API for querying locations in the provider domain. 
    /// </summary>
    [ApiVersion("1.0")]
    [ApiExplorerSettings(GroupName = "Provider Domain Locations")]
    public class ProviderDomainLocationApiController : BaseApiController
    {
        private readonly IProviderDomainLocationService _locationService;

        public ProviderDomainLocationApiController(IMapper mapper, IProviderDomainLocationService locationService) : base(locationService, mapper)
        {
            _locationService = locationService;
        }


        /// <summary>
        /// Find all provider domain locations
        /// </summary>
        /// <remarks>Returns all provider domain locations</remarks>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <param name="regionName">Optional query parameter to filter the returned results by the name of a major georgraphic region, e.g. EMEA</param>
        /// <param name="subRegionName">Optional query parameter to filter the returned results by teh name of a geographic subregion, e.g. UK</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/provider-domain-locations")]
        [ValidateModelState]
        [SwaggerOperation("GetAllProviderDomainLocations")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ProviderDomainLocation>), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetAllLocationsByRoutingInstanceId([FromQuery]bool? deep, 
            [FromQuery]string regionName = "",[FromQuery]string subRegionName = "")
        {
            var locations = await _locationService.GetAllAsync(deep: deep, subRegionName: subRegionName, regionName: regionName);
            return Ok(Mapper.Map<List<ProviderDomainLocation>>(locations));
        }

        /// <summary>
        /// Find a single provider domain location
        /// </summary>
        /// <remarks>Returns a single provider domain location</remarks>
        /// <param name="locationId">ID of the routing instance</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [ValidateModelState]
        [ValidateProviderDomainLocationExists]
        [Route("/v{version:apiVersion}/provider-domain-locations/{locationId}", Name="GetProviderDomainLocation")]
        [SwaggerOperation("GetProviderDomainLocationById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProviderDomainLocation), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetRoutingInstanceLocationById([FromRoute][Required]int? locationId, [FromQuery]bool? deep)
        {
            var location = await _locationService.GetByIDAsync(locationId.Value, deep: deep);
            if (location.HasBeenModified(Request))
            {
                location.SetModifiedHttpHeaders(Response);
            }
            else
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }

            return Ok(Mapper.Map<ProviderDomainLocation>(location));
        }
    }
}
