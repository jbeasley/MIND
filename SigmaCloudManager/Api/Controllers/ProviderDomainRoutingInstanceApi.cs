/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;
using AutoMapper;
using SCM.Services;
using Mind.Services;
using Microsoft.EntityFrameworkCore;
using Mind.Models;
using Swashbuckle.AspNetCore.Annotations;
using Mind.Builders;

namespace Mind.Api.Controllers
{
    /// <summary>
    /// API for querying on tenant routing instances in the provider domain. 
    /// </summary>
    [ApiVersion("1.0")]
    [ApiExplorerSettings(GroupName = "Provider Domain Tenant Routing Instances")]
    public class ProviderDomainRoutingInstanceApiController : BaseApiController
    {
        private readonly IProviderDomainRoutingInstanceService _routingInstanceService;

        public ProviderDomainRoutingInstanceApiController(IMapper mapper, IProviderDomainRoutingInstanceService routingInstanceService) : base(routingInstanceService, mapper)
        {
            _routingInstanceService = routingInstanceService;
        }


        /// <summary>
        /// Find all provider domain routing instances for a given tenant
        /// </summary>
        /// <remarks>Returns all provider domain routing instances for a given tenant</remarks>
        /// <param name="tenantId">The ID of the tenant</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <param name="providerDomainLocationName">Optional query parameter to filter the returned results by the name of a location in the provider domain</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/provider-domain-routing-instances")]
        [ValidateModelState]
        [SwaggerOperation("GetAllProviderDomainRoutingInstancesByTenant")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ProviderDomainRoutingInstance>), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetAllRoutingInstancesByTenantId([FromRoute]int tenantId, [FromQuery]bool? deep, 
            [FromQuery]string providerDomainLocationName = "")
        {
            var routingInstances = await _routingInstanceService.GetAllByTenantIDAsync(tenantId: tenantId, deep: deep, 
                providerDomainLocationName: providerDomainLocationName);
            return Ok(Mapper.Map<List<ProviderDomainRoutingInstance>>(routingInstances));
        }

        /// <summary>
        /// Find a single provider domain routing instance
        /// </summary>
        /// <remarks>Returns a single provider domain routing instance</remarks>
        /// <param name="routingInstanceId">ID of the routing instance</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [ValidateModelState]
        [ValidateProviderDomainRoutingInstanceExists]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/provider-domain-routing-instances/{routingInstanceId}", Name="GetProviderDomainRoutingInstance")]
        [SwaggerOperation("GetProviderDomainRoutingInstanceById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProviderDomainRoutingInstance), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetProviderDomainRoutingInstanceById([FromRoute][Required]int? routingInstanceId, [FromQuery]bool? deep)
        {
            var routingInstance = await _routingInstanceService.GetByIDAsync(routingInstanceId.Value, deep: deep);
            if (routingInstance.HasBeenModified(Request))
            {
                routingInstance.SetModifiedHttpHeaders(Response);
            }
            else
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }

            return Ok(Mapper.Map<ProviderDomainRoutingInstance>(routingInstance));
        }
    }
}
