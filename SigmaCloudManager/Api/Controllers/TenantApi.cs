/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Models;
using SCM.Services;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Mind.Api.Attributes;
using Mind.Services;
using Mind.Models;
using Swashbuckle.AspNetCore.Annotations;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// API for creating and managing the lifecycle of tenants.
    /// </summary>
    [ApiVersion("1.0")]
    public class TenantApiController : BaseApiController
    {
        private readonly ITenantService _tenantService;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="tenantService"></param>
        /// <param name="mapper"></param>
        public TenantApiController(ITenantService tenantService, IMapper mapper) : base(tenantService, mapper)
        {
            _tenantService = tenantService;
        }

        /// <summary>
        /// Create a new tenant
        /// </summary>
        /// <param name="body">A tenant request object</param>
        /// <response code="201">Successful operation</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPost]
        [Route("v{version:apiVersion}/tenants")]
        [ValidateModelState]
        [ValidateTenantNotExists]
        [SwaggerOperation("CreateTenant")]
        [SwaggerResponse(statusCode: 201, type: typeof(Tenant), description: "Successful operation")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> CreateTenant([FromBody]TenantRequest body)
        {
            try
            {
                var request = Mapper.Map<SCM.Models.Tenant>(body);
                var tenant = await _tenantService.AddAsync(request);

                return CreatedAtRoute("GetTenant", new { tenantId = tenant.TenantID }, Mapper.Map<Tenant>(tenant));
            }
            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Update an existing tenant
        /// </summary>
        /// <param name="body">Updated tenant object</param>
        /// <param name="tenantId">The ID of the tenant</param>
        /// <response code="200">Successful operation</response>
        /// <response code="412">Precondition failed</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPut]
        [Route("v{version:apiVersion}/tenants/{tenantId}")]
        [ValidateModelState]
        [ValidateTenantNotExists]
        [SwaggerOperation("UpdateTenant")]
        [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "Successful operation")]
        [SwaggerResponse(statusCode: 412, type: typeof(ApiResponse), description: "Precondition failed")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> UpdateTenant([FromRoute][Required]int? tenantId, [FromBody]TenantRequest body)
        {
            try
            {
                var item = await _tenantService.GetByIDAsync(tenantId.Value);
                if (item.HasPreconditionFailed(Request)) return new PreconditionFailedResult();
                Mapper.Map(body, item);
                var updatedTenant = await _tenantService.UpdateAsync(item);

                return Ok(Mapper.Map<Tenant>(updatedTenant));
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Delete a tenant
        /// </summary>
        /// <param name="tenantId">ID of the tenant</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation failed</response>
        /// <response code="500">Error while updating the database</response>
        [HttpDelete]
        [Route("v{version:apiVersion}/tenants/{tenantId}")]
        [ValidateTenantExists]
        [ValidateModelState]
        [SwaggerOperation("DeleteTenant")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation failed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> DeleteTenant([FromRoute][Required]int? tenantId)
        {
            try
            {
                await _tenantService.DeleteAsync(tenantId.Value);
                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (ServiceValidationException)
            {
                return new ValidationFailedResult(this.ModelState);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Find all tenants
        /// </summary>
        /// <remarks>Returns a collection of all tenants</remarks>
        /// <response code="200">Successful operation</response>
        /// <param name="deep">Perform a deep query to return detailed information on tenants</param>
        [HttpGet]
        [Route("v{version:apiVersion}/tenants")]
        [ValidateModelState]
        [SwaggerOperation("GetAllTenants")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Tenant>), description: "Successful operation")]
        public virtual async Task<IActionResult> GetAllTenants([FromQuery]bool? deep)
        {
            var tenants = await _tenantService.GetAllAsync(deep:deep);
            return Ok(Mapper.Map<List<Tenant>>(tenants));
        }

        /// <summary>
        /// Find a tenant by ID
        /// </summary>
        /// <remarks>Returns a single tenant</remarks>
        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="deep">Perform a deep query to return deailed information on the tenant</param>
        /// <response code="200">successful operation</response>
        /// <response code="304">The specified resource has not been modified</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("v{version:apiVersion}/tenants/{tenantId}", Name = "GetTenant")]
        [ValidateModelState]
        [ValidateTenantExists]
        [SwaggerOperation("GetTenantById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "Successful operation")]
        [SwaggerResponse(statusCode: 304, description: "The specified resource has not been modified")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetTenantById([FromRoute][Required]int? tenantId,[FromQuery]bool? deep)
        {
            var tenant = await _tenantService.GetByIDAsync(tenantId.Value, deep: deep);
            if (!tenant.HasBeenModified(Request))
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }
            else
            {
                tenant.SetModifiedHttpHeaders(Response);
            }

            return Ok(Mapper.Map<Tenant>(tenant));
        }
    }
}
