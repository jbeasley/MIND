/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Models;
using SCM.Services;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Mind.Api.Attributes;
using Mind.Services;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// MIND API for tenant management
    /// </summary>
    public class TenantApiController : BaseApiController
    {
        private readonly ITenantService _tenantService;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="tenantService"></param>
        /// <param name="mapper"></param>
        public TenantApiController(ITenantService tenantService, IMapper mapper) : base(tenantService, mapper)
        {
            _tenantService = tenantService;
        }

        /// <summary>
        /// Create a tenant
        /// </summary>
        /// <param name="body">Created tenant object</param>
        /// <response code="201">Successful operation</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPost]
        [Route("/v1/tenant")]
        [ValidateModelState]
        [ValidateTenantNotExists]
        [SwaggerOperation("CreateTenant")]
        [SwaggerResponse(statusCode: 201, type: typeof(Tenant), description: "Successful operation")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> CreateTenant([FromBody]Tenant body)
        {
            try
            {
                var tenant = Mapper.Map<SCM.Models.Tenant>(body);
                await _tenantService.AddAsync(tenant);

                return CreatedAtRoute("GetTenant", new { tenantId = tenant.TenantID }, Mapper.Map<Tenant>(tenant));
            }
            catch (DbUpdateException)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new ApiResponse
                {
                    Message = "Unable to save changes. " +
                    "Try again, and if the problem persists " +
                    "see your system administrator."
            
                });
            }
        }

        /// <summary>
        /// Update a tenant
        /// </summary>
        /// <param name="body">Updated tenant object</param>
        /// <response code="200">Successful operation</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPut]
        [Route("/v1/tenant")]
        [ValidateModelState]
        [ValidateTenantNotExists]
        [SwaggerOperation("UpdateTenant")]
        [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "Successful operation")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> UpdateTenant([FromBody]Tenant body)
        {
            try
            {
                var tenant = Mapper.Map<SCM.Models.Tenant>(body);
                await _tenantService.UpdateAsync(tenant);

                return Ok(Mapper.Map<Tenant>(tenant));
            }
            catch (DbUpdateException)
            {
                //Log the error (uncomment ex variable name and write a log.

                return StatusCode(StatusCodes.Status500InternalServerError, new ApiResponse
                {
                    Message = "Unable to save changes. " +
                    "Try again, and if the problem persists " +
                    "see your system administrator."

                });
            }
        }

        /// <summary>
        /// Deletes a tenant
        /// </summary>
        /// <param name="tenantId">ID of the tenant</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation failed</response>
        /// <response code="500">Error while updating the database</response>
        [HttpDelete]
        [Route("/v1/tenant/{tenantId}")]
        [ValidateModelState]
        [ValidateTenantExists]
        [SwaggerOperation("DeleteTenant")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation failed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> DeleteTenant([FromRoute][Required]int? tenantId)
        {
            try
            {
                var tenant = await _tenantService.GetByIDAsync(tenantId.Value);
                await _tenantService.DeleteAsync(tenant);
                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (ServiceValidationException)
            {
                return StatusCode(StatusCodes.Status422UnprocessableEntity, new ApiResponse(this.ModelState));
            }

            catch (DbUpdateException)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new ApiResponse
                {
                    Message = "Unable to save changes. " +
                    "Try again, and if the problem persists " +
                    "see your system administrator."

                });
            }
        }

        /// <summary>
        /// Find all tenants
        /// </summary>
        /// <remarks>Returns all tenants</remarks>
        /// <response code="200">Successful operation</response>
        [HttpGet]
        [Route("/v1/tenant")]
        [ValidateModelState]
        [SwaggerOperation("GetAllTenants")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Tenant>), description: "Successful operation")]
        public virtual async Task<IActionResult> GetAllTenants()
        {
            var tenants = await _tenantService.GetAllAsync();
            return Ok(Mapper.Map<List<Tenant>>(tenants));
        }

        /// <summary>
        /// Find tenant by ID
        /// </summary>
        /// <remarks>Returns a single tenant</remarks>
        /// <param name="tenantId">ID of the tenant</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/tenant/{tenantId}", Name = "GetTenant")]
        [ValidateModelState]
        [ValidateTenantExists]
        [SwaggerOperation("GetTenantById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetTenantById([FromRoute][Required]int? tenantId)
        {
            var tenant = await _tenantService.GetByIDAsync(tenantId.Value);
            return Ok(Mapper.Map<Tenant>(tenant));
        }
    }
}
