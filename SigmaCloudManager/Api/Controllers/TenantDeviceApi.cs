/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;
using Mind.Services;
using AutoMapper;
using SCM.Data;
using Microsoft.EntityFrameworkCore;
using Mind.Builders;
using Mind.Models;
using Swashbuckle.AspNetCore.Annotations;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// Create and manage the lifecycle of tenant devices
    /// </summary>
    [ApiVersion("1.0")]
    public class TenantDeviceApiController : BaseApiController
    { 
        private readonly ITenantDeviceService _tenantDeviceService;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tenantDeviceService"></param>
        /// <param name="mapper"></param>
        public TenantDeviceApiController(ITenantDeviceService tenantDeviceService, IMapper mapper) : base(tenantDeviceService, mapper)
        {
            _tenantDeviceService = tenantDeviceService;
        }

        /// <summary>
        /// Create a new infrastructure device
        /// </summary>

        /// <param name="tenantId">The ID of the tenant</param>
        /// <param name="body">tenant device request object that generates a new tenant device</param>
        /// <response code="201">Successful operation</response>
        /// <response code="422">Validation error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPost]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/devices")]
        [ValidateModelState]
        [SwaggerOperation("CreateTenantDevice")]
        [SwaggerResponse(statusCode: 201, type: typeof(TenantDevice), description: "Successful operation")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> CreateTenantDevice([FromRoute][Required]int? tenantId, [FromBody]Mind.Api.Models.TenantDeviceRequest body)
        {
            try
            {
                var request = Mapper.Map<Mind.Models.RequestModels.TenantDeviceRequest>(body);
                var device = await _tenantDeviceService.AddAsync(tenantId.Value, request);
                var deviceApiModel = Mapper.Map<Mind.Api.Models.TenantDevice>(device);
                return CreatedAtRoute("GetTenantDevice", new { tenantId, deviceId = device.DeviceID }, deviceApiModel);
            }

            catch (BuilderBadArgumentsException ex) 
            {
                return new BadArgumentsResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Deletes a tenant device
        /// </summary>

        /// <param name="tenantId">ID of the tenant/param>
        /// <param name="deviceId">ID of the device/param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation failed</response>
        /// <response code="500">Error while updating the database</response>
        [HttpDelete]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/devices/{deviceId}")]
        [ValidateTenantDeviceExists]
        [ValidateModelState]
        [SwaggerOperation("DeleteTenantDevice")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation failed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> DeleteTenantDevice([FromRoute][Required]int? tenantId, [FromRoute][Required]int? deviceId)
        {
            try
            {
                await _tenantDeviceService.DeleteAsync(deviceId.Value);
                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (IllegalDeleteAttemptException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Find a tenant device by ID
        /// </summary>
        /// <remarks>Returns a single tenant device</remarks>
        /// <param name="tenantId">ID of the tenant/param>
        /// <param name="deviceId">ID of the device</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">Successful operation</response>
        /// <response code="304">The specified resource has not been modified</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/devices/{deviceId}", Name = "GetTenantDevice")]
        [ValidateModelState]
        [ValidateTenantDeviceExists]
        [SwaggerOperation("GetTenantDeviceById")]
        [SwaggerResponse(statusCode: 200, type: typeof(TenantDevice), description: "Successful operation")]
        [SwaggerResponse(statusCode: 304, description: "The specified resource has not been modified")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetTenantDeviceById([FromRoute][Required]int? tenantId, [FromRoute][Required]int? deviceId,
            [FromQuery]bool? deep)
        {
            var device = await _tenantDeviceService.GetByIDAsync(deviceId.Value, deep: deep);
            if (device.HasBeenModified(Request))
            {
                device.SetModifiedHttpHeaders(Response);
            }
            else
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }

            return Ok(Mapper.Map<TenantDevice>(device));
        }

        /// <summary>
        /// Find all tenant devices for a given tenant
        /// </summary>
        /// <remarks>Returns all tenant devices for the specified tenant</remarks>
        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/devices")]
        [ValidateModelState]
        [SwaggerOperation("GetTenantDevices")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TenantDevice>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public async virtual Task<IActionResult> GetTenantDevices([FromRoute][Required]int? tenantId, [FromQuery]bool? deep)
        {
            var devices = await _tenantDeviceService.GetAllByTenantIDAsync(tenantId.Value, deep: deep);
            return Ok(Mapper.Map<List<TenantDevice>>(devices));
        }

        /// <summary>
        /// Update an existing tenant device
        /// </summary>

        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="deviceId">ID of the device</param>
        /// <param name="body">Tenant device update object that updates an existing device</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="412">Precondition failed</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPatch]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/devices/{deviceId}")]
        [ValidateModelState]
        [ValidateTenantDeviceExists]
        [SwaggerOperation("UpdateTenantDevice")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 412, type: typeof(ApiResponse), description: "Precondition failed")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> UpdateTenantDevice([FromRoute][Required]int? tenantId, [FromRoute][Required]int? deviceId, 
            [FromBody]Mind.Api.Models.TenantDeviceUpdate body)
        {
            try
            {
                var item = await _tenantDeviceService.GetByIDAsync(deviceId.Value);
                if (item.HasPreconditionFailed(Request))
                {
                    return new PreconditionFailedResult();
                }

                var update = Mapper.Map<Mind.Models.RequestModels.TenantDeviceUpdate>(body);
                var device = await _tenantDeviceService.UpdateAsync(deviceId.Value, update);
                device.SetModifiedHttpHeaders(Response);

                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new BadArgumentsResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }
    }
}
