/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;
using AutoMapper;
using SCM.Services;
using Mind.Services;
using Microsoft.EntityFrameworkCore;
using Mind.Models;
using Swashbuckle.AspNetCore.Annotations;
using Mind.Builders;

namespace Mind.Api.Controllers
{
    /// <summary>
    /// API for creating and managing the lifecycle of tenant-facing BGP peers in the provider domain. 
    /// </summary>
    [ApiVersion("1.0")]
    [ApiExplorerSettings(GroupName = "Tenant Domain BGP Peering")]
    public class TenantDomainBgpPeerApiController : BaseApiController
    {
        private readonly ITenantDomainBgpPeerService _bgpPeerService;

        public TenantDomainBgpPeerApiController(IMapper mapper, ITenantDomainBgpPeerService bgpPeerService) : base(bgpPeerService, mapper)
        {
            _bgpPeerService = bgpPeerService;
        }

        /// <summary>
        /// Add a bgp peer to a given tenant domain device
        /// </summary>
        
        /// <param name="deviceId">ID of the device</param>
        /// <param name="body">request object that creates a new BGP peer entry</param>
        /// <response code="201">Successful operation</response>
        /// <response code="422">Validation error</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/bgp-peers")]
        [ValidateModelState]
        [ValidateTenantDomainDeviceExists]
        [SwaggerOperation("CreateTenantDomainBgpPeer")]
        [SwaggerResponse(statusCode: 201, type: typeof(TenantDomainBgpPeer), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> CreateTenantDomainBgpPeer([FromRoute][Required]int? deviceId, [FromBody]BgpPeerRequest body)
        {
            try
            {
                var request = Mapper.Map<Mind.Models.RequestModels.BgpPeerRequest>(body);
                var bgpPeer = await _bgpPeerService.AddAsync(deviceId.Value, request);
                var bgpPeerApiModel = Mapper.Map<Mind.Api.Models.TenantDomainBgpPeer>(bgpPeer);
                return CreatedAtRoute("GetTenantDomainBgpPeer", new { bgpPeerId = bgpPeer.BgpPeerID }, bgpPeerApiModel);
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Update a bgp peer
        /// </summary>

        /// <param name="deviceId">ID of the tenant domain device</param>
        /// <param name="bgpPeerId">ID of the bgp peer to update</param>
        /// <param name="body">BGP peer request object that applies updates to an existing bgp peer</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="412">Precondition failed</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPatch]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/bgp-peers/{bgpPeerId}")]
        [ValidateModelState]
        [ValidateTenantDomainBgpPeerExists]
        [SwaggerOperation("UpdateBgpPeer")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 412, type: typeof(ApiResponse), description: "Precondition failed")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> UpdateBgpPeer([FromRoute][Required]int? deviceId, [FromRoute][Required]int? bgpPeerId,
            [FromBody]BgpPeerRequest body)
        {
            try
            {
                var item = await _bgpPeerService.GetByIDAsync(bgpPeerId.Value);
                if (item.HasPreconditionFailed(Request)) return new PreconditionFailedResult();

                var request = Mapper.Map<Mind.Models.RequestModels.BgpPeerRequest>(body);
                var bgpPeer = await _bgpPeerService.UpdateAsync(bgpPeerId.Value, request);
                bgpPeer.SetModifiedHttpHeaders(Response);

                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Delete a BGP peer from a given tenant domain device
        /// </summary>

        /// <param name="deviceId">ID of the tenant domain device</param>
        /// <param name="bgpPeerId">ID of the bgp peer</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpDelete]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/bgp-peers/{bgpPeerId}")]
        [ValidateModelState]
        [ValidateTenantDomainBgpPeerExists]
        [SwaggerOperation("DeleteTenantDomainBgpPeer")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation failed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> DeleteRoutingInstanceBgpPeer([FromRoute][Required]int? deviceId, [FromRoute][Required]int? bgpPeerId)
        {
            try
            {
                await _bgpPeerService.DeleteAsync(bgpPeerId.Value);
                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (IllegalDeleteAttemptException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Find all BGP peers for a given tenant domain device
        /// </summary>
        /// <remarks>Returns all BGP peers for a given tenant domain device</remarks>
        /// <param name="deviceId">ID of the tenant domain device</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/bgp-peers")]
        [ValidateModelState]
        [ValidateTenantDomainDeviceExists]
        [SwaggerOperation("GetAllBgpPeersByTenantDomainDevice")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TenantDomainBgpPeer>), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetAllBgpPeersByTenantDomainDeviceId([FromRoute][Required]int? deviceId,[FromQuery]bool? deep)
        {
            var bgpPeers = await _bgpPeerService.GetAllByDeviceIDAsync(deviceId.Value, deep: deep);
            return Ok(Mapper.Map<List<TenantDomainBgpPeer>>(bgpPeers));
        }

        /// <summary>
        /// Find a single BGP peer for a given tenant domain device
        /// </summary>
        /// <remarks>Returns a single BGP peer for a given tenant domain device and BGP peer ID</remarks>
        /// <param name="deviceId">ID of the tenant domain device</param>
        /// <param name="bgpPeerId">ID of the BGP peer</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [ValidateModelState]
        [ValidateTenantDomainBgpPeerExists]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/bgp-peers/{bgpPeerId}", Name="GetTenantDomainBgpPeer")]
        [SwaggerOperation("GetTenantDomainDeviceBgpPeerById")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TenantDomainBgpPeer>), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetTenantDomainDeviceBgpPeerById([FromRoute][Required]int? deviceId, [FromRoute][Required]int? bgpPeerId, [FromQuery]bool? deep)
        {
            var bgpPeer = await _bgpPeerService.GetByIDAsync(bgpPeerId.Value, deep: deep);
            if (bgpPeer.HasBeenModified(Request))
            {
                bgpPeer.SetModifiedHttpHeaders(Response);
            }
            else
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }

            return Ok(Mapper.Map<TenantDomainBgpPeer>(bgpPeer));
        }
    }
}
