/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;
using Mind.Services;
using AutoMapper;
using SCM.Data;
using Microsoft.EntityFrameworkCore;
using Mind.Builders;
using Mind.Models;
using Swashbuckle.AspNetCore.Annotations;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// Create and manage the lifecycle of tenant domain ports
    /// </summary>
    [ApiVersion("1.0")]
    [ApiExplorerSettings(GroupName = "Tenant Domain Ports")]
    public class TenantDomainPortApiController : BaseApiController
    { 
        private readonly ITenantDomainPortService _tenantDomainPortService;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tenantDomainPortService"></param>
        /// <param name="mapper"></param>
        public TenantDomainPortApiController(ITenantDomainPortService tenantDomainPortService, IMapper mapper) : base(tenantDomainPortService, mapper)
        {
            _tenantDomainPortService = tenantDomainPortService;
        }

        /// <summary>
        /// Create a new tenant domain port
        /// </summary>

        /// <param name="deviceId">The ID of the tenant domain device</param>
        /// <param name="body">port request object that generates a new tenant domain port</param>
        /// <response code="201">Successful operation</response>
        /// <response code="422">Validation error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPost]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/ports")]
        [ValidateModelState]
        [ValidateTenantDomainDeviceExists]
        [SwaggerOperation("CreateTenantDomainPort")]
        [SwaggerResponse(statusCode: 201, type: typeof(Port), description: "Successful operation")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> CreateTenantDomainPort([FromRoute][Required]int? deviceId, [FromBody]Mind.Api.Models.PortRequestOrUpdate body)
        {
            try
            {
                var request = Mapper.Map<Mind.Models.RequestModels.PortRequestOrUpdate>(body);
                var port = await _tenantDomainPortService.AddAsync(deviceId.Value, request);
                var portApiModel = Mapper.Map<Mind.Api.Models.Port>(port);
                return CreatedAtRoute("GetTenantDomainPort", new { deviceId, portId = port.ID }, portApiModel);
            }

            catch (BuilderBadArgumentsException ex) 
            {
                return new BadArgumentsResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Deletes an tenant domain port
        /// </summary>

        /// <param name="deviceId">ID of the tenant domain device</param>
        /// <param name="portId">ID of the tenant domain port</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation failed</response>
        /// <response code="500">Error while updating the database</response>
        [HttpDelete]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/ports/{portId}")]
        [ValidateModelState]
        [ValidateTenantDomainPortExists]
        [SwaggerOperation("DeleteTenantDomainPort")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation failed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> DeleteTenantDomainPort([FromRoute][Required]int? deviceId, [FromRoute][Required]int? portId)
        {
            try
            {
                await _tenantDomainPortService.DeleteAsync(portId.Value);
                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (IllegalDeleteAttemptException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Find an tenant domain port by ID
        /// </summary>
        /// <remarks>Returns a single tenant domain port</remarks>
        /// <param name="deviceId">ID of the tenant domain device</param>
        /// <param name="portId">ID of the tenant domain port</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">Successful operation</response>
        /// <response code="304">The specified resource has not been modified</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/ports/{portId}", Name = "GetTenantDomainPort")]
        [ValidateModelState]
        [ValidateTenantDomainPortExists]
        [SwaggerOperation("GetTenantPortById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Port), description: "Successful operation")]
        [SwaggerResponse(statusCode: 304, description: "The specified resource has not been modified")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetTenantPortById([FromRoute][Required]int? deviceId, 
            [FromRoute][Required]int? portId, [FromQuery]bool? deep)
        {
            var port = await _tenantDomainPortService.GetByIDAsync(portId.Value, deep: deep);
            if (port.HasBeenModified(Request))
            {
                port.SetModifiedHttpHeaders(Response);
            }
            else
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }

            return Ok(Mapper.Map<Port>(port));
        }

        /// <summary>
        /// Find all tenant domain ports for a given device
        /// </summary>
        /// <remarks>Returns all tenant domain ports which exist for a given device</remarks>
        /// <param name="deviceId">The ID of the tenant domain device</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/ports")]
        [ValidateModelState]
        [ValidateTenantDomainDeviceExists]
        [SwaggerOperation("GetTenantPorts")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Port>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public async virtual Task<IActionResult> GetTenantDomainPorts([FromRoute][Required]int? deviceId, [FromQuery]bool? deep)
        {
            var ports = await _tenantDomainPortService.GetAllByDeviceIDAsync(deviceId.Value, deep: deep);
            return Ok(Mapper.Map<List<Port>>(ports));
        }

        /// <summary>
        /// Update an existing tenant domain port
        /// </summary>

        /// <param name="deviceId">ID of the device</param>
        /// <param name="portId">ID of the tenant port</param>
        /// <param name="body">Tenantn domain port update object that updates an existing tenant domain port</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="412">Precondition failed</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPatch]
        [Route("/v{version:apiVersion}/tenant-domain-devices/{deviceId}/ports/{portId}")]
        [ValidateModelState]
        [ValidateTenantDomainPortExists]
        [SwaggerOperation("UpdateTenantDomainPort")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 412, type: typeof(ApiResponse), description: "Precondition failed")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> UpdateTenantPort([FromRoute][Required]int? deviceId, [FromRoute][Required]int? portId, 
            [FromBody]Mind.Api.Models.PortRequestOrUpdate body)
        {
            try
            {
                var item = await _tenantDomainPortService.GetByIDAsync(portId.Value);
                if (item.HasPreconditionFailed(Request))
                {
                    return new PreconditionFailedResult();
                }

                var update = Mapper.Map<Mind.Models.RequestModels.PortRequestOrUpdate>(body);
                var port = await _tenantDomainPortService.UpdateAsync(portId.Value, update);
                port.SetModifiedHttpHeaders(Response);

                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new BadArgumentsResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }
    }
}
