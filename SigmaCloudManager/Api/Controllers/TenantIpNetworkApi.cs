/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;
using Microsoft.EntityFrameworkCore;
using Mind.Services;
using AutoMapper;

using Mind.Models;
using Swashbuckle.AspNetCore.Annotations;
using Mind.Builders;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiVersion("1.0")]
    [ApiExplorerSettings(GroupName = "Tenant IP Networks")]
    public class TenantIpNetworkApiController : BaseApiController
    {
        private readonly ITenantIpNetworkService _tenantIpNetworkService;

        public TenantIpNetworkApiController(ITenantIpNetworkService tenantIpNetworkService, IMapper mapper): base(tenantIpNetworkService, mapper)
        {
            _tenantIpNetworkService = tenantIpNetworkService;
        }

        /// <summary>
        /// Create a new tenant IP network
        /// </summary>

        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="body">IP network request object that generates a new tenant IP network</param>
        /// <response code="201">Successful operation</response>
        /// <response code="422">Validation error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPost]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/ip-networks")]
        [ValidateModelState]
        [ValidateTenantExists]
        [SwaggerOperation("CreateTenantIpNetwork")]
        [SwaggerResponse(statusCode: 201, type: typeof(TenantIpNetwork), description: "Successful operation")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Resource was not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> CreateTenantIpNetwork([FromRoute][Required]int? tenantId, [FromBody]TenantIpNetworkRequest body)
        {
            try
            {
                var request = Mapper.Map<Mind.Models.RequestModels.TenantIpNetworkRequest>(body);
                var tenantIpNetwork = await _tenantIpNetworkService.AddAsync(tenantId.Value, request);
                var tenantIpNetworkApiModel = Mapper.Map<Mind.Api.Models.TenantIpNetwork>(tenantIpNetwork);
                return CreatedAtRoute("GetTenantIpNetwork", new { tenantIpNetworkId = tenantIpNetwork.TenantIpNetworkID }, tenantIpNetworkApiModel);
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Update a tenant IP network
        /// </summary>

        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="tenantIpNetworkId">ID of the tenant IP network to update</param>
        /// <param name="body">IP network request object that applies updates to an existing IP network</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="412">Precondition failed</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPatch]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/ip-networks/{tenantIpNetworkId}")]
        [ValidateModelState]
        [ValidateTenantIpNetworkExists]
        [SwaggerOperation("UpdateTenantIpNetwork")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 412, type: typeof(ApiResponse), description: "Precondition failed")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> UpdateTenantIpNetwork([FromRoute][Required]int? tenantId,[FromRoute][Required]int? tenantIpNetworkId, 
            [FromBody]TenantIpNetworkRequest body)
        {
            try
            {
                var item = await _tenantIpNetworkService.GetByIDAsync(tenantIpNetworkId.Value);
                if (item.HasPreconditionFailed(Request)) return new PreconditionFailedResult();
                
                var update = Mapper.Map<Mind.Models.RequestModels.TenantIpNetworkRequest>(body);
                var tenantIpNetwork = await _tenantIpNetworkService.UpdateAsync(tenantIpNetworkId.Value, update);
                tenantIpNetwork.SetModifiedHttpHeaders(Response);

                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }
            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Deletes a tenant IP network
        /// </summary>

        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="tenantIpNetworkId">ID of the tenant IP network</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpDelete]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/ip-networks/{tenantIpNetworkId}")]
        [ValidateModelState]
        [ValidateTenantIpNetworkExists]
        [SwaggerOperation("DeleteTenantIpNetwork")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation failed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> DeleteTenantIpv4Network([FromRoute][Required]int? tenantId, [FromRoute][Required]int? tenantIpNetworkId)
        {
            try
            {
                await _tenantIpNetworkService.DeleteAsync(tenantIpNetworkId.Value);
                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (ServiceValidationException)
            {
                return new ValidationFailedResult(this.ModelState);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Find all IP networks for a given tenant
        /// </summary>
        /// <remarks>Returns all IP networks for a given tenant</remarks>
        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/ip-networks")]
        [ValidateModelState]
        [ValidateTenantExists]
        [SwaggerOperation("GetIpNetworksByTenantId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TenantIpNetwork>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetIpNetworksByTenantId([FromRoute][Required]int? tenantId,[FromQuery]bool? deep)
        {
            var tenantIpNetworks = await _tenantIpNetworkService.GetAllByTenantIDAsync(tenantId.Value, deep: deep);
            return Ok(Mapper.Map<List<TenantIpNetwork>>(tenantIpNetworks));
        }

        /// <summary>
        /// Find a tenant IP network by ID
        /// </summary>
        /// <remarks>Returns a single tenant IP network</remarks>
        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="tenantIpNetworkId">ID of the tenant IP network</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">Successful operation</response>
        /// <response code="304">The specified resource has not been modified</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/ip-networks/{tenantIpNetworkId}", Name ="GetTenantIpNetwork")]
        [ValidateModelState]
        [ValidateTenantIpNetworkExists]
        [SwaggerOperation("GetTenantIpNetworkById")]
        [SwaggerResponse(statusCode: 200, type: typeof(TenantIpNetwork), description: "Successful operation")]
        [SwaggerResponse(statusCode: 304, description: "The specified resource has not been modified")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetTenantIpNetworkById([FromRoute][Required]int? tenantId, 
            [FromRoute][Required]int? tenantIpNetworkId,[FromQuery] bool? deep)
        {
            var tenantIpNetwork = await _tenantIpNetworkService.GetByIDAsync(tenantIpNetworkId.Value, deep: deep);
            if (tenantIpNetwork.HasBeenModified(Request)) {
                tenantIpNetwork.SetModifiedHttpHeaders(Response);
            }
            else
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }

            return Ok(Mapper.Map<TenantIpNetwork>(tenantIpNetwork));
        }
    }
}
