/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class TenantIpv4NetworkApiController : Controller
    { 
        /// <summary>
        /// Create a new tenant IPv4 network
        /// </summary>
        
        /// <param name="tenantId">ID of the tenant</param>
        /// <param name="body">IPv4 network request object that generates a new IPv4 network</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Validation error</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/v1/tenant/{tenantId}/ipv4-network")]
        [ValidateModelState]
        [SwaggerOperation("AddTenantIpv4Network")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TenantIpv4Network>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult AddTenantIpv4Network([FromRoute][Required]int? tenantId, [FromBody]TenantIpv4Network body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TenantIpv4Network>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<TenantIpv4Network>\n  <tenantIpv4NetworkId>123</tenantIpv4NetworkId>\n  <ipv4Prefix>aeiou</ipv4Prefix>\n  <length>123</length>\n  <allowExtranet>true</allowExtranet>\n  <tenantId>123</tenantId>\n</TenantIpv4Network>";
            exampleJson = "[ {\n  \"tenantIpv4NetworkId\" : 0,\n  \"length\" : 19,\n  \"tenantId\" : 1,\n  \"allowExtranet\" : false,\n  \"ipv4Prefix\" : \"ipv4Prefix\"\n}, {\n  \"tenantIpv4NetworkId\" : 0,\n  \"length\" : 19,\n  \"tenantId\" : 1,\n  \"allowExtranet\" : false,\n  \"ipv4Prefix\" : \"ipv4Prefix\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TenantIpv4Network>>(exampleJson)
            : default(List<TenantIpv4Network>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes a tenant IPv4 network
        /// </summary>
        
        /// <param name="tenantIpv4NetworkId">ID of the tenant IPv4 network</param>
        /// <response code="204">Validation error</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/v1/tenant/ipv4-network/{tenantIpv4NetworkId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteTenantIpv4Network")]
        [SwaggerResponse(statusCode: 204, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual IActionResult DeleteTenantIpv4Network([FromRoute][Required]int? tenantIpv4NetworkId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "<null>\n  <code>123</code>\n  <type>aeiou</type>\n  <message>aeiou</message>\n</null>";
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find all IPv4 networks for a given tenant
        /// </summary>
        /// <remarks>Returns all IPv4 networks for a given tenant</remarks>
        /// <param name="tenantId">ID of the tenant</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid tenant ID supplied</response>
        [HttpGet]
        [Route("/v1/tenant/{tenantId}/ipv4-network")]
        [ValidateModelState]
        [SwaggerOperation("GetIpv4NetworksByTenantId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TenantIpv4Network>), description: "successful operation")]
        public virtual IActionResult GetIpv4NetworksByTenantId([FromRoute][Required]int? tenantId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TenantIpv4Network>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "<TenantIpv4Network>\n  <tenantIpv4NetworkId>123</tenantIpv4NetworkId>\n  <ipv4Prefix>aeiou</ipv4Prefix>\n  <length>123</length>\n  <allowExtranet>true</allowExtranet>\n  <tenantId>123</tenantId>\n</TenantIpv4Network>";
            exampleJson = "[ {\n  \"tenantIpv4NetworkId\" : 0,\n  \"length\" : 19,\n  \"tenantId\" : 1,\n  \"allowExtranet\" : false,\n  \"ipv4Prefix\" : \"ipv4Prefix\"\n}, {\n  \"tenantIpv4NetworkId\" : 0,\n  \"length\" : 19,\n  \"tenantId\" : 1,\n  \"allowExtranet\" : false,\n  \"ipv4Prefix\" : \"ipv4Prefix\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TenantIpv4Network>>(exampleJson)
            : default(List<TenantIpv4Network>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find a tenant IPv4 network by ID
        /// </summary>
        /// <remarks>Returns a single tenant IPv4 network</remarks>
        /// <param name="tenantIpv4NetworkId">ID of the tenant IPv4 network</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Tenant IPv4 network not found</response>
        [HttpGet]
        [Route("/v1/tenant/ipv4-network/{tenantIpv4NetworkId}")]
        [ValidateModelState]
        [SwaggerOperation("GetTenantIpv4NetworkById")]
        [SwaggerResponse(statusCode: 200, type: typeof(TenantIpv4Network), description: "successful operation")]
        public virtual IActionResult GetTenantIpv4NetworkById([FromRoute][Required]int? tenantIpv4NetworkId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TenantIpv4Network));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "<TenantIpv4Network>\n  <tenantIpv4NetworkId>123</tenantIpv4NetworkId>\n  <ipv4Prefix>aeiou</ipv4Prefix>\n  <length>123</length>\n  <allowExtranet>true</allowExtranet>\n  <tenantId>123</tenantId>\n</TenantIpv4Network>";
            exampleJson = "{\n  \"tenantIpv4NetworkId\" : 0,\n  \"length\" : 19,\n  \"tenantId\" : 1,\n  \"allowExtranet\" : false,\n  \"ipv4Prefix\" : \"ipv4Prefix\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TenantIpv4Network>(exampleJson)
            : default(TenantIpv4Network);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
