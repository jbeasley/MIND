/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;
using Mind.Services;
using AutoMapper;
using SCM.Data;
using Microsoft.EntityFrameworkCore;
using Mind.Builders;
using Mind.Models;
using Swashbuckle.AspNetCore.Annotations;

namespace Mind.Api.Controllers
{ 
    /// <summary>
    /// Create and manage the lifecycle of tenant device ports
    /// </summary>
    [ApiVersion("1.0")]
    public class TenantPortApiController : BaseApiController
    { 
        private readonly ITenantPortService _tenantPortService;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tenantPortService"></param>
        /// <param name="mapper"></param>
        public TenantPortApiController(ITenantPortService tenantPortService, IMapper mapper) : base(tenantPortService, mapper)
        {
            _tenantPortService = tenantPortService;
        }

        /// <summary>
        /// Create a new tenant port
        /// </summary>

        /// <param name="deviceId">The ID of the tenant device</param>
        /// <param name="body">port request object that generates a new tenant port</param>
        /// <response code="201">Successful operation</response>
        /// <response code="422">Validation error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPost]
        [Route("/v{version:apiVersion}/tenant-devices/{deviceId}/ports")]
        [ValidateModelState]
        [ValidateTenantDeviceExists]
        [SwaggerOperation("CreateTenantPort")]
        [SwaggerResponse(statusCode: 201, type: typeof(Port), description: "Successful operation")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> CreateTenantPort([FromRoute][Required]int? deviceId, [FromBody]Mind.Api.Models.PortRequest body)
        {
            try
            {
                var request = Mapper.Map<Mind.Models.RequestModels.PortRequest>(body);
                var port = await _tenantPortService.AddAsync(deviceId.Value, request);
                var portApiModel = Mapper.Map<Mind.Api.Models.Port>(port);
                return CreatedAtRoute("GetTenantPort", new { deviceId, portId = port.ID }, portApiModel);
            }

            catch (BuilderBadArgumentsException ex) 
            {
                return new BadArgumentsResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Deletes an tenant port
        /// </summary>

        /// <param name="deviceId">ID of the tenant device/param>
        /// <param name="portId">ID of the tenant port/param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation failed</response>
        /// <response code="500">Error while updating the database</response>
        [HttpDelete]
        [Route("/v{version:apiVersion}/tenant-devices/{deviceId}/ports/{portId}")]
        [ValidateTenantPortExists]
        [ValidateModelState]
        [SwaggerOperation("DeleteTenantPort")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation failed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> DeleteTenantPort([FromRoute][Required]int? deviceId, [FromRoute][Required]int? portId)
        {
            try
            {
                await _tenantPortService.DeleteAsync(portId.Value);
                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (IllegalDeleteAttemptException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Find an tenant port by ID
        /// </summary>
        /// <remarks>Returns a single tenant port</remarks>
        /// <param name="deviceId">ID of the tenant device</param>
        /// <param name="portId">ID of the tenant port</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">Successful operation</response>
        /// <response code="304">The specified resource has not been modified</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenant-devices/{deviceId}/ports/{portId}", Name = "GetTenantPort")]
        [ValidateModelState]
        [ValidateTenantPortExists]
        [SwaggerOperation("GetTenantPortById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Port), description: "Successful operation")]
        [SwaggerResponse(statusCode: 304, description: "The specified resource has not been modified")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetTenantPortById([FromRoute][Required]int? deviceId, 
            [FromRoute][Required]int? portId, [FromQuery]bool? deep)
        {
            var port = await _tenantPortService.GetByIDAsync(portId.Value, deep: deep);
            if (port.HasBeenModified(Request))
            {
                port.SetModifiedHttpHeaders(Response);
            }
            else
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }

            return Ok(Mapper.Map<Port>(port));
        }

        /// <summary>
        /// Find all tenant ports for a given device
        /// </summary>
        /// <remarks>Returns all tenant ports which exist for a given device</remarks>
        /// <param name="deviceId">The ID of the tenant device</param>
        /// <param name="deep">Perform a deep query on the resource</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v{version:apiVersion}/tenant-devices/{deviceId}/ports")]
        [ValidateModelState]
        [ValidateTenantDeviceExists]
        [SwaggerOperation("GetTenantPorts")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Port>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public async virtual Task<IActionResult> GetTenantPorts([FromRoute][Required]int? deviceId, [FromQuery]bool? deep)
        {
            var ports = await _tenantPortService.GetAllByDeviceIDAsync(deviceId.Value, deep: deep);
            return Ok(Mapper.Map<List<Port>>(ports));
        }

        /// <summary>
        /// Update an existing tenant port
        /// </summary>

        /// <param name="deviceId">ID of the device</param>
        /// <param name="portId">ID of the tenant port</param>
        /// <param name="body">Infrastructure device update object that updates an existing device</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="412">Precondition failed</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPatch]
        [Route("/v{version:apiVersion}/tenant-devices/{deviceId}/ports/{portId}")]
        [ValidateModelState]
        [ValidateTenantPortExists]
        [SwaggerOperation("UpdateTenantPort")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 412, type: typeof(ApiResponse), description: "Precondition failed")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> UpdateTenantPort([FromRoute][Required]int? deviceId, [FromRoute][Required]int? portId, 
            [FromBody]Mind.Api.Models.PortUpdate body)
        {
            try
            {
                var item = await _tenantPortService.GetByIDAsync(portId.Value);
                if (item.HasPreconditionFailed(Request))
                {
                    return new PreconditionFailedResult();
                }

                var update = Mapper.Map<Mind.Models.RequestModels.PortUpdate>(body);
                var port = await _tenantPortService.UpdateAsync(portId.Value, update);
                port.SetModifiedHttpHeaders(Response);

                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new BadArgumentsResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }
    }
}
