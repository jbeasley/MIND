/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Mind.Api.Attributes;
using Mind.Api.Models;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.EntityFrameworkCore;
using AutoMapper;
using SCM.Services;
using Mind.Services;
using Mind.Models;
using Mind.Builders;

namespace Mind.Api.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiVersion("1.0")]
    [ApiExplorerSettings(GroupName = "Virtual Private Networks")]
    public class VpnApiController : BaseApiController
    {
        private readonly IVpnService _vpnService;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="vpnService"></param>
        /// <param name="mapper"></param>
        public VpnApiController(IVpnService vpnService, IMapper mapper) : base(vpnService, mapper)
        {
            _vpnService = vpnService;
        }

        /// <summary>
        /// Create a new virtual private network
        /// </summary>

        ///<param name="tenantId"></param>
        /// <param name="body">vpn request object that generates a new vpn</param>
        /// <response code="201">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPost]
        [Route("/v{version:apiVersion}/tenants/{tenantId}/vpns")]
        [ValidateModelState]
        [ValidateTenantExists]
        [SwaggerResponse(statusCode: 201, type: typeof(Vpn), description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        [SwaggerOperation("CreateVpn")]

        public virtual async Task<IActionResult> CreateVpn([FromRoute][Required]int? tenantId, [FromBody]VpnRequest body)
        {
            try
            {
                var request = Mapper.Map<Mind.Models.RequestModels.VpnRequest>(body);
                var vpn = await _vpnService.AddAsync(tenantId.Value, request);

                return CreatedAtRoute("GetVpn", new { vpnId = vpn.VpnID }, Mapper.Map<Vpn>(vpn));
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new BadArgumentsResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException ex)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Update an existing vpn
        /// </summary>
        /// <param name="body">Updated vpn object</param>
        /// <param name="tenantId">The ID of the tenant</param>
        /// <param name="vpnId">The ID of the vpn</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="412">Precondition failed</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Error while updating the database</response>
        [HttpPatch]
        [Route("v{version:apiVersion}/tenants/{tenantId}/vpns/{vpnId}")]
        [ValidateModelState]
        [ValidateVpnExists]
        [SwaggerOperation("UpdateVpn")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 412, type: typeof(ApiResponse), description: "Precondition failed")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> UpdateTenant([FromRoute][Required]int? tenantId, [FromRoute][Required]int? vpnId, [FromBody]VpnUpdate body)
        {
            try
            {
                var item = await _vpnService.GetByIDAsync(vpnId.Value);
                if (item.HasPreconditionFailed(Request)) return new PreconditionFailedResult();
                var update = Mapper.Map<Mind.Models.RequestModels.VpnUpdate>(body);
                var updatedVpn = await _vpnService.UpdateAsync(vpnId.Value, update);
                updatedVpn.SetModifiedHttpHeaders(Response);

                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (BuilderBadArgumentsException ex)
            {
                return new BadArgumentsResult(ex.Message);
            }

            catch (BuilderUnableToCompleteException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (IllegalStateException ex)
            {
                return new ValidationFailedResult(ex.Message);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Delete a vpn
        /// </summary>
        /// <param name="tenantId">The ID of the tenant</param>
        /// <param name="vpnId">ID of the vpn</param>
        /// <response code="204">Successful operation</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="422">Validation failed</response>
        /// <response code="500">Error while updating the database</response>
        [HttpDelete]
        [Route("v{version:apiVersion}/tenants/{tenantId}/vpns/{vpnId}")]
        [ValidateModelState]
        [ValidateVpnExists]
        [SwaggerOperation("DeleteVpn")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Validation failed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResponse), description: "Error while updating the database")]
        public virtual async Task<IActionResult> DeleteVpn([FromRoute][Required]int? tenantId, [FromRoute][Required]int? vpnId)
        {
            try
            {
                await _vpnService.DeleteAsync(vpnId.Value);
                return StatusCode(StatusCodes.Status204NoContent);
            }

            catch (ServiceValidationException)
            {
                return new ValidationFailedResult(this.ModelState);
            }

            catch (DbUpdateException)
            {
                return new DatabaseUpdateFailedResult();
            }
        }

        /// <summary>
        /// Find all vpns for a given tenant
        /// </summary>
        /// <remarks>Returns a collection of all vpns for the specified tenant</remarks>
        /// <param name="tenantId">The ID of the tenant</param>
        /// <response code="200">Successful operation</response>
        /// <param name="deep">Perform a deep query to return detailed information on vpns</param>
        [HttpGet]
        [Route("v{version:apiVersion}/tenants/{tenantId}/vpns")]
        [ValidateModelState]
        [ValidateTenantExists]
        [SwaggerOperation("GetAllVpnsByTenant")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Vpn>), description: "Successful operation")]
        public virtual async Task<IActionResult> GetAllVpnsByTenant([FromRoute][Required]int? tenantId, [FromQuery]bool? deep)
        {
            var vpns = await _vpnService.GetAllByTenantIDAsync(tenantId.Value, deep: deep);
            return Ok(Mapper.Map<List<Vpn>>(vpns));
        }

        /// <summary>
        /// Find a vpn by ID
        /// </summary>
        /// <remarks>Returns a single vpn</remarks>
        /// <param name="tenantId">The ID of the tenant</param>
        /// <param name="vpnId">ID of the vpn</param>
        /// <param name="deep">Perform a deep query to return deailed information on the vpn</param>
        /// <response code="200">successful operation</response>
        /// <response code="304">The specified resource has not been modified</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("v{version:apiVersion}/tenants/{tenantId}/vpns/{vpnId}", Name = "GetVpn")]
        [ValidateModelState]
        [ValidateVpnExists]
        [SwaggerOperation("GetVpnById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Vpn), description: "Successful operation")]
        [SwaggerResponse(statusCode: 304, description: "The specified resource has not been modified")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "The specified resource was not found")]
        public virtual async Task<IActionResult> GetVpnById([FromRoute][Required]int? tenantId, [FromRoute][Required]int? vpnId, [FromQuery]bool? deep)
        {
            var vpn = await _vpnService.GetByIDAsync(vpnId.Value, deep: deep);
            if (!vpn.HasBeenModified(Request))
            {
                return StatusCode(StatusCodes.Status304NotModified);
            }
            else
            {
                vpn.SetModifiedHttpHeaders(Response);
            }

            return Ok(Mapper.Map<Vpn>(vpn));
        }
    }
}
