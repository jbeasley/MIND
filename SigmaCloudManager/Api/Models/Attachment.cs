/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Attachment : IEquatable<Attachment>
    { 
        /// <summary>
        /// ID of the attachment
        /// </summary>
        /// <value>ID of the attachment</value>
        [DataMember(Name="attachmentId")]
        public int? AttachmentId { get; set; }

        /// <summary>
        /// Determines whether the attachment is enabled for layer 3
        /// </summary>
        /// <value>Determines whether the attachment is enabled for layer 3</value>
        [DataMember(Name="isLayer3")]
        public bool? IsLayer3 { get; set; }

        /// <summary>
        /// Determines if the attachment is delivered as a bundle
        /// </summary>
        /// <value>Determines if the attachment is delivered as a bundle</value>
        [DataMember(Name="isBundle")]
        public bool? IsBundle { get; set; }

        /// <summary>
        /// Determines if the attachment is delivered as a multiport
        /// </summary>
        /// <value>Determines if the attachment is delivered as a multiport</value>
        [DataMember(Name="isMultiport")]
        public bool? IsMultiport { get; set; }

        /// <summary>
        /// Determines if the attachment is enabled with tagging
        /// </summary>
        /// <value>Determines if the attachment is enabled with tagging</value>
        [DataMember(Name="isTagged")]
        public bool? IsTagged { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name="tenant")]
        public Tenant Tenant { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name="infrastructureDevice")]
        public InfrastructureDevice InfrastructureDevice { get; set; }

        /// <summary>
        /// The bandwidth of the attachment in Gbps
        /// </summary>
        /// <value>The bandwidth of the attachment in Gbps</value>
        [DataMember(Name="attachmentBandwidthGbps")]
        public int? AttachmentBandwidthGbps { get; set; }

        /// <summary>
        /// Gets or Sets ContractBandwidthPool
        /// </summary>
        [DataMember(Name="contractBandwidthPool")]
        public ContractBandwidthPool ContractBandwidthPool { get; set; }

        /// <summary>
        /// Gets or Sets RoutingInstance
        /// </summary>
        [DataMember(Name="routingInstance")]
        public RoutingInstance RoutingInstance { get; set; }

        /// <summary>
        /// Gets or Sets Interfaces
        /// </summary>
        [DataMember(Name = "interfaces")]
        public List<Interface> Interfaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attachment {\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  IsLayer3: ").Append(IsLayer3).Append("\n");
            sb.Append("  IsBundle: ").Append(IsBundle).Append("\n");
            sb.Append("  IsMultiport: ").Append(IsMultiport).Append("\n");
            sb.Append("  IsTagged: ").Append(IsTagged).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  InfrastructureDevice: ").Append(InfrastructureDevice).Append("\n");
            sb.Append("  AttachmentBandwidthGbps: ").Append(AttachmentBandwidthGbps).Append("\n");
            sb.Append("  ContractBandwidthPool: ").Append(ContractBandwidthPool).Append("\n");
            sb.Append("  RoutingInstance: ").Append(RoutingInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Attachment)obj);
        }

        /// <summary>
        /// Returns true if Attachment instances are equal
        /// </summary>
        /// <param name="other">Instance of Attachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attachment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AttachmentId == other.AttachmentId ||
                    AttachmentId != null &&
                    AttachmentId.Equals(other.AttachmentId)
                ) && 
                (
                    IsLayer3 == other.IsLayer3 ||
                    IsLayer3 != null &&
                    IsLayer3.Equals(other.IsLayer3)
                ) && 
                (
                    IsBundle == other.IsBundle ||
                    IsBundle != null &&
                    IsBundle.Equals(other.IsBundle)
                ) && 
                (
                    IsMultiport == other.IsMultiport ||
                    IsMultiport != null &&
                    IsMultiport.Equals(other.IsMultiport)
                ) && 
                (
                    IsTagged == other.IsTagged ||
                    IsTagged != null &&
                    IsTagged.Equals(other.IsTagged)
                ) && 
                (
                    Tenant == other.Tenant ||
                    Tenant != null &&
                    Tenant.Equals(other.Tenant)
                ) && 
                (
                    InfrastructureDevice == other.InfrastructureDevice ||
                    InfrastructureDevice != null &&
                    InfrastructureDevice.Equals(other.InfrastructureDevice)
                ) && 
                (
                    AttachmentBandwidthGbps == other.AttachmentBandwidthGbps ||
                    AttachmentBandwidthGbps != null &&
                    AttachmentBandwidthGbps.Equals(other.AttachmentBandwidthGbps)
                ) && 
                (
                    ContractBandwidthPool == other.ContractBandwidthPool ||
                    ContractBandwidthPool != null &&
                    ContractBandwidthPool.Equals(other.ContractBandwidthPool)
                ) && 
                (
                    RoutingInstance == other.RoutingInstance ||
                    RoutingInstance != null &&
                    RoutingInstance.Equals(other.RoutingInstance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AttachmentId != null)
                    hashCode = hashCode * 59 + AttachmentId.GetHashCode();
                    if (IsLayer3 != null)
                    hashCode = hashCode * 59 + IsLayer3.GetHashCode();
                    if (IsBundle != null)
                    hashCode = hashCode * 59 + IsBundle.GetHashCode();
                    if (IsMultiport != null)
                    hashCode = hashCode * 59 + IsMultiport.GetHashCode();
                    if (IsTagged != null)
                    hashCode = hashCode * 59 + IsTagged.GetHashCode();
                    if (Tenant != null)
                    hashCode = hashCode * 59 + Tenant.GetHashCode();
                    if (InfrastructureDevice != null)
                    hashCode = hashCode * 59 + InfrastructureDevice.GetHashCode();
                    if (AttachmentBandwidthGbps != null)
                    hashCode = hashCode * 59 + AttachmentBandwidthGbps.GetHashCode();
                    if (ContractBandwidthPool != null)
                    hashCode = hashCode * 59 + ContractBandwidthPool.GetHashCode();
                    if (RoutingInstance != null)
                    hashCode = hashCode * 59 + RoutingInstance.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Attachment left, Attachment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Attachment left, Attachment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
