/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for updating an attachment set
    /// </summary>
    [DataContract]
    public partial class AttachmentSetUpdate : IEquatable<AttachmentSetUpdate>
    {
        /// <summary>
        /// The sub-region within which the attachment set operates
        /// </summary>
        /// <value>A string value for the subregion within which the attachment set operates</value>
        /// <example>UK</example>
        [DataMember(Name="subRegion")]
        public string SubRegion { get; set; }

        /// <summary>
        /// Enumeration of attachment redundancy levels
        /// </summary>
        public enum AttachmentRedundancyEnum
        { 
            /// <summary>
            /// Enum for Bronze
            /// </summary>
            [EnumMember(Value = "Bronze")]
            Bronze = 1,
            
            /// <summary>
            /// Enum for Silver
            /// </summary>
            [EnumMember(Value = "Silver")]
            Silver = 2,
            
            /// <summary>
            /// Enum for Gold
            /// </summary>
            [EnumMember(Value = "Gold")]
            Gold = 3,
            
            /// <summary>
            /// Enum for Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 4
        }

        /// <summary>
        /// Determines the ttachment redundancy level supported by the attachment set
        /// </summary>
        /// <value>An enum member for the attachment redundancy supported by the attachment set</value>
        /// <example>Silver</example>
        [DataMember(Name="attachmentRedundancy")]
        public AttachmentRedundancyEnum? AttachmentRedundancy { get; set; }

        /// <summary>
        /// Enumeration of multicast domain types
        /// </summary>
        public enum MulticastVpnDomainTypeEnum
        {
            /// <summary>
            /// Enum for Sender-Only
            /// </summary>
            [EnumMember(Value = "Sender-Only")]
            SenderOnly = 1,

            /// <summary>
            /// Enum for Receiver-Only
            /// </summary>
            [EnumMember(Value = "Receiver-Only")]
            ReceiverOnly = 2,

            /// <summary>
            /// Enum for Sender-and-Receiver
            /// </summary>
            [EnumMember(Value = "Sender-and-Receiver")]
            SenderAndReceiver = 3
        }

        /// <summary>
        /// Determines the multicast domain type supported by the attachment set
        /// </summary>
        /// <value>An enum member for the multicast domain supported by the attachment set</value>
        /// <example>Sender-and-Receiver</example>
        [DataMember(Name = "multicastVpnDomainType")]
        public MulticastVpnDomainTypeEnum? MulticastVpnDomainType { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentSetUpdate {\n");
            sb.Append("  SubRegion: ").Append(SubRegion).Append("\n");
            sb.Append("  AttachmentRedundancy: ").Append(AttachmentRedundancy).Append("\n");
            sb.Append("  MulticastVpnDomainType: ").Append(MulticastVpnDomainType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AttachmentSetUpdate)obj);
        }

        /// <summary>
        /// Returns true if AttachmentSetRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AttachmentSetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentSetUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubRegion == other.SubRegion ||
                    SubRegion != null &&
                    SubRegion.Equals(other.SubRegion)
                ) && 
                (
                    AttachmentRedundancy == other.AttachmentRedundancy ||
                    AttachmentRedundancy != null &&
                    AttachmentRedundancy.Equals(other.AttachmentRedundancy)
                ) &&
                (
                    MulticastVpnDomainType == other.MulticastVpnDomainType ||
                    MulticastVpnDomainType != null &&
                    MulticastVpnDomainType.Equals(other.MulticastVpnDomainType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (SubRegion != null)
                    hashCode = hashCode * 59 + SubRegion.GetHashCode();
                if (AttachmentRedundancy != null)
                    hashCode = hashCode * 59 + AttachmentRedundancy.GetHashCode();
                if (MulticastVpnDomainType != null)
                    hashCode = hashCode * 59 + MulticastVpnDomainType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AttachmentSetUpdate left, AttachmentSetUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AttachmentSetUpdate left, AttachmentSetUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
