/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;


namespace Mind.Api.Models
{
    /// <summary>
    /// Model of a BGP IP network inbound policy
    /// </summary>
    [DataContract]
    public partial class BgpIpNetworkInboundPolicyRequest : IEquatable<BgpIpNetworkInboundPolicyRequest>
    {
        /// <summary>
        /// A list of routing instance names which refer to routing instances which are associated with the 
        /// attachment to which the BGP IP network inbound policy belongs.
        /// </summary>
        /// <value>A list of string values denoting the names of routing instances</value>
        [DataMember(Name = "routingInstanceNames")]
        public List<string> RoutingInstanceNames { get; set; }

        /// <summary>
        /// A list of BGP peers which belong to the routing instances which are associated with the attachment set to which
        /// the BGP IP network inbound policy belongs
        /// </summary>
        /// <value>A list of ProviderDomainBgpPeer objects</value>
        [DataMember(Name = "bgpPeers")]
        public List<ProviderDomainBgpPeer> BgpPeers { get; set; }

        /// <summary>
        /// A list of tenant IP networks to associate with the BGP IP network inbound policy
        /// </summary>
        /// <value>A list of VpnTenantIpNetworkInRequest objects</value>
        [DataMember(Name = "vpnTenantIpNetworkInRequests")]
        public List<VpnTenantIpNetworkInRequest> VpnTenantIpNetworkInRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BgpIpNetworkInboundPolicyRequest {\n");
            sb.Append("  RoutingInstanceNames: ").Append(RoutingInstanceNames).Append("\n");
            sb.Append("  BgpPeers: ").Append(BgpPeers).Append("\n");
            sb.Append("  vpnTenantIpNetworkInRequests: ").Append(VpnTenantIpNetworkInRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BgpIpNetworkInboundPolicyRequest)obj);
        }

        /// <summary>
        /// Returns true if BgpIpNetworkInboundPolicyRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of BgpIpNetworkInboundPolicyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BgpIpNetworkInboundPolicyRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    RoutingInstanceNames == other.RoutingInstanceNames ||
                    RoutingInstanceNames != null &&
                    RoutingInstanceNames.Equals(other.RoutingInstanceNames)
                ) &&
                (

                    BgpPeers == other.BgpPeers ||
                    BgpPeers != null &&
                    BgpPeers.Equals(other.BgpPeers)
                ) &&
                (
                    VpnTenantIpNetworkInRequests == other.VpnTenantIpNetworkInRequests ||
                    VpnTenantIpNetworkInRequests != null &&
                    VpnTenantIpNetworkInRequests.Equals(other.VpnTenantIpNetworkInRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (RoutingInstanceNames != null)
                    hashCode = hashCode * 59 + RoutingInstanceNames.GetHashCode();
                if (BgpPeers != null)
                    hashCode = hashCode * 59 + BgpPeers.GetHashCode();
                if (VpnTenantIpNetworkInRequests != null)
                    hashCode = hashCode * 59 + VpnTenantIpNetworkInRequests.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BgpIpNetworkInboundPolicyRequest left, BgpIpNetworkInboundPolicyRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BgpIpNetworkInboundPolicyRequest left, BgpIpNetworkInboundPolicyRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
