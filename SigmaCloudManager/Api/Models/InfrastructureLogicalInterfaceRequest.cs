/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for requesting an infrastructure logical interface
    /// </summary>
    [DataContract]
    public partial class InfrastructureLogicalInterfaceRequest : IEquatable<InfrastructureLogicalInterfaceRequest>
    {
        /// <summary>
        /// The name of the routing instance to which the logical interface when created should be associated.
        /// </summary>
        /// <value>A string value denoting the name of the routing instance</value>
        /// <example>db7c48eaa9864cd0b3aa6af08c8370d6</example>
        [DataMember(Name = "routingInstanceName")]
        public string RoutingInstanceName { get; set; }

        /// <summary>
        /// A description of the logical interface.
        /// </summary>
        /// <value>A string value denoting the description to apply to the logical interface</value>
        /// <example>Loopback interface for multi-hop BGP peering</example>
        [Required]
        [DataMember(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The type of logical interface required.
        /// </summary>
        /// <value>Enum value denoting the type of logical interface</value>
        /// <example>Loopback</example>
        [Required]
        [DataMember(Name = "logicalInterfaceType")]
        public LogicalInterfaceTypeEnum? LogicalInterfaceType { get; set; }

        /// <summary>
        /// IPv4 address and mask to be assigned to the logical interface
        /// </summary>
        /// <value>An instance of Ipv4AddressAndMask</value>
        [DataMember(Name="ipv4Address")]
        public Ipv4AddressAndMask Ipv4Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InfrastructureLogicalInterfaceRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogicalInterfaceType: ").Append(LogicalInterfaceType).Append("\n");
            sb.Append("  Ipv4Address: ").Append(Ipv4Address).Append("\n");
            sb.Append("  RoutingInstanceName: ").Append(RoutingInstanceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InfrastructureLogicalInterfaceRequest)obj);
        }

        /// <summary>
        /// Returns true if InfrastructureLogicalInterfaceRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of InfrastructureLogicalInterfaceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InfrastructureLogicalInterfaceRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    LogicalInterfaceType == other.LogicalInterfaceType ||
                    LogicalInterfaceType != null &&
                    LogicalInterfaceType.Equals(other.LogicalInterfaceType)
                ) &&
                (
                    RoutingInstanceName == other.RoutingInstanceName ||
                    RoutingInstanceName != null &&
                    RoutingInstanceName.Equals(other.RoutingInstanceName)
                ) &&
                (
                    Ipv4Address == other.Ipv4Address ||
                    Ipv4Address != null &&
                    Ipv4Address.Equals(other.Ipv4Address)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (LogicalInterfaceType != null)
                    hashCode = hashCode * 59 + LogicalInterfaceType.GetHashCode();
                    if (Ipv4Address != null)
                    hashCode = hashCode * 59 + Ipv4Address.GetHashCode();
                    if (RoutingInstanceName != null)
                    hashCode = hashCode * 59 + RoutingInstanceName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InfrastructureLogicalInterfaceRequest left, InfrastructureLogicalInterfaceRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InfrastructureLogicalInterfaceRequest left, InfrastructureLogicalInterfaceRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
