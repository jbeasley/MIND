/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InfrastructureVifRequest : IEquatable<InfrastructureVifRequest>
    { 
        /// <summary>
        /// Determines if the vif should be enabled for layer 3
        /// </summary>
        /// <value>Determines if the vif should be enabled for layer 3</value>
        [DataMember(Name="isLayer3")]
        public bool? IsLayer3 { get; set; }

        /// <summary>
        /// IEEE 802.1Q vlan tag allocated to the vif
        /// </summary>
        /// <value>IEEE 802.1Q vlan tag allocated to the vif</value>
        [DataMember(Name="vlanTag")]
        public int? VlanTag { get; set; }

        /// <summary>
        /// IPv4 address assigned to the first connection in the vif
        /// </summary>
        /// <value>IPv4 address assigned to the first connection in the vif</value>
        [DataMember(Name="IpAddress1")]
        public string IpAddress1 { get; set; }

        /// <summary>
        /// IPv4 subnet mask assigned to the first connection in the vif
        /// </summary>
        /// <value>IPv4 subnet mask assigned to the first connection in the vif</value>
        [DataMember(Name="SubnetMask1")]
        public string SubnetMask1 { get; set; }

        /// <summary>
        /// IPv4 address assigned to the second connection in the vif
        /// </summary>
        /// <value>IPv4 address assigned to the second connection in the vif</value>
        [DataMember(Name="IpAddress2")]
        public string IpAddress2 { get; set; }

        /// <summary>
        /// IPv4 subnet mask assigned to the second connection in the vif
        /// </summary>
        /// <value>IPv4 subnet mask assigned to the second connection in the vif</value>
        [DataMember(Name="SubnetMask2")]
        public string SubnetMask2 { get; set; }

        /// <summary>
        /// IPv4 address assigned to the third connection in the vif
        /// </summary>
        /// <value>IPv4 address assigned to the third connection in the vif</value>
        [DataMember(Name="IpAddress3")]
        public string IpAddress3 { get; set; }

        /// <summary>
        /// IPv4 subnet mask assigned to the third connection in the vif
        /// </summary>
        /// <value>IPv4 subnet mask assigned to the third connection in the vif</value>
        [DataMember(Name="SubnetMask3")]
        public string SubnetMask3 { get; set; }

        /// <summary>
        /// IPv4 address assigned to the fourth connection in the vif
        /// </summary>
        /// <value>IPv4 address assigned to the fourth connection in the vif</value>
        [DataMember(Name="IpAddress4")]
        public string IpAddress4 { get; set; }

        /// <summary>
        /// IPv4 subnet mask assigned to the fourth connection in the vif
        /// </summary>
        /// <value>IPv4 subnet mask assigned to the fourth connection in the vif</value>
        [DataMember(Name="SubnetMask4")]
        public string SubnetMask4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InfrastructureVifRequest {\n");
            sb.Append("  IsLayer3: ").Append(IsLayer3).Append("\n");
            sb.Append("  VlanTag: ").Append(VlanTag).Append("\n");
            sb.Append("  IpAddress1: ").Append(IpAddress1).Append("\n");
            sb.Append("  SubnetMask1: ").Append(SubnetMask1).Append("\n");
            sb.Append("  IpAddress2: ").Append(IpAddress2).Append("\n");
            sb.Append("  SubnetMask2: ").Append(SubnetMask2).Append("\n");
            sb.Append("  IpAddress3: ").Append(IpAddress3).Append("\n");
            sb.Append("  SubnetMask3: ").Append(SubnetMask3).Append("\n");
            sb.Append("  IpAddress4: ").Append(IpAddress4).Append("\n");
            sb.Append("  SubnetMask4: ").Append(SubnetMask4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InfrastructureVifRequest)obj);
        }

        /// <summary>
        /// Returns true if InfrastructureVifRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of InfrastructureVifRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InfrastructureVifRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsLayer3 == other.IsLayer3 ||
                    IsLayer3 != null &&
                    IsLayer3.Equals(other.IsLayer3)
                ) && 
                (
                    VlanTag == other.VlanTag ||
                    VlanTag != null &&
                    VlanTag.Equals(other.VlanTag)
                ) && 
                (
                    IpAddress1 == other.IpAddress1 ||
                    IpAddress1 != null &&
                    IpAddress1.Equals(other.IpAddress1)
                ) && 
                (
                    SubnetMask1 == other.SubnetMask1 ||
                    SubnetMask1 != null &&
                    SubnetMask1.Equals(other.SubnetMask1)
                ) && 
                (
                    IpAddress2 == other.IpAddress2 ||
                    IpAddress2 != null &&
                    IpAddress2.Equals(other.IpAddress2)
                ) && 
                (
                    SubnetMask2 == other.SubnetMask2 ||
                    SubnetMask2 != null &&
                    SubnetMask2.Equals(other.SubnetMask2)
                ) && 
                (
                    IpAddress3 == other.IpAddress3 ||
                    IpAddress3 != null &&
                    IpAddress3.Equals(other.IpAddress3)
                ) && 
                (
                    SubnetMask3 == other.SubnetMask3 ||
                    SubnetMask3 != null &&
                    SubnetMask3.Equals(other.SubnetMask3)
                ) && 
                (
                    IpAddress4 == other.IpAddress4 ||
                    IpAddress4 != null &&
                    IpAddress4.Equals(other.IpAddress4)
                ) && 
                (
                    SubnetMask4 == other.SubnetMask4 ||
                    SubnetMask4 != null &&
                    SubnetMask4.Equals(other.SubnetMask4)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsLayer3 != null)
                    hashCode = hashCode * 59 + IsLayer3.GetHashCode();
                    if (VlanTag != null)
                    hashCode = hashCode * 59 + VlanTag.GetHashCode();
                    if (IpAddress1 != null)
                    hashCode = hashCode * 59 + IpAddress1.GetHashCode();
                    if (SubnetMask1 != null)
                    hashCode = hashCode * 59 + SubnetMask1.GetHashCode();
                    if (IpAddress2 != null)
                    hashCode = hashCode * 59 + IpAddress2.GetHashCode();
                    if (SubnetMask2 != null)
                    hashCode = hashCode * 59 + SubnetMask2.GetHashCode();
                    if (IpAddress3 != null)
                    hashCode = hashCode * 59 + IpAddress3.GetHashCode();
                    if (SubnetMask3 != null)
                    hashCode = hashCode * 59 + SubnetMask3.GetHashCode();
                    if (IpAddress4 != null)
                    hashCode = hashCode * 59 + IpAddress4.GetHashCode();
                    if (SubnetMask4 != null)
                    hashCode = hashCode * 59 + SubnetMask4.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InfrastructureVifRequest left, InfrastructureVifRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InfrastructureVifRequest left, InfrastructureVifRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
