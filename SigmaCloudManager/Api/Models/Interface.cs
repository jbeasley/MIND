/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model of an interface
    /// </summary>
    [DataContract]
    public partial class Interface : IEquatable<Interface>
    { 
        /// <summary>
        /// The ID of the interface
        /// </summary>
        /// <value>The ID of the interface</value>
        [DataMember(Name="interfaceId")]
        public int? InterfaceId { get; set; }

        /// <summary>
        /// IPv4 address assigned to the interface
        /// </summary>
        /// <value>String value representing the IPv4 address assigned to the interface</value>
        [DataMember(Name = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// IPv4 subnet mask assigned to the interface
        /// </summary>
        /// <value>String value representing the IPv4 subnet mask assigned to the interface</value>
        [DataMember(Name = "subnetMask")]
        public string SubnetMask { get; set; }

        /// <summary>
        /// Ports which provide physical connectivity to the network for the interface
        /// </summary>
        /// <value>The ports of the interface</value>
        [DataMember(Name = "ports")]
        public List<Port> Ports { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class interface {\n");
            sb.Append("  interfaceId: ").Append(InterfaceId).Append("\n");
            sb.Append("  ipAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  subnetMask: ").Append(SubnetMask).Append("\n");
            sb.Append("  ports: ").Append(Ports).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Interface)obj);
        }

        /// <summary>
        /// Returns true if Interface instances are equal
        /// </summary>
        /// <param name="other">Instance of Interafce to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Interface other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    InterfaceId == other.InterfaceId ||
                    InterfaceId != null &&
                    InterfaceId.Equals(other.InterfaceId)
                ) &&
                (
                    IpAddress == other.IpAddress ||
                    IpAddress != null &&
                    IpAddress.Equals(other.IpAddress)
                ) &&
                (
                    SubnetMask == other.SubnetMask ||
                    SubnetMask != null &&
                    SubnetMask.Equals(other.SubnetMask)
                ) &&
                (
                    Ports == other.Ports ||
                    Ports != null &&
                    Ports.Equals(other.Ports)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InterfaceId != null)
                    hashCode = hashCode * 59 + InterfaceId.GetHashCode();
                    if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                    if (SubnetMask != null)
                    hashCode = hashCode * 59 + SubnetMask.GetHashCode();
                    if (Ports != null)
                    hashCode = hashCode * 59 + Ports.GetHashCode();

                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Interface left, Interface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Interface left, Interface right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
