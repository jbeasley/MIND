/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for a logical interface
    /// </summary>
    [DataContract]
    public partial class LogicalInterface : IEquatable<LogicalInterface>
    {
        /// <summary>
        /// The ID of the logical interface
        /// </summary>
        /// <value>Integer value denoting the ID of the logical interface</value>
        /// <example>91009</example>
        [DataMember(Name = "logicalInterfaceId")]
        public int? LogicalInterfaceId { get; private set; }

        /// <summary>
        /// The name of the routing instance
        /// </summary>
        /// <value>String value denoting the name of the routing instance</value>
        /// <example>713faafc85ff43db8472b6b9c38033a1</example>
        [DataMember(Name = "routingInstanceName")]
        public string RoutingInstanceName { get; private set; }

        /// <summary>
        /// The name of the logical interface.
        /// </summary>
        /// <value>A string value denoting the name of the logical interface</value>
        /// <example>Loopback1</example>
        [DataMember(Name = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// A description of the logical interface.
        /// </summary>
        /// <value>A string value denoting the description of the logical interface</value>
        /// <example>Loopback interface for multi-hop BGP peering</example>
        [DataMember(Name = "description")]
        public string Description { get; private set; }

        /// <summary>
        /// The type of logical interface required.
        /// </summary>
        /// <value>Enum value denoting the type of logical interface</value>
        /// <example>Loopback</example>
        [Required]
        [DataMember(Name = "logicalInterfaceType")]
        public string LogicalInterfaceType { get; private set; }

        /// <summary>
        /// IPv4 address assigned to the logical interface
        /// </summary>
        /// <value>String value representing the IPv4 address assigned to the logical interface</value>
        /// <example>192.168.0.1</example>
        [DataMember(Name = "ipAddress")]
        public string IpAddress { get; private set; }

        /// <summary>
        /// IPv4 subnet mask assigned to the logical interface
        /// </summary>
        /// <value>String value representing the IPv4 subnet mask assigned to the logical interface</value>
        /// <example>255.255.255.252</example>
        [DataMember(Name = "subnetMask")]
        public string SubnetMask { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class logicalInterface {\n");
            sb.Append("  LogicalInterfaceId: ").Append(LogicalInterfaceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogicalInterfaceType: ").Append(LogicalInterfaceType).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  SubnetMask: ").Append(SubnetMask).Append("\n");
            sb.Append("  RoutingInstanceName: ").Append(RoutingInstanceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LogicalInterface)obj);
        }

        /// <summary>
        /// Returns true if logicalInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of LogicalInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogicalInterface other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    LogicalInterfaceId == other.LogicalInterfaceId ||
                    LogicalInterfaceId != null &&
                    LogicalInterfaceId.Equals(other.LogicalInterfaceId)
                ) &&
                (
                    LogicalInterfaceType == other.LogicalInterfaceType ||
                    LogicalInterfaceType != null &&
                    LogicalInterfaceType.Equals(other.LogicalInterfaceType)
                ) &&
                (
                    IpAddress == other.IpAddress ||
                    IpAddress != null &&
                    IpAddress.Equals(other.IpAddress)
                ) &&
                (
                    SubnetMask == other.SubnetMask ||
                    SubnetMask != null &&
                    SubnetMask.Equals(other.SubnetMask)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    RoutingInstanceName == other.RoutingInstanceName ||
                    RoutingInstanceName != null &&
                    RoutingInstanceName.Equals(other.RoutingInstanceName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (LogicalInterfaceId != null)
                    hashCode = hashCode * 59 + LogicalInterfaceId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (LogicalInterfaceType != null)
                    hashCode = hashCode * 59 + LogicalInterfaceType.GetHashCode();
                    if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                    if (SubnetMask != null)
                    hashCode = hashCode * 59 + SubnetMask.GetHashCode();
                    if (RoutingInstanceName != null)
                    hashCode = hashCode * 59 + RoutingInstanceName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LogicalInterface left, LogicalInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LogicalInterface left, LogicalInterface right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
