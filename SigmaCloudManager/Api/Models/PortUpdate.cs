/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for updating an existing device port
    /// </summary>
    [DataContract]
    public partial class PortUpdate : IEquatable<PortUpdate>
    {
        /// <summary>
        /// The ID of the port
        /// </summary>
        /// <value>An integer value denoting the ID of the port</value>
        /// <example>7001</example>
        [DataMember(Name = "portId")]
        public int? PortId { get; set; }

        /// <summary>
        /// Small Form-Factor Pluggable optic for the port
        /// </summary>
        /// <value>String denoting the small form-factor pluggable optic for the port</value>
        /// <example>SFP-10G-SR</example>
        [DataMember(Name="portSfp")]
        public string PortSfp { get; set; }

        /// <summary>
        /// Status of the port
        /// </summary>
        /// <value>Member of the PortStatusTypeEnum enunmeration</value>
        [DataMember(Name="portStatus")]
        public PortStatusTypeEnum? PortStatus { get; set; }

        /// <summary>
        /// The connector type of the port
        /// </summary>
        /// <value>String value denoting the required port connector</value>
        /// <example>RJ45</example>
        [DataMember(Name = "portConnector")]
        public string PortConnector { get; set; }

        /// <summary>
        /// The ID of the tenant to which the port should be assigned.
        /// </summary>
        /// <value>Integer value denoting the ID of the tenant</value>
        /// <example>9009</example>
        [DataMember(Name = "tenantId")]
        public int? TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortUpdate {\n");
            sb.Append("  PortId: ").Append(PortId).Append("\n");
            sb.Append("  PortSfp: ").Append(PortSfp).Append("\n");
            sb.Append("  PortStatus: ").Append(PortStatus).Append("\n");
            sb.Append("  PortConnector: ").Append(PortConnector).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PortUpdate)obj);
        }

        /// <summary>
        /// Returns true if PortUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of PortUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PortId == other.PortId ||
                    PortId != null &&
                    PortId.Equals(other.PortId)
                ) &&
                (
                    PortSfp == other.PortSfp ||
                    PortSfp != null &&
                    PortSfp.Equals(other.PortSfp)
                ) && 
                (
                    PortStatus == other.PortStatus ||
                    PortStatus != null &&
                    PortStatus.Equals(other.PortStatus)
                ) && 
                (
                    PortConnector == other.PortConnector ||
                    PortConnector != null &&
                    PortConnector.Equals(other.PortConnector)
                ) &&
                (
                    TenantId == other.TenantId ||
                    TenantId != null &&
                    TenantId.Equals(other.TenantId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PortId != null)
                    hashCode = hashCode * 59 + PortId.GetHashCode();
                    if (PortSfp != null)
                    hashCode = hashCode * 59 + PortSfp.GetHashCode();
                    if (PortStatus != null)
                    hashCode = hashCode * 59 + PortStatus.GetHashCode();
                    if (PortConnector != null)
                    hashCode = hashCode * 59 + PortConnector.GetHashCode();
                    if (TenantId != null)
                    hashCode = hashCode * 59 + TenantId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PortUpdate left, PortUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PortUpdate left, PortUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
