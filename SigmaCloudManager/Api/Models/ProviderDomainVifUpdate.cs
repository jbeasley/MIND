/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for updating a vif which belongs to a tenant attachment to the provider domain
    /// </summary>
    [DataContract]
    public partial class ProviderDomainVifUpdate : IEquatable<ProviderDomainVifUpdate>
    {
        /// <summary>
        /// If specified, the vif should be associated with an existing routing instance
        /// of the given name. The routing instance must belong to the same tenant as the owner of the vif.
        /// </summary>
        /// <value>A string value of the name of an existing routing instance</value>
        /// <exanple>db7c48eaa9864cd0b3aa6af08c8370d6</exanple>
        [DataMember(Name = "existingRoutingInstanceName")]
        public string ExistingRoutingInstanceName { get; set; }

        /// <summary>
        /// If specified, the vif should be associated with an existing contract bandwidth pool
        /// of the given name which is associated with another vif under the same attachment.
        /// </summary>
        /// <value>A string value of the name of an existing contract bandwidth pool</value>
        /// <exanple>db7c48eaa9864cd0b3aa6af08c8370d6</exanple>
        [DataMember(Name = "existingContractBandwdithPoolName")]
        public string ExistingContractBandwidthPoolName { get; set; }

        /// <summary>
        /// The required contract bandwidth in Mbps
        /// </summary>
        /// <value>Integer value denoting the required contract bandwidth in Mbps</value>
        /// <example>100</example>
        [DataMember(Name="contractBandwidthMbps")]
        public int? ContractBandwidthMbps { get; set; }

        /// <summary>
        /// Determines whether DSCP and COS markings of packets received from the tenant domain should be trusted by the provider
        /// </summary>
        /// <value>Boolean value denoting the required trust state</value>
        [DataMember(Name="trustReceivedCosAndDscp")]
        public bool? TrustReceivedCosAndDscp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProviderDomainVifUpdate {\n");
            sb.Append("  ExistingContractBandwidthPoolName: ").Append(ExistingContractBandwidthPoolName).Append("\n");
            sb.Append("  ExistingRoutingInstanceName: ").Append(ExistingRoutingInstanceName).Append("\n");
            sb.Append("  ContractBandwidthMbps: ").Append(ContractBandwidthMbps).Append("\n");
            sb.Append("  TrustReceivedCosAndDscp: ").Append(TrustReceivedCosAndDscp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProviderDomainVifUpdate)obj);
        }

        /// <summary>
        /// Returns true if ProviderDomainVifRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of TenantAttachmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProviderDomainVifUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ExistingContractBandwidthPoolName == other.ExistingContractBandwidthPoolName ||
                    ExistingContractBandwidthPoolName != null &&
                    ExistingContractBandwidthPoolName.Equals(other.ExistingContractBandwidthPoolName)
                ) &&
                (
                    ContractBandwidthMbps == other.ContractBandwidthMbps ||
                    ContractBandwidthMbps != null &&
                    ContractBandwidthMbps.Equals(other.ContractBandwidthMbps)
                ) &&
                (
                    TrustReceivedCosAndDscp == other.TrustReceivedCosAndDscp ||
                    TrustReceivedCosAndDscp != null &&
                    TrustReceivedCosAndDscp.Equals(other.TrustReceivedCosAndDscp)
                ) &&
                (
                    ExistingRoutingInstanceName == other.ExistingRoutingInstanceName ||
                    ExistingRoutingInstanceName != null &&
                    ExistingRoutingInstanceName.Equals(other.ExistingRoutingInstanceName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExistingRoutingInstanceName != null)
                    hashCode = hashCode * 59 + ExistingRoutingInstanceName.GetHashCode();
                    if (ExistingContractBandwidthPoolName != null)
                    hashCode = hashCode * 59 + ExistingContractBandwidthPoolName.GetHashCode();
                    if (ContractBandwidthMbps != null)
                    hashCode = hashCode * 59 + ContractBandwidthMbps.GetHashCode();
                    if (TrustReceivedCosAndDscp != null)
                    hashCode = hashCode * 59 + TrustReceivedCosAndDscp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProviderDomainVifUpdate left, ProviderDomainVifUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProviderDomainVifUpdate left, ProviderDomainVifUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
