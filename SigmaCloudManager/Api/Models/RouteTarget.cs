/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for a vpn route target
    /// </summary>
    [DataContract]
    public partial class RouteTarget : IEquatable<RouteTarget>
    { 
        /// <summary>
        /// The route target range name
        /// </summary>
        /// <value>String value denoting the name of the route target range</value>
        /// <example>default</example>
        [DataMember(Name="range-name")]
        public string RangeName { get; set; }

        /// <summary>
        /// The administrator subfield value.
        /// </summary>
        /// <value>Integer value for the administrator subfield</value>
        /// <example></example>
        [DataMember(Name = "administratorSubField")]
        public int? AdministratorSubField { get; set; }

        /// <summary>
        /// The assigned-number subfield value.
        /// </summary>
        /// <value>Integer value for the assigned number subfield</value>
        /// <example></example>
        [DataMember(Name ="assignedNumberSubField")]
        public int? AssignedNumberSubField { get; set; }

        /// <summary>
        /// Denotes whether the route target is assigned as a hub-export route target for a hub-and-spoke vpn.
        /// </summary>
        /// <value>Boolean value denoting whether the route target should be assigned as a hub export route target.</value>
        /// <example>true</example>
        [DataMember(Name = "isHubExport")]
        public bool? IsHubExport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RouteTarget {\n");
            sb.Append("  RangeName: ").Append(RangeName).Append("\n");
            sb.Append("  AssignedNumberSubField: ").Append(AssignedNumberSubField).Append("\n");
            sb.Append("  AdministratorSubField: ").Append(AssignedNumberSubField).Append("\n");
            sb.Append("  IsHubExport: ").Append(IsHubExport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RouteTarget)obj);
        }

        /// <summary>
        /// Returns true if RouteTarget instances are equal
        /// </summary>
        /// <param name="other">Instance of RouteTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RouteTarget other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    RangeName == other.RangeName ||
                    RangeName != null &&
                    RangeName.Equals(other.RangeName)
                ) &&
                (
                    AssignedNumberSubField == other.AssignedNumberSubField ||
                    AssignedNumberSubField != null &&
                    AssignedNumberSubField.Equals(other.AssignedNumberSubField)
                ) &&
                (
                    AdministratorSubField == other.AdministratorSubField ||
                    AdministratorSubField != null &&
                    AdministratorSubField.Equals(other.AdministratorSubField)
                ) &&
                (
                    IsHubExport == other.IsHubExport ||
                    IsHubExport != null &&
                    IsHubExport.Equals(other.IsHubExport)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RangeName != null)
                    hashCode = hashCode * 59 + RangeName.GetHashCode();
                    if (AssignedNumberSubField != null)
                    hashCode = hashCode * 59 + AssignedNumberSubField.GetHashCode();
                    if (AdministratorSubField != null)
                    hashCode = hashCode * 59 + AdministratorSubField.GetHashCode();
                    if (IsHubExport != null)
                    hashCode = hashCode * 59 + IsHubExport.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(RouteTarget left, RouteTarget right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RouteTarget left, RouteTarget right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
