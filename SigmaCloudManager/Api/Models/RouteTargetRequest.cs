/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for requesting vpn route targets
    /// </summary>
    [DataContract]
    public partial class RouteTargetRequest : IEquatable<RouteTargetRequest>, IValidatableObject
    { 
        /// <summary>
        /// The route target range
        /// </summary>
        /// <value>String value denoting the name of the route target range</value>
        /// <example>default</example>
        [Required]
        [DataMember(Name="range")]
        public RouteTargetRangeEnum? Range{ get; set; }

        /// <summary>
        /// A requested assigned-number subfield value. The route target will be assigned this value if it is available within the specified range.
        /// </summary>
        /// <value>Integer value for the requested value of the assigned number subfield</value>
        /// <example></example>
        [Range(1, 4294967295)]
        [DataMember(Name ="assignedNumberSubField")]
        public int? AssignedNumberSubField { get; set; }

        /// <summary>
        /// Auto-allocate a value for the assigned number subfield. If this option is enabled then the 'AssignedNumberSubField' option must be null.
        /// </summary>
        /// <value>Boolean value denoting whether a value for the assigned number subfield should be auto allocated.</value>
        /// <example>true</example>
        [DataMember(Name ="autoAllocateAssignedNumberSubField")]
        public bool? AutoAllocateAssignedNumberSubField { get; set; }

        /// <summary>
        /// Assign the route target as a hub-export route target for a hub-and-spoke vpn.
        /// </summary>
        /// <value>Boolean value denoting whether the route target should be assigned as a hub export route target.</value>
        /// <example>true</example>
        [DataMember(Name = "isHubExport")]
        public bool? IsHubExport { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (AutoAllocateAssignedNumberSubField.HasValue && AutoAllocateAssignedNumberSubField.Value)
            {
                if (AssignedNumberSubField != null)
                {
                    yield return new ValidationResult(
                        "The 'AutoAllocateAssignedNumberSubField' option cannot be used concurrently with the 'AssignedNumberSubField' option." +
                        "Either remove the 'AutoAllocateAssignedNumberSubField' property or remove the 'AssignedNumberSubField' property from " +
                        "the request.");
                }
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RouteTargetRequest {\n");
            sb.Append("  RangeName: ").Append(Range).Append("\n");
            sb.Append("  AssignedNumberSubField: ").Append(AssignedNumberSubField).Append("\n");
            sb.Append("  AutoAllocateAssignedNumberSubField: ").Append(AutoAllocateAssignedNumberSubField).Append("\n");
            sb.Append("  IsHubExport: ").Append(IsHubExport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RouteTargetRequest)obj);
        }

        /// <summary>
        /// Returns true if RouteTargetRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RouteTargetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RouteTargetRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Range == other.Range ||
                    Range != null &&
                    Range.Equals(other.Range)
                ) &&
                (
                    AssignedNumberSubField == other.AssignedNumberSubField ||
                    AssignedNumberSubField != null &&
                    AssignedNumberSubField.Equals(other.AssignedNumberSubField)
                ) &&
                (
                    AutoAllocateAssignedNumberSubField == other.AutoAllocateAssignedNumberSubField ||
                    AutoAllocateAssignedNumberSubField != null &&
                    AutoAllocateAssignedNumberSubField.Equals(other.AutoAllocateAssignedNumberSubField)
                ) &&
                (
                    IsHubExport == other.IsHubExport ||
                    IsHubExport != null &&
                    IsHubExport.Equals(other.IsHubExport)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Range != null)
                    hashCode = hashCode * 59 + Range.GetHashCode();
                    if (AssignedNumberSubField != null)
                    hashCode = hashCode * 59 + AssignedNumberSubField.GetHashCode();
                    if (AutoAllocateAssignedNumberSubField != null)
                    hashCode = hashCode * 59 + AutoAllocateAssignedNumberSubField.GetHashCode();
                    if (IsHubExport != null)
                    hashCode = hashCode * 59 + IsHubExport.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(RouteTargetRequest left, RouteTargetRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RouteTargetRequest left, RouteTargetRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
