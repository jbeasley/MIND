/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model of a routing instance
    /// </summary>
    [DataContract]
    public partial class RoutingInstance : IEquatable<RoutingInstance>
    { 
        /// <summary>
        /// The ID of the routing instance
        /// </summary>
        /// <value>An integer value denoting the ID of the routing instance</value>
        /// <example>4001</example>
        [DataMember(Name="routingInstanceId")]
        public int? RoutingInstanceId { get; private set; }

        /// <summary>
        /// The MIND system-generated name of the routing instance
        /// </summary>
        /// <value>A string value denoting the name of the routing instance</value>
        /// <example>db7c48eaa9864cd0b3aa6af08c8370d6</example>
        [DataMember(Name="name")]
        public string Name { get; private set; }

        /// <summary>
        /// The administrator sub-field of the routing instance
        /// </summary>
        /// <value>An integer value denoting the assigned-number sub-field of the routing instance</value>
        /// <example>8718</example>
        [DataMember(Name = "administrator-sub-field")]
        public int? AdministratorSubField { get; private set; }

        /// <summary>
        /// The assigned-number sub-field of the routing instance
        /// </summary>
        /// <value>An integer value denoting the assigned-number sub-field of the routing instance</value>
        /// <example>10000</example>
        [DataMember(Name = "assigned-number-sub-field")]
        public int? AssignedNumberSubField { get; private set; }

        /// <summary>
        /// A list of BGP peers which are configured for the routing instance
        /// </summary>
        /// <value>A list of BgpPeer objects</value>
        [DataMember(Name = "bgpPeers")]
        public List<BgpPeer> BgpPeers { get; private set; }

        /// <summary>
        /// A list of static routes which are configured for the routing instance
        /// </summary>
        /// <value>A list of VpnTenantIpNetworkRoutingInstanceStaticRoute objects</value>
        [DataMember(Name = "staticRoutes")]
        public List<VpnTenantIpNetworkRoutingInstanceStaticRoute> StaticRoutes { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoutingInstance {\n");
            sb.Append("  RoutingInstanceId: ").Append(RoutingInstanceId).Append("\n");
            sb.Append("  AdministratorSubField: ").Append(AdministratorSubField).Append("\n");
            sb.Append("  AssignedNumberSubField: ").Append(AssignedNumberSubField).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BgpPeers: ").Append(BgpPeers).Append("\n");
            sb.Append("  StaticRoutes: ").Append(StaticRoutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RoutingInstance)obj);
        }

        /// <summary>
        /// Returns true if RoutingInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of RoutingInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoutingInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoutingInstanceId == other.RoutingInstanceId ||
                    RoutingInstanceId != null &&
                    RoutingInstanceId.Equals(other.RoutingInstanceId)
                ) &&
                (
                    AdministratorSubField == other.AdministratorSubField ||
                    AdministratorSubField != null &&
                    AdministratorSubField.Equals(other.AdministratorSubField)
                ) &&
                (
                    AssignedNumberSubField == other.AssignedNumberSubField ||
                    AssignedNumberSubField != null &&
                    AssignedNumberSubField.Equals(other.AssignedNumberSubField)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    BgpPeers == other.BgpPeers ||
                    BgpPeers != null &&
                    BgpPeers.Equals(other.BgpPeers)
                ) &&
                (
                    StaticRoutes == other.StaticRoutes ||
                    StaticRoutes != null &&
                    StaticRoutes.Equals(other.StaticRoutes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (RoutingInstanceId != null)
                    hashCode = hashCode * 59 + RoutingInstanceId.GetHashCode();
                if (AdministratorSubField != null)
                    hashCode = hashCode * 59 + AdministratorSubField.GetHashCode();
                if (AssignedNumberSubField != null)
                    hashCode = hashCode * 59 + AssignedNumberSubField.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (BgpPeers != null)
                    hashCode = hashCode * 59 + BgpPeers.GetHashCode();
                if (StaticRoutes != null)
                    hashCode = hashCode * 59 + StaticRoutes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RoutingInstance left, RoutingInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RoutingInstance left, RoutingInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
