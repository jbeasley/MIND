/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model of a routing instance request
    /// </summary>
    [DataContract]
    public partial class RoutingInstanceRequest : IEquatable<RoutingInstanceRequest>, IValidatableObject
    { 

        /// <summary>
        /// The requested name of the routing instance
        /// </summary>
        /// <value>A string value denoting the requested name of the routing instance</value>
        /// <example>my-routing-instance</example>
        [DataMember(Name="name")]
        [StringLength(50)]
        [RegularExpression(@"^[a-zA-Z0-9-]+$", ErrorMessage = "The name must contain letters, numbers, and dashes (-) only and no whitespace.")]
        public string Name { get; set; }

        /// <summary>
        /// The requested route distinguisher range from which a new route distinguisher should be assigned
        /// </summary>
        /// <value>A member of the RouteDistinguisherRangeTypeEnum enumeration</value>
        /// <example>Default</example>
        [DataMember(Name = "rangeType")]
        public RouteDistinguisherRangeTypeEnum? RangeType { get; set; } = RouteDistinguisherRangeTypeEnum.Default;

        /// <summary>
        /// The requested administrator sub-field of the routing instance
        /// </summary>
        /// <value>An integer value denoting the requested assigned-number sub-field of the routing instance</value>
        /// <example>8718</example>
        [DataMember(Name = "administratorSubField")]
        [Range(1, 4294967295)]
        public int? AdministratorSubField { get; set; }

        /// <summary>
        /// The requested assigned-number sub-field of the routing instance
        /// </summary>
        /// <value>An integer value denoting the requested assigned-number sub-field of the routing instance</value>
        /// <example>10000</example>
        [DataMember(Name = "assignedNumberSubField")]
        [Range(1, 4294967295)]
        public int? AssignedNumberSubField { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (AdministratorSubField.HasValue)
            {
                if (!AssignedNumberSubField.HasValue)
                {
                    yield return new ValidationResult(
                        "Both the 'AdministratorSubField' and 'AssignedNumberSubField' arguments are required in order to set a specific " +
                        "route distinguisher value for the routing instance.");
                }
            }

            if (AssignedNumberSubField.HasValue)
            {
                if (!AdministratorSubField.HasValue)
                {
                    yield return new ValidationResult(
                        "Both the 'AdministratorSubField' and 'AssignedNumberSubField' arguments are required in order to set a specific " +
                        "route distinguisher value for the routing instance.");
                }
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoutingInstanceRequest {\n");
            sb.Append("  AdministratorSubField: ").Append(AdministratorSubField).Append("\n");
            sb.Append("  AssignedNumberSubField: ").Append(AssignedNumberSubField).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RangeType: ").Append(RangeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RoutingInstanceRequest)obj);
        }

        /// <summary>
        /// Returns true if RoutingInstanceRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RoutingInstanceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoutingInstanceRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdministratorSubField == other.AdministratorSubField ||
                    AdministratorSubField != null &&
                    AdministratorSubField.Equals(other.AdministratorSubField)
                ) &&
                (
                    AssignedNumberSubField == other.AssignedNumberSubField ||
                    AssignedNumberSubField != null &&
                    AssignedNumberSubField.Equals(other.AssignedNumberSubField)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    RangeType == other.RangeType ||
                    RangeType != null &&
                    RangeType.Equals(other.RangeType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AdministratorSubField != null)
                    hashCode = hashCode * 59 + AdministratorSubField.GetHashCode();
                if (AssignedNumberSubField != null)
                    hashCode = hashCode * 59 + AssignedNumberSubField.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (RangeType != null)
                    hashCode = hashCode * 59 + RangeType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RoutingInstanceRequest left, RoutingInstanceRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RoutingInstanceRequest left, RoutingInstanceRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
