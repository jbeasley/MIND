/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for requesting a tenant community - a BGP community which is owned by (associated with) a tenant
    /// </summary>
    [DataContract]
    public partial class TenantCommunityRequest : IEquatable<TenantCommunityRequest>
    { 
        /// <summary>
        /// The BGP 2 byte autonomous system number portion of the community
        /// </summary>
        /// <value>An integer denoting the 2 byte autonomous system number portion of the community</value>
        /// <example>8718</example>
        [DataMember(Name="autonomousSystemNumber")]
        [Required]
        [Range(1,65535)]
        public int? AutonomousSystemNumber { get; set; }

        /// <summary>
        /// The number portion of the community
        /// </summary>
        /// <value>An integer value denoting the number portion of the community</value>
        /// <example>2400</example>
        [DataMember(Name="number")]
        [Required]
        [Range(1,65535)]
        public int? Number { get; set; }

        /// <summary>
        /// The required IP routing behavior for traffic forwarding towards the tenant IP networks which are grouped
        /// or associated with the community
        /// </summary>
        /// <value>Enum member value denoting the required tenant ip routing behavior</value>
        [DataMember(Name = "tenantIpRoutingBehaviour")]
        [Required]
        public TenantIpRoutingBehaviourEnum? IpRoutingBehaviour { get; set; } = TenantIpRoutingBehaviourEnum.AnyPlane;

        /// <summary>
        /// Determines whether the tenant network is allowed into any IP Extranet VPNs
        /// </summary>
        /// <value>Boolean value which when true indicates that the tenant network is enabled for extranet</value>
        /// <example>true</example>
        [DataMember(Name="allowExtranet")]
        public bool? AllowExtranet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantCommunityRequest {\n");
            sb.Append("  AutonomousSystemNumber: ").Append(AutonomousSystemNumber).Append("\n");
            sb.Append("  Nunmber: ").Append(Number).Append("\n");
            sb.Append("  AllowExtranet: ").Append(AllowExtranet).Append("\n");
            sb.Append("  IpRoutingBehaviour: ").Append(IpRoutingBehaviour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TenantCommunityRequest)obj);
        }

        /// <summary>
        /// Returns true if TenantIpv4Network instances are equal
        /// </summary>
        /// <param name="other">Instance of TenantIpv4Network to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantCommunityRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AutonomousSystemNumber == other.AutonomousSystemNumber ||
                    AutonomousSystemNumber != null &&
                    AutonomousSystemNumber.Equals(other.AutonomousSystemNumber)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) &&
                (
                    AllowExtranet == other.AllowExtranet ||
                    AllowExtranet != null &&
                    AllowExtranet.Equals(other.AllowExtranet)
                ) &&
                (
                    IpRoutingBehaviour == other.IpRoutingBehaviour ||
                    IpRoutingBehaviour != null &&
                    IpRoutingBehaviour.Equals(other.IpRoutingBehaviour)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AutonomousSystemNumber != null)
                    hashCode = hashCode * 59 + AutonomousSystemNumber.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (AllowExtranet != null)
                    hashCode = hashCode * 59 + AllowExtranet.GetHashCode();
                    if (IpRoutingBehaviour != null)
                    hashCode = hashCode * 59 + IpRoutingBehaviour.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TenantCommunityRequest left, TenantCommunityRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TenantCommunityRequest left, TenantCommunityRequest right)
        { 
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
