/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for updating an existing tenant IP network association with the outbound policy of a tenant domain device
    /// </summary>
    [DataContract]
    public partial class TenantDomainIpNetworkOutboundPolicyUpdate : IEquatable<TenantDomainIpNetworkOutboundPolicyUpdate>
    {
        /// <summary>
        /// An IPv4 BGP peer address from which the tenant IP network should advertised. THe specified BGP peer must be configured and exist
        /// within the tenant domain device.
        /// </summary>
        /// <value>string representing the address of an existing configured IPv4 BGP peer</value>
        /// <example>192.168.0.1</example>
        [DataMember(Name="ipv4PeerAddress")]
        [RegularExpression(@"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
            ErrorMessage = "A valid IP address must be entered, e.g. 192.168.0.1")]
        public string Ipv4PeerAddress { get; set; }

        /// <summary>
        /// The routing preference to be advertised with the route for the tenant IP network. By default the value of this property is 1
        /// </summary>
        /// <value>Integer representing the advertised IP routing preference</value>
        /// <example>10</example>
        [DataMember(Name = "advertisedIpRoutingPreference")]
        [Range(1, 20, ErrorMessage = "The advertised IP routing preference must be a number between 1 and 20")]
        public int? AdvertisedIpRoutingPreference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantDomainIpNetworkOutboundPolicyUpdate {\n");
            sb.Append("  Ipv4PeerAddress: ").Append(Ipv4PeerAddress).Append("\n");
            sb.Append("  AdvertisedIpRoutingPreference: ").Append(AdvertisedIpRoutingPreference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TenantDomainIpNetworkOutboundPolicyUpdate)obj);
        }

        /// <summary>
        /// Returns true if VpnTenantIpv4NetworkOut instances are equal
        /// </summary>
        /// <param name="other">Instance of VpnTenantIpv4NetworkOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantDomainIpNetworkOutboundPolicyUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Ipv4PeerAddress == other.Ipv4PeerAddress ||
                    Ipv4PeerAddress != null &&
                    Ipv4PeerAddress.Equals(other.Ipv4PeerAddress)
                ) && 
                (
                    AdvertisedIpRoutingPreference == other.AdvertisedIpRoutingPreference ||
                    AdvertisedIpRoutingPreference != null &&
                    AdvertisedIpRoutingPreference.Equals(other.AdvertisedIpRoutingPreference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Ipv4PeerAddress != null)
                    hashCode = hashCode * 59 + Ipv4PeerAddress.GetHashCode();
                    if (AdvertisedIpRoutingPreference != null)
                    hashCode = hashCode * 59 + AdvertisedIpRoutingPreference.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TenantDomainIpNetworkOutboundPolicyUpdate left, TenantDomainIpNetworkOutboundPolicyUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TenantDomainIpNetworkOutboundPolicyUpdate left, TenantDomainIpNetworkOutboundPolicyUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
