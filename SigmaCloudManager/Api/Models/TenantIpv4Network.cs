/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TenantIpv4Network : IEquatable<TenantIpv4Network>
    { 
        /// <summary>
        /// The ID of the tenant IPv4 network
        /// </summary>
        /// <value>The ID of the tenant IPv4 network</value>
        [DataMember(Name="tenantIpv4NetworkId")]
        public int? TenantIpv4NetworkId { get; private set; }

        /// <summary>
        /// The CIDR IPv4 prefix
        /// </summary>
        /// <value>The CIDR IPv4 prefix</value>
        [DataMember(Name="ipv4Prefix")]
        public string Ipv4Prefix { get; set; }

        /// <summary>
        /// The CIDR length of the IPv4 prefix
        /// </summary>
        /// <value>The CIDR length of the IPv4 prefix</value>
        [DataMember(Name="length")]
        public int? Length { get; set; }

        /// <summary>
        /// Determines whether the IPv4 prefix is allowed into any IP Extranet VPNs
        /// </summary>
        /// <value>Determines whether the IPv4 prefix is allowed into any IP Extranet VPNs</value>
        [DataMember(Name="allowExtranet")]
        public bool? AllowExtranet { get; set; }

        /// <summary>
        /// The ID of the tenant to which the IPv4 prefix belongs
        /// </summary>
        /// <value>The ID of the tenant to which the IPv4 prefix belongs</value>
        [DataMember(Name="tenantId")]
        public int? TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantIpv4Network {\n");
            sb.Append("  TenantIpv4NetworkId: ").Append(TenantIpv4NetworkId).Append("\n");
            sb.Append("  Ipv4Prefix: ").Append(Ipv4Prefix).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  AllowExtranet: ").Append(AllowExtranet).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TenantIpv4Network)obj);
        }

        /// <summary>
        /// Returns true if TenantIpv4Network instances are equal
        /// </summary>
        /// <param name="other">Instance of TenantIpv4Network to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantIpv4Network other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TenantIpv4NetworkId == other.TenantIpv4NetworkId ||
                    TenantIpv4NetworkId != null &&
                    TenantIpv4NetworkId.Equals(other.TenantIpv4NetworkId)
                ) && 
                (
                    Ipv4Prefix == other.Ipv4Prefix ||
                    Ipv4Prefix != null &&
                    Ipv4Prefix.Equals(other.Ipv4Prefix)
                ) && 
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                ) && 
                (
                    AllowExtranet == other.AllowExtranet ||
                    AllowExtranet != null &&
                    AllowExtranet.Equals(other.AllowExtranet)
                ) && 
                (
                    TenantId == other.TenantId ||
                    TenantId != null &&
                    TenantId.Equals(other.TenantId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TenantIpv4NetworkId != null)
                    hashCode = hashCode * 59 + TenantIpv4NetworkId.GetHashCode();
                    if (Ipv4Prefix != null)
                    hashCode = hashCode * 59 + Ipv4Prefix.GetHashCode();
                    if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                    if (AllowExtranet != null)
                    hashCode = hashCode * 59 + AllowExtranet.GetHashCode();
                    if (TenantId != null)
                    hashCode = hashCode * 59 + TenantId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TenantIpv4Network left, TenantIpv4Network right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TenantIpv4Network left, TenantIpv4Network right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
