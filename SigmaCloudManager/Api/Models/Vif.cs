/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Vif : IEquatable<Vif>
    { 
        /// <summary>
        /// The ID of the vif
        /// </summary>
        /// <value>The ID of the vif</value>
        [DataMember(Name="vifId")]
        public int? VifId { get; set; }

        /// <summary>
        /// The name of the vif  
        /// </summary>
        /// <value>The name of the vif  </value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Determines if the vif is enabled for layer 3
        /// </summary>
        /// <value>Determines if the vif is enabled for layer 3</value>
        [DataMember(Name="isLayer3")]
        public bool? IsLayer3 { get; set; }

        /// <summary>
        /// The vlan tag number assigned to the vif
        /// </summary>
        /// <value>The vlan tag number assigned to the vif</value>
        [DataMember(Name="vlanTag")]
        public int? VlanTag { get; set; }

        /// <summary>
        /// The ID of the parent attachment
        /// </summary>
        /// <value>The ID of the parent attachment</value>
        [DataMember(Name="attachmentId")]
        public int? AttachmentId { get; set; }

        /// <summary>
        /// The ID of the owning tenant
        /// </summary>
        /// <value>The ID of the owning tenant</value>
        [DataMember(Name="tenantId")]
        public int? TenantId { get; set; }

        /// <summary>
        /// Gets or Sets RoutingInstance
        /// </summary>
        [DataMember(Name="routingInstance")]
        public RoutingInstance RoutingInstance { get; set; }

        /// <summary>
        /// Gets or Sets Vlans
        /// </summary>
        [DataMember(Name="vlans")]
        public List<Vlan> Vlans { get; set; }

        /// <summary>
        /// Gets or Sets ContractBandwidthPool
        /// </summary>
        [DataMember(Name="contractBandwidthPool")]
        public ContractBandwidthPool ContractBandwidthPool { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vif {\n");
            sb.Append("  VifId: ").Append(VifId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsLayer3: ").Append(IsLayer3).Append("\n");
            sb.Append("  VlanTag: ").Append(VlanTag).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  RoutingInstance: ").Append(RoutingInstance).Append("\n");
            sb.Append("  Vlans: ").Append(Vlans).Append("\n");
            sb.Append("  ContractBandwidthPool: ").Append(ContractBandwidthPool).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Vif)obj);
        }

        /// <summary>
        /// Returns true if Vif instances are equal
        /// </summary>
        /// <param name="other">Instance of Vif to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vif other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VifId == other.VifId ||
                    VifId != null &&
                    VifId.Equals(other.VifId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IsLayer3 == other.IsLayer3 ||
                    IsLayer3 != null &&
                    IsLayer3.Equals(other.IsLayer3)
                ) && 
                (
                    VlanTag == other.VlanTag ||
                    VlanTag != null &&
                    VlanTag.Equals(other.VlanTag)
                ) && 
                (
                    AttachmentId == other.AttachmentId ||
                    AttachmentId != null &&
                    AttachmentId.Equals(other.AttachmentId)
                ) && 
                (
                    TenantId == other.TenantId ||
                    TenantId != null &&
                    TenantId.Equals(other.TenantId)
                ) && 
                (
                    RoutingInstance == other.RoutingInstance ||
                    RoutingInstance != null &&
                    RoutingInstance.Equals(other.RoutingInstance)
                ) && 
                (
                    Vlans == other.Vlans ||
                    Vlans != null &&
                    Vlans.SequenceEqual(other.Vlans)
                ) && 
                (
                    ContractBandwidthPool == other.ContractBandwidthPool ||
                    ContractBandwidthPool != null &&
                    ContractBandwidthPool.Equals(other.ContractBandwidthPool)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VifId != null)
                    hashCode = hashCode * 59 + VifId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IsLayer3 != null)
                    hashCode = hashCode * 59 + IsLayer3.GetHashCode();
                    if (VlanTag != null)
                    hashCode = hashCode * 59 + VlanTag.GetHashCode();
                    if (AttachmentId != null)
                    hashCode = hashCode * 59 + AttachmentId.GetHashCode();
                    if (TenantId != null)
                    hashCode = hashCode * 59 + TenantId.GetHashCode();
                    if (RoutingInstance != null)
                    hashCode = hashCode * 59 + RoutingInstance.GetHashCode();
                    if (Vlans != null)
                    hashCode = hashCode * 59 + Vlans.GetHashCode();
                    if (ContractBandwidthPool != null)
                    hashCode = hashCode * 59 + ContractBandwidthPool.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Vif left, Vif right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Vif left, Vif right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
