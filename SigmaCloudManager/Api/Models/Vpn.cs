/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model of a VPN
    /// </summary>
    [DataContract]
    public partial class Vpn : IEquatable<Vpn>
    {
        /// <summary>
        /// The ID of the VPN
        /// </summary>
        /// <value>Integer value denoting the ID of the vpn</value>
        /// <example>12001</example>
        [DataMember(Name = "vpnId")]
        public int? VpnId { get; private set; }

        /// <summary>
        /// The name of the VPN
        /// </summary>
        /// <value>String value denoting the name of the vpn</value>
        /// <example>cloud-connectivity-vpn</example>
        [DataMember(Name="name")]
        public string Name { get; private set; }

        /// <summary>
        /// A description of the vpn
        /// </summary>
        /// <value>String value denoting the description of the vpn</value>
        /// <example>vpn for providing IP connectivity between hosts running in public and private clouds</example>
        [DataMember(Name="description")]
        public string Description { get; private set; }

        /// <summary>
        /// The tenant owner of the vpn
        /// </summary>
        /// <value>String value denoting the name of the tenant owner</value>
        /// <example>product-group-tenant</example>
        [DataMember(Name = "tenantOwnerName")]
        public string TenantOwnerName { get; private set; }

        /// <summary>
        /// The geographical region which the vpn operates within.
        /// </summary>
        /// <value>String value denoting the geographical region which the vpn operates within.</value>
        /// <example>EMEA</example>
        [DataMember(Name="region")]
        public string Region { get; private set; }

        /// <summary>
        /// The provider plane which the vpn operates within.
        /// </summary>
        /// <value>String value denoting the provider plane which the vpn operates within.</value>
        /// <example>red</example>
        [DataMember(Name="plane")]
        public string Plane { get; private set; }

        /// <summary>
        /// The tenancy type of the vpn. If the tenancy type is 'single' then only the owner of the VPN can participate in the vpn. 
        /// If the tenancy type is 'multi' then any tenant can participate in the vpn.
        /// </summary>
        /// <value>String value denoting the tenancy type of the vpn.</value>
        /// <example>single</example>
        [DataMember(Name="tenancyType")]
        public string TenancyType { get; private set; }

        /// <summary>
        /// The topology type of the vpn. A meshed vpn allows any endpoint to communicate with any other endpoint. 
        /// A hub-and-spoke vpn allows spoke endpoints to communicate with hub endpoints but not with other spoke endpoints. 
        /// </summary>
        /// <value>String value denoting the topology type of the vpn.</value>
        /// <example>meshed</example>
        [DataMember(Name="topologyType")]
        public string TopologyType { get; private set; }

        /// <summary>
        /// The address family of the vpn.
        /// </summary>
        /// <value>String valude dneoting the address family of the vpn.</value>
        /// <example>ipv4</example>
        [DataMember(Name="addressFamily")]
        public string AddressFamily { get; private set; }

        /// <summary>
        /// Denotes whether the vpn conforms to the Nova standard. If this attribute is set to disabled then the VPN does not follow a standard 
        /// Nova implementation and may be customised.
        /// </summary>
        /// <value>Boolean value denoting the vpn as Nova standard compliant.</value>
        /// <example>true</example>
        [DataMember(Name="isNovaVpn")]
        public bool? IsNovaVpn { get; private set; }

        /// <summary>
        /// Denotes if the vpn supports extranet connectivity
        /// </summary>
        /// <value>Boolean denoting whether the vpn supports extranet</value>
        /// <example>true</example>
        [DataMember(Name = "isExtranet")]
        public bool? IsExtranet { get; private set; }

        /// <summary>
        /// Denotes if the VPN supports IP multicast
        /// </summary>
        /// <value>Boolean denoting whether the vpn supports IP multicast.</value>
        /// <example>true</example>
        [DataMember(Name = "isMulticastVpn")]
        public bool? IsMulticastVpn { get; private set; }

        /// <summary>
        /// The multicast service type of the VPN. 
        /// </summary>
        /// <value>Enum value denoting the multicast service type of the vpn.</value>
        /// <example>ssm</example>
        [DataMember(Name = "multicastVpnServiceType")]
        public string MulticastVpnServiceType { get; private set; }

        /// <summary>
        /// The multicast direction type of the VPN. 
        /// </summary>
        /// <value>Enum value denoting the multicast direction type of the vpn.</value>
        /// <example>unidirectional</example>
        [DataMember(Name = "multicastVpnDirectionType")]
        public string MulticastVpnDirectionType { get; private set; }

        /// <summary>
        /// Route targets assigned to the vpn
        /// </summary>
        /// <value>A list of RouteTarget objects</value>
        [DataMember(Name = "routeTargets")]
        public List<RouteTarget> RouteTargets { get; private set; }

        /// <summary>
        /// Network status of the vpn.
        /// </summary>
        /// <value>String value denoting the network status</value>
        /// <example>Staged</example>
        [DataMember(Name = "networkStatus")]
        public string NetworkStatus { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vpn {\n");
            sb.Append("  VpnId: ").Append(VpnId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TenantOwnerName: ").Append(TenantOwnerName).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Plane: ").Append(Plane).Append("\n");
            sb.Append("  TenancyType: ").Append(TenancyType).Append("\n");
            sb.Append("  TopologyType: ").Append(TopologyType).Append("\n");
            sb.Append("  AddressFamily: ").Append(AddressFamily).Append("\n");
            sb.Append("  IsNovaVpn: ").Append(IsNovaVpn).Append("\n");
            sb.Append("  IsExtranet: ").Append(IsExtranet).Append("\n");
            sb.Append("  IsMulticastVpn: ").Append(IsMulticastVpn).Append("\n");
            sb.Append("  MulticastVpnServiceType: ").Append(MulticastVpnServiceType).Append("\n");
            sb.Append("  MulticastVpnDirectionType: ").Append(MulticastVpnDirectionType).Append("\n");
            sb.Append("  RouteTargets: ").Append(RouteTargets).Append("\n");
            sb.Append("  NetworkStatus: ").Append(NetworkStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Vpn)obj);
        }

        /// <summary>
        /// Returns true if Vpn instances are equal
        /// </summary>
        /// <param name="other">Instance of Vpn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vpn other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    VpnId == other.VpnId ||
                    VpnId != null &&
                    VpnId.Equals(other.VpnId)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    TenantOwnerName == other.TenantOwnerName ||
                    TenantOwnerName != null &&
                    TenantOwnerName.Equals(other.TenantOwnerName)
                ) &&
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                ) &&
                (
                    Plane == other.Plane ||
                    Plane != null &&
                    Plane.Equals(other.Plane)
                ) &&
                (
                    TenancyType == other.TenancyType ||
                    TenancyType != null &&
                    TenancyType.Equals(other.TenancyType)
                ) &&
                (
                    TopologyType == other.TopologyType ||
                    TopologyType != null &&
                    TopologyType.Equals(other.TopologyType)
                ) &&
                (
                    AddressFamily == other.AddressFamily ||
                    AddressFamily != null &&
                    AddressFamily.Equals(other.AddressFamily)
                ) &&
                (
                    IsNovaVpn == other.IsNovaVpn ||
                    IsNovaVpn != null &&
                    IsNovaVpn.Equals(other.IsNovaVpn)
                ) &&
                (
                    IsExtranet == other.IsExtranet ||
                    IsExtranet != null &&
                    IsExtranet.Equals(other.IsExtranet)
                ) &&
                (
                    IsMulticastVpn == other.IsMulticastVpn ||
                    IsMulticastVpn != null &&
                    IsMulticastVpn.Equals(other.IsMulticastVpn)
                ) &&
                (
                    MulticastVpnServiceType == other.MulticastVpnServiceType ||
                    MulticastVpnServiceType != null &&
                    MulticastVpnServiceType.Equals(other.MulticastVpnServiceType)
                ) &&
                (
                    MulticastVpnDirectionType == other.MulticastVpnDirectionType ||
                    MulticastVpnDirectionType != null &&
                    MulticastVpnDirectionType.Equals(other.MulticastVpnDirectionType)
                ) &&
                (
                    RouteTargets == other.RouteTargets ||
                    RouteTargets != null &&
                    RouteTargets.Equals(other.RouteTargets)
                ) &&
                (
                    NetworkStatus == other.NetworkStatus ||
                    NetworkStatus != null &&
                    NetworkStatus.Equals(other.NetworkStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VpnId != null)
                    hashCode = hashCode * 59 + VpnId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (TenantOwnerName != null)
                    hashCode = hashCode * 59 + TenantOwnerName.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                    if (Plane != null)
                    hashCode = hashCode * 59 + Plane.GetHashCode();
                    if (TenancyType != null)
                    hashCode = hashCode * 59 + TenancyType.GetHashCode();
                    if (TopologyType != null)
                    hashCode = hashCode * 59 + TopologyType.GetHashCode();
                    if (AddressFamily != null)
                    hashCode = hashCode * 59 + AddressFamily.GetHashCode();
                    if (IsNovaVpn != null)
                    hashCode = hashCode * 59 + IsNovaVpn.GetHashCode();
                    if (IsExtranet != null)
                    hashCode = hashCode * 59 + IsExtranet.GetHashCode();
                    if (IsMulticastVpn != null)
                    hashCode = hashCode * 59 + IsMulticastVpn.GetHashCode();
                    if (MulticastVpnServiceType != null)
                    hashCode = hashCode * 59 + MulticastVpnServiceType.GetHashCode();
                    if (MulticastVpnDirectionType != null)
                    hashCode = hashCode * 59 + MulticastVpnDirectionType.GetHashCode();
                    if (RouteTargets != null)
                    hashCode = hashCode * 59 + RouteTargets.GetHashCode();
                    if (NetworkStatus != null)
                    hashCode = hashCode * 59 + NetworkStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Vpn left, Vpn right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Vpn left, Vpn right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
