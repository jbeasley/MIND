/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Vpn : IEquatable<Vpn>
    { 
        /// <summary>
        /// The name of the VPN
        /// </summary>
        /// <value>The name of the VPN</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// A description of the VPN
        /// </summary>
        /// <value>A description of the VPN</value>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The geographical region which the VPN operates within.
        /// </summary>
        /// <value>The geographical region which the VPN operates within.</value>
        [DataMember(Name="region")]
        public string Region { get; set; }

        /// <summary>
        /// The provider plane which the VPN operates within.
        /// </summary>
        /// <value>The provider plane which the VPN operates within.</value>
        [DataMember(Name="plane")]
        public string Plane { get; set; }

        /// <summary>
        /// The tenancy type of the VPN. If the tenancy type is single then only the owner of the VPN can participate in the VPN. If the tenancy type is multi then any tenant can participate in the VPN.
        /// </summary>
        /// <value>The tenancy type of the VPN. If the tenancy type is single then only the owner of the VPN can participate in the VPN. If the tenancy type is multi then any tenant can participate in the VPN.</value>
        [DataMember(Name="tenancyType")]
        public string TenancyType { get; set; }

        /// <summary>
        /// The topology type of the VPN. A meshed VPN allows any endpoint to communicate with any other endpoint. A hub-and-spoke VPN allows spoke endpoints to communicate with hub endpoints but not with other spoke endpoints. 
        /// </summary>
        /// <value>The topology type of the VPN. A meshed VPN allows any endpoint to communicate with any other endpoint. A hub-and-spoke VPN allows spoke endpoints to communicate with hub endpoints but not with other spoke endpoints. </value>
        [DataMember(Name="topologyType")]
        public string TopologyType { get; set; }

        /// <summary>
        /// The address family of the VPN.
        /// </summary>
        /// <value>The address family of the VPN.</value>
        [DataMember(Name="addressFamily")]
        public string AddressFamily { get; set; }

        /// <summary>
        /// Determines if the VPN is launched as a standard Nova implemented VPN. If this option is disabled the VPN may be customised.
        /// </summary>
        /// <value>Determines if the VPN is launched as a standard Nova implemented VPN. If this option is disabled the VPN may be customised.</value>
        [DataMember(Name="isNovaVpn")]
        public bool? IsNovaVpn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vpn {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Plane: ").Append(Plane).Append("\n");
            sb.Append("  TenancyType: ").Append(TenancyType).Append("\n");
            sb.Append("  TopologyType: ").Append(TopologyType).Append("\n");
            sb.Append("  AddressFamily: ").Append(AddressFamily).Append("\n");
            sb.Append("  IsNovaVpn: ").Append(IsNovaVpn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Vpn)obj);
        }

        /// <summary>
        /// Returns true if Vpn instances are equal
        /// </summary>
        /// <param name="other">Instance of Vpn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vpn other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                ) && 
                (
                    Plane == other.Plane ||
                    Plane != null &&
                    Plane.Equals(other.Plane)
                ) && 
                (
                    TenancyType == other.TenancyType ||
                    TenancyType != null &&
                    TenancyType.Equals(other.TenancyType)
                ) && 
                (
                    TopologyType == other.TopologyType ||
                    TopologyType != null &&
                    TopologyType.Equals(other.TopologyType)
                ) && 
                (
                    AddressFamily == other.AddressFamily ||
                    AddressFamily != null &&
                    AddressFamily.Equals(other.AddressFamily)
                ) && 
                (
                    IsNovaVpn == other.IsNovaVpn ||
                    IsNovaVpn != null &&
                    IsNovaVpn.Equals(other.IsNovaVpn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                    if (Plane != null)
                    hashCode = hashCode * 59 + Plane.GetHashCode();
                    if (TenancyType != null)
                    hashCode = hashCode * 59 + TenancyType.GetHashCode();
                    if (TopologyType != null)
                    hashCode = hashCode * 59 + TopologyType.GetHashCode();
                    if (AddressFamily != null)
                    hashCode = hashCode * 59 + AddressFamily.GetHashCode();
                    if (IsNovaVpn != null)
                    hashCode = hashCode * 59 + IsNovaVpn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Vpn left, Vpn right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Vpn left, Vpn right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
