/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VpnTenantCommunityOut : IEquatable<VpnTenantCommunityOut>
    {
        /// <summary>
        /// The ID of the vpn tenant community
        /// </summary>
        /// <value>Integer for the ID of the vpn tenant community</value>
        /// <example>8001</example>
        [DataMember(Name = "vpnTenantCommunityOutId")]
        public int? VpnTenantCommunityOutId { get; private set; }

        /// <summary>
        /// The ID of the tenant community
        /// </summary>
        /// <value>The ID of the tenant community</value>
        /// <example>9001</example>
        [DataMember(Name="tenantCommunityId")]
        public int? TenantCommunityId { get; private set; }

        /// <summary>
        /// The name of the attachment set to which the tenant community is associated.
        /// </summary>
        /// <value>A string value denoting the name of the attachment set</value>
        /// <example>713faafc85ff43db8472b6b9c38033a1</example>
        [DataMember(Name = "attachmentSetName")]
        public string AttachmentSetName { get; private set; }

        /// <summary>
        /// The name of the tenant community
        /// </summary>
        /// <value>String representing the name of the tenant community</value>
        /// <example>8718:10001</example>
        [DataMember(Name = "communityName")]
        public string CommunityName { get; private set; }

        /// <summary>
        /// An IPv4 BGP peer address from which the tenant community should be advertised
        /// </summary>
        /// <value>string representing the address of an existing configured IPv4 BGP peer</value>
        /// <example>192.168.0.1</example>
        [DataMember(Name = "ipv4PeerAddress")]
        public string Ipv4PeerAddress { get; private set; }

        /// <summary>
        /// The routing preference advertised with the route for the tenant community
        /// </summary>
        /// <value>An integer denoting the advertised IP routing preference</value>
        /// <example>10</example>
        [DataMember(Name="advertisedIpRoutingPreference")]
        public int? AdvertisedIpRoutingPreference { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VpnTenantCommunityOut {\n");
            sb.Append("  VpnTenantCommunityOutId: ").Append(VpnTenantCommunityOutId).Append("\n");
            sb.Append("  TenantCommunityId: ").Append(TenantCommunityId).Append("\n");
            sb.Append("  CommunityName: ").Append(CommunityName).Append("\n");
            sb.Append("  Ipv4PeerAddress: ").Append(Ipv4PeerAddress).Append("\n");
            sb.Append("  AdvertisedIpRoutingPreference: ").Append(AdvertisedIpRoutingPreference).Append("\n");
            sb.Append("  AttachmentSetName: ").Append(AttachmentSetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VpnTenantCommunityOut)obj);
        }

        /// <summary>
        /// Returns true if VpnTenantCommunityOut instances are equal
        /// </summary>
        /// <param name="other">Instance of VpnTenantIpv4NetworkOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnTenantCommunityOut other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                            (
                                VpnTenantCommunityOutId == other.VpnTenantCommunityOutId ||
                                VpnTenantCommunityOutId != null &&
                                VpnTenantCommunityOutId.Equals(other.VpnTenantCommunityOutId)
                            ) &&
                            (
                                TenantCommunityId == other.TenantCommunityId ||
                                TenantCommunityId != null &&
                                TenantCommunityId.Equals(other.TenantCommunityId)
                            ) &&
                            (
                                CommunityName == other.CommunityName ||
                                CommunityName != null &&
                                CommunityName.Equals(other.CommunityName)
                            ) &&
                            (
                                Ipv4PeerAddress == other.Ipv4PeerAddress ||
                                Ipv4PeerAddress != null &&
                                Ipv4PeerAddress.Equals(other.Ipv4PeerAddress)
                            ) &&
                            (
                                AdvertisedIpRoutingPreference == other.AdvertisedIpRoutingPreference ||
                                AdvertisedIpRoutingPreference != null &&
                                AdvertisedIpRoutingPreference.Equals(other.AdvertisedIpRoutingPreference)
                            ) &&
                            (
                                AttachmentSetName == other.AttachmentSetName ||
                                AttachmentSetName != null &&
                                AttachmentSetName.Equals(other.AttachmentSetName)
                            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (VpnTenantCommunityOutId != null)
                    hashCode = hashCode * 59 + VpnTenantCommunityOutId.GetHashCode();
                if (TenantCommunityId != null)
                    hashCode = hashCode * 59 + TenantCommunityId.GetHashCode();
                if (CommunityName != null)
                    hashCode = hashCode * 59 + CommunityName.GetHashCode();
                if (Ipv4PeerAddress != null)
                    hashCode = hashCode * 59 + Ipv4PeerAddress.GetHashCode();
                if (AdvertisedIpRoutingPreference != null)
                    hashCode = hashCode * 59 + AdvertisedIpRoutingPreference.GetHashCode();
                if (AttachmentSetName != null)
                    hashCode = hashCode * 59 + AttachmentSetName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VpnTenantCommunityOut left, VpnTenantCommunityOut right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VpnTenantCommunityOut left, VpnTenantCommunityOut right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
