/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VpnTenantIpNetworkIn : IEquatable<VpnTenantIpNetworkIn>
    {
        /// <summary>
        /// The ID of the vpn tenant IP network
        /// </summary>
        /// <value>Integer for the ID of the vpn tenant IP network</value>
        [DataMember(Name = "vpnTenantIpNetworkInId")]
        public int? VpnTenantIpNetworkInId { get; private set; }

        /// <summary>
        /// The ID of the tenant IP network
        /// </summary>
        /// <value>Integer for the ID of the tenant IP network</value>
        [DataMember(Name="tenantIpNetworkId")]
        public int? TenantIpNetworkId { get; private set; }

        /// <summary>
        /// The CIDR representation of the tenant IP network
        /// </summary>
        /// <value>String representing the CIDR notation of the tenant IP network/value>
        [DataMember(Name = "cidrName")]
        public string CidrName { get; private set; }

        /// <summary>
        /// Gets or Sets AddToAllBgpPeersInAttachmentSet
        /// </summary>
        /// <value>Boolean denoting whether the tenant IP network should be registered against all BGP peers that exist within the attachment set</value>
        [DataMember(Name="addToAllBgpPeersInAttachmentSet")]
        public bool? AddToAllBgpPeersInAttachmentSet { get; private set; }

        /// <summary>
        /// An IPv4 BGP peer address
        /// </summary>
        /// <value>String representing an IPv4 BGP peer address</value>
        [DataMember(Name="ipv4PeerAddress")]
        public string Ipv4PeerAddress { get; private set; }

        /// <summary>
        /// The local IP routing preference
        /// </summary>
        /// <value>Integer denoting the local IP routing preference</value>
        [DataMember(Name="localIpRoutingPreference")]
        public int? LocalIpRoutingPreference { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VpnTenantIpNetworkIn {\n");
            sb.Append("  VpnTenantIpNetworkInId: ").Append(VpnTenantIpNetworkInId).Append("\n");
            sb.Append("  TenantIpNetworkId: ").Append(TenantIpNetworkId).Append("\n");
            sb.Append("  CidrName: ").Append(CidrName).Append("\n");
            sb.Append("  AddToAllBgpPeersInAttachmentSet: ").Append(AddToAllBgpPeersInAttachmentSet).Append("\n");
            sb.Append("  Ipv4PeerAddress: ").Append(Ipv4PeerAddress).Append("\n");
            sb.Append("  LocalIpRoutingPreference: ").Append(LocalIpRoutingPreference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VpnTenantIpNetworkIn)obj);
        }

        /// <summary>
        /// Returns true if VpnTenantIpv4NetworkIn instances are equal
        /// </summary>
        /// <param name="other">Instance of VpnTenantIpv4NetworkIn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnTenantIpNetworkIn other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    VpnTenantIpNetworkInId == other.VpnTenantIpNetworkInId ||
                    VpnTenantIpNetworkInId != null &&
                    VpnTenantIpNetworkInId.Equals(other.VpnTenantIpNetworkInId)
                ) &&
                (
                    TenantIpNetworkId == other.TenantIpNetworkId ||
                    TenantIpNetworkId != null &&
                    TenantIpNetworkId.Equals(other.TenantIpNetworkId)
                ) && 
                (
                    CidrName == other.CidrName ||
                    CidrName != null &&
                    CidrName.Equals(other.CidrName)
                ) &&
                (
                    AddToAllBgpPeersInAttachmentSet == other.AddToAllBgpPeersInAttachmentSet ||
                    AddToAllBgpPeersInAttachmentSet != null &&
                    AddToAllBgpPeersInAttachmentSet.Equals(other.AddToAllBgpPeersInAttachmentSet)
                ) &&
                (
                    Ipv4PeerAddress == other.Ipv4PeerAddress ||
                    Ipv4PeerAddress != null &&
                    Ipv4PeerAddress.Equals(other.Ipv4PeerAddress)
                ) && 
                (
                    LocalIpRoutingPreference == other.LocalIpRoutingPreference ||
                    LocalIpRoutingPreference != null &&
                    LocalIpRoutingPreference.Equals(other.LocalIpRoutingPreference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VpnTenantIpNetworkInId != null)
                    hashCode = hashCode * 59 + VpnTenantIpNetworkInId.GetHashCode();
                    if (TenantIpNetworkId != null)
                    hashCode = hashCode * 59 + TenantIpNetworkId.GetHashCode();
                    if (CidrName != null)
                    hashCode = hashCode * 59 + CidrName.GetHashCode();
                    if (AddToAllBgpPeersInAttachmentSet != null)
                    hashCode = hashCode * 59 + AddToAllBgpPeersInAttachmentSet.GetHashCode();
                    if (Ipv4PeerAddress != null)
                    hashCode = hashCode * 59 + Ipv4PeerAddress.GetHashCode();
                    if (LocalIpRoutingPreference != null)
                    hashCode = hashCode * 59 + LocalIpRoutingPreference.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VpnTenantIpNetworkIn left, VpnTenantIpNetworkIn right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VpnTenantIpNetworkIn left, VpnTenantIpNetworkIn right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
