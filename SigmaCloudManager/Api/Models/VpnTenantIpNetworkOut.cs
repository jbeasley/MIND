/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VpnTenantIpNetworkOut : IEquatable<VpnTenantIpNetworkOut>
    {
        /// <summary>
        /// The ID of the vpn tenant IP network
        /// </summary>
        /// <value>Integer for the ID of the vpn tenant IP network</value>
        /// <example>8001</example>
        [DataMember(Name = "vpnTenantIpNetworkOutId")]
        public int? VpnTenantIpNetworkOutId { get; private set; }

        /// <summary>
        /// The ID of the tenant IP network
        /// </summary>
        /// <value>The ID of the tenant IP network</value>
        /// <example>9001</example>
        [DataMember(Name="tenantIpNetworkId")]
        public int? TenantIpNetworkId { get; private set; }

        /// <summary>
        /// The name of the attachment set to which the tenant IP network is associated.
        /// </summary>
        /// <value>A string value denoting the name of the attachment set</value>
        /// <example>713faafc85ff43db8472b6b9c38033a1</example>
        [DataMember(Name = "attachmentSetName")]
        public string AttachmentSetName { get; private set; }

        /// <summary>
        /// The CIDR block representation of the tenant IP network
        /// </summary>
        /// <value>String representing the CIDR notation of the tenant IP network</value>
        /// <exampel>10.1.1.0/24 le 32</exampel>
        [DataMember(Name = "cidrName")]
        public string CidrName { get; private set; }

        /// <summary>
        /// An IPv4 BGP peer address from which the tenant IP network should be advertised
        /// </summary>
        /// <value>string representing the address of an existing configured IPv4 BGP peer</value>
        /// <example>192.168.0.1</example>
        [DataMember(Name = "ipv4PeerAddress")]
        public string Ipv4PeerAddress { get; private set; }

        /// <summary>
        /// Denotes whether the tenant IP network is advertised on all BGP peers that are configured within the attachment set. This property 
        /// cannot be used concurrently with the 'Ipv4PeerAddress' property.
        /// </summary>
        /// <value>Boolean denoting whether the tenant IP network is advertised on all BGP peers that exist within the attachment set</value>
        /// <example>true</example>
        [DataMember(Name = "associatedWithAllBgpPeersInAttachmentSet")]
        public bool? AssociatedWithAllBgpPeersInAttachmentSet { get; private set; }

        /// <summary>
        /// The routing preference advertised with the route for the tenant IP network
        /// </summary>
        /// <value>An integer denoting the advertised IP routing preference</value>
        /// <example>10</example>
        [DataMember(Name="advertisedIpRoutingPreference")]
        public int? AdvertisedIpRoutingPreference { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VpnTenantIpNetworkOut {\n");
            sb.Append("  VpnTenantIpNetworkOutId: ").Append(VpnTenantIpNetworkOutId).Append("\n");
            sb.Append("  TenantIpNetworkId: ").Append(TenantIpNetworkId).Append("\n");
            sb.Append("  CidrName: ").Append(CidrName).Append("\n");
            sb.Append("  Ipv4PeerAddress: ").Append(Ipv4PeerAddress).Append("\n");
            sb.Append("  AssociatedWithAllBgpPeersInAttachmentSet: ").Append(AssociatedWithAllBgpPeersInAttachmentSet).Append("\n");
            sb.Append("  AdvertisedIpRoutingPreference: ").Append(AdvertisedIpRoutingPreference).Append("\n");
            sb.Append("  AttachmentSetName: ").Append(AttachmentSetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VpnTenantIpNetworkOut)obj);
        }

        /// <summary>
        /// Returns true if VpnTenantIpNetworkOut instances are equal
        /// </summary>
        /// <param name="other">Instance of VpnTenantIpv4NetworkOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnTenantIpNetworkOut other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                            (
                                VpnTenantIpNetworkOutId == other.VpnTenantIpNetworkOutId ||
                                VpnTenantIpNetworkOutId != null &&
                                VpnTenantIpNetworkOutId.Equals(other.VpnTenantIpNetworkOutId)
                            ) &&
                            (
                                TenantIpNetworkId == other.TenantIpNetworkId ||
                                TenantIpNetworkId != null &&
                                TenantIpNetworkId.Equals(other.TenantIpNetworkId)
                            ) &&
                            (
                                CidrName == other.CidrName ||
                                CidrName != null &&
                                CidrName.Equals(other.CidrName)
                            ) &&
                            (
                                Ipv4PeerAddress == other.Ipv4PeerAddress ||
                                Ipv4PeerAddress != null &&
                                Ipv4PeerAddress.Equals(other.Ipv4PeerAddress)
                            ) &&
                            (
                                AdvertisedIpRoutingPreference == other.AdvertisedIpRoutingPreference ||
                                AdvertisedIpRoutingPreference != null &&
                                AdvertisedIpRoutingPreference.Equals(other.AdvertisedIpRoutingPreference)
                            ) &&
                            (
                                AssociatedWithAllBgpPeersInAttachmentSet == other.AssociatedWithAllBgpPeersInAttachmentSet ||
                                AssociatedWithAllBgpPeersInAttachmentSet != null &&
                                AssociatedWithAllBgpPeersInAttachmentSet.Equals(other.AssociatedWithAllBgpPeersInAttachmentSet) 
                            )&&
                            (
                                AttachmentSetName == other.AttachmentSetName ||
                                AttachmentSetName != null &&
                                AttachmentSetName.Equals(other.AttachmentSetName)
                            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (VpnTenantIpNetworkOutId != null)
                    hashCode = hashCode * 59 + VpnTenantIpNetworkOutId.GetHashCode();
                if (TenantIpNetworkId != null)
                    hashCode = hashCode * 59 + TenantIpNetworkId.GetHashCode();
                if (CidrName != null)
                    hashCode = hashCode * 59 + CidrName.GetHashCode();
                if (Ipv4PeerAddress != null)
                    hashCode = hashCode * 59 + Ipv4PeerAddress.GetHashCode();
                if (AssociatedWithAllBgpPeersInAttachmentSet != null)
                    hashCode = hashCode * 59 + AssociatedWithAllBgpPeersInAttachmentSet.GetHashCode();
                if (AdvertisedIpRoutingPreference != null)
                    hashCode = hashCode * 59 + AdvertisedIpRoutingPreference.GetHashCode();
                if (AttachmentSetName != null)
                    hashCode = hashCode * 59 + AttachmentSetName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VpnTenantIpNetworkOut left, VpnTenantIpNetworkOut right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VpnTenantIpNetworkOut left, VpnTenantIpNetworkOut right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
