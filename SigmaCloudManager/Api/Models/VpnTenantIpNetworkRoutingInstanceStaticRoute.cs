/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for a tenant ip network static route association with an attachment set
    /// </summary>
    [DataContract]
    public partial class VpnTenantIpNetworkRoutingInstanceStaticRoute : IEquatable<VpnTenantIpNetworkRoutingInstanceStaticRoute>
    {
        /// <summary>
        /// The ID of the tenant owner of the IP network from which the static route
        /// is created.
        /// </summary>
        /// <value>An integer denoting the ID of the tenant</value>
        /// <example>1001</example>
        [DataMember(Name = "tenantId")]
        public Int32? TenantId { get; private set; }

        /// <summary>
        /// The ID of the tenant IP network static route
        /// </summary>
        /// <value>Integer for the ID of the tenant IP network static route</value>
        /// <example>8001</example>
        [DataMember(Name = "vpnTenantIpNetworkRoutingInstanceStaticRouteId")]
        public int? VpnTenantIpNetworkRoutingInstanceStaticRouteId { get; private set; }

        /// <summary>
        /// CIDR block name of the tenant IP network
        /// </summary>
        /// <value>String value for the CIDR representation of the tenant IP network</value>
        /// <example>10.1.1.0/24 le 32</example>
        [DataMember(Name = "CidrName")]
        public string CidrName { get; private set; }

        /// <summary>
        /// An IPv4 next-hop address towards which traffic for the tenant IP network should be forwarded. The specified next-hop must be
        /// reachable from all routing instances for which the static route is to be applied.
        /// </summary>
        /// <value>string representing the next-hop address</value>
        /// <example>192.168.0.1</example>
        [DataMember(Name="ipv4NextHopAddress")]
        public string Ipv4NextHopAddress { get; private set; }

        /// <summary>
        /// Denotes whether the static route is enabled with BFD fast-failure detection.
        /// </summary>
        /// <value>Boolean value denoting whether BFD is enabled for the static route</value>
        /// <example>200</example>
        [DataMember(Name = "isBfdEnabled")]
        public bool? IsBfdEnabled { get; private set; }

        /// <summary>
        /// The name of the attachment set to which the static route is associated.
        /// </summary>
        /// <value>A string value denoting the name of the attachment set</value>
        /// <example>713faafc85ff43db8472b6b9c38033a1</example>
        [DataMember(Name = "attachmentSetName")]
        public string AttachmentSetName { get; private set; }

        /// <summary>
        /// The name of the routing instance to which the static route is associated. If there is no routing instance association then the
        /// 'AssociatedWithAllRoutingInstances' property should be true, meaning that the static route is associated with all
        /// routing instances in the attachment set.
        /// </summary>
        /// <value>A string value denoting the name of the routing instance</value>
        /// <example>713faafc85ff43db8472b6b9c38033a1</example>
        [DataMember(Name = "routingInstanceName")]
        public string RoutingInstanceName { get; private set; }

        /// <summary>
        /// Denotes whether the static route is associated with all routing instances which belong to the attachment set instead of a 
        /// specific routing instance.
        /// </summary>
        /// <value>Boolean value denoting whether the static route is associated with all routing instances in the attachment set</value>
        /// <example>200</example>
        [DataMember(Name = "associatedWithAllRoutingInstances")]
        public bool? AssociatedWithAllRoutingInstances { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VpnTenantIpNetworkRoutingInstanceStaticRoute {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  VpnTenantIpNetworkRoutingInstanceStaticRouteId: ").Append(VpnTenantIpNetworkRoutingInstanceStaticRouteId).Append("\n");
            sb.Append("  CidrName: ").Append(CidrName).Append("\n");
            sb.Append("  Ipv4NextHopAddress: ").Append(Ipv4NextHopAddress).Append("\n");
            sb.Append("  IsBfdEnabled: ").Append(IsBfdEnabled).Append("\n");
            sb.Append("  AssociatedWithAllRoutingInstances: ").Append(AssociatedWithAllRoutingInstances).Append("\n");
            sb.Append("  RoutingInstanceName: ").Append(RoutingInstanceName).Append("\n");
            sb.Append("  AttachmentSetName: ").Append(AttachmentSetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VpnTenantIpNetworkRoutingInstanceStaticRoute)obj);
        }

        /// <summary>
        /// Returns true if VpnTenantIpNetworkRoutingInstanceStaticRoute instances are equal
        /// </summary>
        /// <param name="other">Instance of VpnTenantIpNetworkRoutingInstanceStaticRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnTenantIpNetworkRoutingInstanceStaticRoute other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    TenantId == other.TenantId ||
                    TenantId != null &&
                    TenantId.Equals(other.TenantId)
                ) &&
                (
                    VpnTenantIpNetworkRoutingInstanceStaticRouteId == other.VpnTenantIpNetworkRoutingInstanceStaticRouteId ||
                    VpnTenantIpNetworkRoutingInstanceStaticRouteId != null &&
                    VpnTenantIpNetworkRoutingInstanceStaticRouteId.Equals(other.VpnTenantIpNetworkRoutingInstanceStaticRouteId)
                ) &&
                (
                    CidrName == other.CidrName ||
                    CidrName != null &&
                    CidrName.Equals(other.CidrName)
                ) &&
                (
                    Ipv4NextHopAddress == other.Ipv4NextHopAddress ||
                    Ipv4NextHopAddress != null &&
                    Ipv4NextHopAddress.Equals(other.Ipv4NextHopAddress)
                ) &&
                (
                    IsBfdEnabled == other.IsBfdEnabled ||
                    IsBfdEnabled != null &&
                    IsBfdEnabled.Equals(other.IsBfdEnabled)
                ) &&
                (
                    RoutingInstanceName == other.RoutingInstanceName ||
                    RoutingInstanceName != null &&
                    RoutingInstanceName.Equals(other.RoutingInstanceName)
                ) &&
                (
                    AttachmentSetName == other.AttachmentSetName ||
                    AttachmentSetName != null &&
                    AttachmentSetName.Equals(other.AttachmentSetName)
                ) &&
                (
                    AssociatedWithAllRoutingInstances == other.AssociatedWithAllRoutingInstances ||
                    AssociatedWithAllRoutingInstances != null &&
                    AssociatedWithAllRoutingInstances.Equals(other.AssociatedWithAllRoutingInstances)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VpnTenantIpNetworkRoutingInstanceStaticRouteId != null)
                    hashCode = hashCode * 59 + VpnTenantIpNetworkRoutingInstanceStaticRouteId.GetHashCode();
                    if (TenantId != null)
                    hashCode = hashCode * 59 + TenantId.GetHashCode();
                    if (CidrName != null)
                    hashCode = hashCode * 59 + CidrName.GetHashCode();
                    if (Ipv4NextHopAddress != null)
                    hashCode = hashCode * 59 + Ipv4NextHopAddress.GetHashCode();
                    if (IsBfdEnabled != null)
                    hashCode = hashCode * 59 + IsBfdEnabled.GetHashCode();
                    if (AssociatedWithAllRoutingInstances != null)
                    hashCode = hashCode * 59 + AssociatedWithAllRoutingInstances.GetHashCode();
                    if (RoutingInstanceName != null)
                    hashCode = hashCode * 59 + RoutingInstanceName.GetHashCode();
                    if (AttachmentSetName != null)
                    hashCode = hashCode * 59 + AttachmentSetName.GetHashCode();

                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VpnTenantIpNetworkRoutingInstanceStaticRoute left, VpnTenantIpNetworkRoutingInstanceStaticRoute right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VpnTenantIpNetworkRoutingInstanceStaticRoute left, VpnTenantIpNetworkRoutingInstanceStaticRoute right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
