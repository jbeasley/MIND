/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model for updating a vpn
    /// </summary>
    [DataContract]
    public partial class VpnUpdate : IEquatable<VpnUpdate>, IValidatableObject
    {
        /// <summary>
        /// The name of the vpn
        /// </summary>
        /// <value>String value denoting the name of the vpn</value>
        /// <example>cloud-connectivity-vpn</example>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// A description of the VPN
        /// </summary>
        /// <value>String value denoting the vpn description</value>
        /// <example>vpn for providing IP connectivity between hosts running in public and private clouds</example>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The geographical region which the vpn operates within. If no region is chosen then the vpn should be made available in all regions
        /// </summary>
        /// <value>Enum value denoting the region</value>
        /// <example>EMEA</example>
        [DataMember(Name="region")]
        public RegionEnum? Region { get; set; }

        /// <summary>
        /// The tenancy type of the vpn. If the tenancy type is single then only the owner of the vpn can participate in the vpn. 
        /// If the tenancy type is multi then any tenant can participate in the vpn.
        /// </summary>
        /// <value>Enum value denoting the tenancy type of the vpn</value>
        /// <example>single</example>
        [Required]
        [DataMember(Name="tenancyType")]
        public TenancyTypeEnum? TenancyType { get; set; }

        /// <summary>
        /// Determines if the vpn supports extranet connectivity
        /// </summary>
        /// <value>Boolean denoting whether the vpn supports extranet</value>
        /// <example>true</example>
        [DataMember(Name = "isExtranet")]
        public bool? IsExtranet { get; set; }

        /// <summary>
        /// The multicast direction type of the VPN. 
        /// </summary>
        /// <value>Enum value denoting the multicast direction type of the vpn.</value>
        /// <example>unidirectional</example>
        [DataMember(Name = "multicastVpnDirectionType")]
        public MulticastVpnDirectionTypeEnum? MulticastVpnDirectionType { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (IsExtranet.HasValue && IsExtranet.Value)
            {
                if (TenancyType.Value != TenancyTypeEnum.Multi)
                {
                    yield return new ValidationResult("The tenancy type must be 'multi' for an extranet vpn.");
                }
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpVpnRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  TenancyType: ").Append(TenancyType).Append("\n");
            sb.Append("  IsExtranet: ").Append(IsExtranet).Append("\n");
            sb.Append("  MulticastVpnDirectionType: ").Append(MulticastVpnDirectionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VpnRequest)obj);
        }

        /// <summary>
        /// Returns true if VpnUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of VpnUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                ) && 
                (
                    TenancyType == other.TenancyType ||
                    TenancyType != null &&
                    TenancyType.Equals(other.TenancyType)
                ) && 
                (
                    IsExtranet == other.IsExtranet||
                    IsExtranet != null &&
                    IsExtranet.Equals(other.IsExtranet)
                ) &&
                (
                    MulticastVpnDirectionType == other.MulticastVpnDirectionType ||
                    MulticastVpnDirectionType != null &&
                    MulticastVpnDirectionType.Equals(other.MulticastVpnDirectionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                    if (TenancyType != null)
                    hashCode = hashCode * 59 + TenancyType.GetHashCode();
                    if (IsExtranet != null)
                    hashCode = hashCode * 59 + IsExtranet.GetHashCode();
                    if (MulticastVpnDirectionType != null)
                    hashCode = hashCode * 59 + MulticastVpnDirectionType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(VpnUpdate left, VpnUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VpnUpdate left, VpnUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
