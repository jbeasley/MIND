// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SCM.Data;
using SCM.Models;
using System;

namespace SigmaCloudManager.Migrations
{
    [DbContext(typeof(SigmaContext))]
    partial class SigmaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SCM.Models.AddressFamily", b =>
                {
                    b.Property<int>("AddressFamilyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AddressFamilyID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AddressFamily");
                });

            modelBuilder.Entity("SCM.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentBandwidthID");

                    b.Property<int>("AttachmentRoleID");

                    b.Property<int?>("BundleMaxLinks");

                    b.Property<int?>("BundleMinLinks");

                    b.Property<int?>("ContractBandwidthPoolID");

                    b.Property<bool>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("DeviceID");

                    b.Property<int?>("ID");

                    b.Property<bool>("IsBundle");

                    b.Property<bool>("IsLayer3");

                    b.Property<bool>("IsMultiPort");

                    b.Property<bool>("IsTagged");

                    b.Property<int>("MtuID");

                    b.Property<string>("Notes")
                        .HasMaxLength(250);

                    b.Property<bool>("RequiresSync");

                    b.Property<int?>("RoutingInstanceID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ShowCreatedAlert");

                    b.Property<bool>("ShowRequiresSyncAlert");

                    b.Property<int?>("TenantID");

                    b.HasKey("AttachmentID");

                    b.HasIndex("AttachmentBandwidthID");

                    b.HasIndex("AttachmentRoleID");

                    b.HasIndex("ContractBandwidthPoolID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("MtuID");

                    b.HasIndex("RoutingInstanceID");

                    b.HasIndex("TenantID");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("SCM.Models.AttachmentBandwidth", b =>
                {
                    b.Property<int>("AttachmentBandwidthID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BandwidthGbps");

                    b.Property<int?>("BundleOrMultiPortMemberBandwidthGbps");

                    b.Property<bool>("MustBeBundleOrMultiPort");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("SupportedByBundle");

                    b.Property<bool>("SupportedByMultiPort");

                    b.HasKey("AttachmentBandwidthID");

                    b.HasIndex("BandwidthGbps")
                        .IsUnique();

                    b.ToTable("AttachmentBandwidth");
                });

            modelBuilder.Entity("SCM.Models.AttachmentRedundancy", b =>
                {
                    b.Property<int>("AttachmentRedundancyID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentRedundancyType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("AttachmentRedundancyID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AttachmentRedundancy");
                });

            modelBuilder.Entity("SCM.Models.AttachmentRole", b =>
                {
                    b.Property<int>("AttachmentRoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsLayer3Role");

                    b.Property<bool>("IsTaggedRole");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PortPoolID");

                    b.Property<bool>("RequireContractBandwidth");

                    b.Property<bool>("RequireSyncToNetwork");

                    b.Property<int?>("RoutingInstanceTypeID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("SupportedByBundle");

                    b.Property<bool>("SupportedByMultiPort");

                    b.HasKey("AttachmentRoleID");

                    b.HasIndex("PortPoolID");

                    b.HasIndex("RoutingInstanceTypeID");

                    b.ToTable("AttachmentRole");
                });

            modelBuilder.Entity("SCM.Models.AttachmentSet", b =>
                {
                    b.Property<int>("AttachmentSetID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentRedundancyID");

                    b.Property<bool>("IsLayer3");

                    b.Property<int?>("MulticastVpnDomainTypeID");

                    b.Property<int>("RegionID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SubRegionID");

                    b.Property<int>("TenantID");

                    b.HasKey("AttachmentSetID");

                    b.HasIndex("AttachmentRedundancyID");

                    b.HasIndex("MulticastVpnDomainTypeID");

                    b.HasIndex("RegionID");

                    b.HasIndex("SubRegionID");

                    b.HasIndex("TenantID");

                    b.ToTable("AttachmentSet");
                });

            modelBuilder.Entity("SCM.Models.AttachmentSetRoutingInstance", b =>
                {
                    b.Property<int>("AttachmentSetRoutingInstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdvertisedIpRoutingPreference");

                    b.Property<int>("AttachmentSetID");

                    b.Property<int?>("LocalIpRoutingPreference");

                    b.Property<int?>("MulticastDesignatedRouterPreference");

                    b.Property<int>("RoutingInstanceID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("AttachmentSetRoutingInstanceID");

                    b.HasIndex("RoutingInstanceID");

                    b.HasIndex("AttachmentSetID", "RoutingInstanceID")
                        .IsUnique();

                    b.ToTable("AttachmentSetRoutingInstance");
                });

            modelBuilder.Entity("SCM.Models.BgpPeer", b =>
                {
                    b.Property<int>("BgpPeerID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AutonomousSystem");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(15);

                    b.Property<bool>("IsBfdEnabled");

                    b.Property<bool>("IsMultiHop");

                    b.Property<int?>("MaximumRoutes");

                    b.Property<string>("Md5Password")
                        .HasMaxLength(50);

                    b.Property<int>("RoutingInstanceID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("BgpPeerID");

                    b.HasIndex("RoutingInstanceID", "IpAddress")
                        .IsUnique()
                        .HasFilter("[IpAddress] IS NOT NULL");

                    b.ToTable("BgpPeer");
                });

            modelBuilder.Entity("SCM.Models.ContractBandwidth", b =>
                {
                    b.Property<int>("ContractBandwidthID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BandwidthMbps");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ContractBandwidthID");

                    b.HasIndex("BandwidthMbps")
                        .IsUnique();

                    b.ToTable("ContractBandwidth");
                });

            modelBuilder.Entity("SCM.Models.ContractBandwidthPool", b =>
                {
                    b.Property<int>("ContractBandwidthPoolID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractBandwidthID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TenantID");

                    b.Property<bool>("TrustReceivedCosDscp");

                    b.HasKey("ContractBandwidthPoolID");

                    b.HasIndex("ContractBandwidthID");

                    b.HasIndex("TenantID");

                    b.ToTable("ContractBandwidthPool");
                });

            modelBuilder.Entity("SCM.Models.Device", b =>
                {
                    b.Property<int>("DeviceID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("DeviceModelID");

                    b.Property<int>("DeviceRoleID");

                    b.Property<int>("DeviceStatusID");

                    b.Property<int?>("LocationID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasMaxLength(250);

                    b.Property<int?>("PlaneID");

                    b.Property<bool>("RequiresSync");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ShowCreatedAlert");

                    b.Property<bool>("ShowRequiresSyncAlert");

                    b.Property<int?>("TenantID");

                    b.Property<bool>("UseLayer2InterfaceMtu");

                    b.HasKey("DeviceID");

                    b.HasIndex("DeviceModelID");

                    b.HasIndex("DeviceRoleID");

                    b.HasIndex("DeviceStatusID");

                    b.HasIndex("LocationID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PlaneID");

                    b.HasIndex("TenantID");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("SCM.Models.DeviceModel", b =>
                {
                    b.Property<int>("DeviceModelID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("DeviceModelID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeviceModel");
                });

            modelBuilder.Entity("SCM.Models.DeviceRole", b =>
                {
                    b.Property<int>("DeviceRoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsProviderDomainRole");

                    b.Property<bool>("IsTenantDomainRole");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("RequireSyncToNetwork");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("DeviceRoleID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeviceRole");
                });

            modelBuilder.Entity("SCM.Models.DeviceRoleAttachmentRole", b =>
                {
                    b.Property<int>("DeviceRoleAttachmentRoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentRoleID");

                    b.Property<int>("DeviceRoleID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("DeviceRoleAttachmentRoleID");

                    b.HasIndex("AttachmentRoleID");

                    b.HasIndex("DeviceRoleID");

                    b.ToTable("DeviceRoleAttachmentRole");
                });

            modelBuilder.Entity("SCM.Models.DeviceRolePortRole", b =>
                {
                    b.Property<int>("DeviceRolePortRoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeviceRoleID");

                    b.Property<int>("PortRoleID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("DeviceRolePortRoleID");

                    b.HasIndex("DeviceRoleID");

                    b.HasIndex("PortRoleID");

                    b.ToTable("DeviceRolePortRole");
                });

            modelBuilder.Entity("SCM.Models.DeviceStatus", b =>
                {
                    b.Property<int>("DeviceStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("DeviceStatusType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("DeviceStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeviceStatus");
                });

            modelBuilder.Entity("SCM.Models.ExtranetVpnMember", b =>
                {
                    b.Property<int>("ExtranetVpnMemberID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ExtranetVpnID");

                    b.Property<int>("MemberVpnID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ExtranetVpnMemberID");

                    b.HasIndex("MemberVpnID");

                    b.HasIndex("ExtranetVpnID", "MemberVpnID")
                        .IsUnique()
                        .HasFilter("[ExtranetVpnID] IS NOT NULL");

                    b.ToTable("ExtranetVpnMember");
                });

            modelBuilder.Entity("SCM.Models.ExtranetVpnTenantCommunityIn", b =>
                {
                    b.Property<int>("ExtranetVpnTenantCommunityInID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExtranetVpnMemberID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VpnTenantCommunityInID");

                    b.HasKey("ExtranetVpnTenantCommunityInID");

                    b.HasIndex("VpnTenantCommunityInID");

                    b.HasIndex("ExtranetVpnMemberID", "VpnTenantCommunityInID")
                        .IsUnique();

                    b.ToTable("ExtranetVpnTenantCommunityIn");
                });

            modelBuilder.Entity("SCM.Models.ExtranetVpnTenantNetworkIn", b =>
                {
                    b.Property<int>("ExtranetVpnTenantNetworkInID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExtranetVpnMemberID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VpnTenantNetworkInID");

                    b.HasKey("ExtranetVpnTenantNetworkInID");

                    b.HasIndex("VpnTenantNetworkInID");

                    b.HasIndex("ExtranetVpnMemberID", "VpnTenantNetworkInID")
                        .IsUnique();

                    b.ToTable("ExtranetVpnTenantNetworkIn");
                });

            modelBuilder.Entity("SCM.Models.Interface", b =>
                {
                    b.Property<int>("InterfaceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentID");

                    b.Property<int?>("DeviceID");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(15);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(15);

                    b.HasKey("InterfaceID");

                    b.HasIndex("AttachmentID");

                    b.HasIndex("DeviceID");

                    b.ToTable("Interface");
                });

            modelBuilder.Entity("SCM.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlternateLocationLocationID");

                    b.Property<int>("AutonomousSystemNumber");

                    b.Property<int>("Number");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubRegionID");

                    b.Property<int>("Tier");

                    b.HasKey("LocationID");

                    b.HasIndex("AlternateLocationLocationID");

                    b.HasIndex("SiteName")
                        .IsUnique();

                    b.HasIndex("SubRegionID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SCM.Models.LogicalInterface", b =>
                {
                    b.Property<int>("LogicalInterfaceID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("ID");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(15);

                    b.Property<int>("LogicalInterfaceType");

                    b.Property<int>("RoutingInstanceID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(15);

                    b.HasKey("LogicalInterfaceID");

                    b.HasIndex("RoutingInstanceID");

                    b.ToTable("LogicalInterface");
                });

            modelBuilder.Entity("SCM.Models.Mtu", b =>
                {
                    b.Property<int>("MtuID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MtuValue");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ValueIncludesLayer2Overhead");

                    b.HasKey("MtuID");

                    b.HasIndex("MtuValue")
                        .IsUnique();

                    b.ToTable("Mtu");
                });

            modelBuilder.Entity("SCM.Models.MulticastGeographicalScope", b =>
                {
                    b.Property<int>("MulticastGeographicalScopeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("MulticastGeographicalScopeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MulticastGeographicalScope");
                });

            modelBuilder.Entity("SCM.Models.MulticastVpnDirectionType", b =>
                {
                    b.Property<int>("MulticastVpnDirectionTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MvpnDirectionType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("MulticastVpnDirectionTypeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MulticastVpnDirectionType");
                });

            modelBuilder.Entity("SCM.Models.MulticastVpnDomainType", b =>
                {
                    b.Property<int>("MulticastVpnDomainTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MvpnDomainType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("MulticastVpnDomainTypeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MulticastVpnDomainType");
                });

            modelBuilder.Entity("SCM.Models.MulticastVpnRp", b =>
                {
                    b.Property<int>("MulticastVpnRpID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentSetID");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("MulticastVpnRpID");

                    b.HasIndex("AttachmentSetID");

                    b.ToTable("MulticastVpnRp");
                });

            modelBuilder.Entity("SCM.Models.MulticastVpnServiceType", b =>
                {
                    b.Property<int>("MulticastVpnServiceTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MvpnServiceType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("MulticastVpnServiceTypeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MulticastVpnServiceType");
                });

            modelBuilder.Entity("SCM.Models.Plane", b =>
                {
                    b.Property<int>("PlaneID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PlaneID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Plane");
                });

            modelBuilder.Entity("SCM.Models.Port", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeviceID");

                    b.Property<int?>("InterfaceID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PortBandwidthID");

                    b.Property<int>("PortConnectorID");

                    b.Property<int>("PortPoolID");

                    b.Property<int>("PortSfpID");

                    b.Property<int>("PortStatusID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TenantID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("InterfaceID");

                    b.HasIndex("PortBandwidthID");

                    b.HasIndex("PortConnectorID");

                    b.HasIndex("PortPoolID");

                    b.HasIndex("PortSfpID");

                    b.HasIndex("PortStatusID");

                    b.HasIndex("TenantID");

                    b.HasIndex("Type", "Name", "DeviceID")
                        .IsUnique();

                    b.ToTable("Port");
                });

            modelBuilder.Entity("SCM.Models.PortBandwidth", b =>
                {
                    b.Property<int>("PortBandwidthID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BandwidthGbps");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PortBandwidthID");

                    b.HasIndex("BandwidthGbps")
                        .IsUnique();

                    b.ToTable("PortBandwidth");
                });

            modelBuilder.Entity("SCM.Models.PortConnector", b =>
                {
                    b.Property<int>("PortConnectorID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PortConnectorID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PortConnector");
                });

            modelBuilder.Entity("SCM.Models.PortPool", b =>
                {
                    b.Property<int>("PortPoolID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PortRoleID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PortPoolID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PortRoleID");

                    b.ToTable("PortPool");
                });

            modelBuilder.Entity("SCM.Models.PortRole", b =>
                {
                    b.Property<int>("PortRoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PortRoleType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PortRoleID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PortRole");
                });

            modelBuilder.Entity("SCM.Models.PortSfp", b =>
                {
                    b.Property<int>("PortSfpID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PortSfpID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PortSfp");
                });

            modelBuilder.Entity("SCM.Models.PortStatus", b =>
                {
                    b.Property<int>("PortStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PortStatusType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PortStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PortStatus");
                });

            modelBuilder.Entity("SCM.Models.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AutonomousSystemNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Number");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RegionID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Region");
                });

            modelBuilder.Entity("SCM.Models.RouteDistinguisherRange", b =>
                {
                    b.Property<int>("RouteDistinguisherRangeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdministratorSubField");

                    b.Property<int>("AssignedNumberSubFieldCount");

                    b.Property<int>("AssignedNumberSubFieldStart");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RouteDistinguisherRangeID");

                    b.ToTable("RouteDistinguisherRange");
                });

            modelBuilder.Entity("SCM.Models.RouteTarget", b =>
                {
                    b.Property<int>("RouteTargetID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignedNumberSubField");

                    b.Property<bool>("IsHubExport");

                    b.Property<int>("RouteTargetRangeID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VpnID");

                    b.HasKey("RouteTargetID");

                    b.HasIndex("VpnID");

                    b.HasIndex("RouteTargetRangeID", "AssignedNumberSubField")
                        .IsUnique();

                    b.ToTable("RouteTarget");
                });

            modelBuilder.Entity("SCM.Models.RouteTargetRange", b =>
                {
                    b.Property<int>("RouteTargetRangeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdministratorSubField");

                    b.Property<int>("AssignedNumberSubFieldCount");

                    b.Property<int>("AssignedNumberSubFieldStart");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RouteTargetRangeID");

                    b.ToTable("RouteTargetRange");
                });

            modelBuilder.Entity("SCM.Models.RoutingInstance", b =>
                {
                    b.Property<int>("RoutingInstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdministratorSubField");

                    b.Property<int?>("AssignedNumberSubField");

                    b.Property<int>("DeviceID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("RouteDistinguisherRangeID");

                    b.Property<int>("RoutingInstanceTypeID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TenantID");

                    b.HasKey("RoutingInstanceID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("RouteDistinguisherRangeID");

                    b.HasIndex("RoutingInstanceTypeID");

                    b.HasIndex("TenantID");

                    b.HasIndex("Name", "DeviceID")
                        .IsUnique();

                    b.ToTable("RoutingInstance");
                });

            modelBuilder.Entity("SCM.Models.RoutingInstanceType", b =>
                {
                    b.Property<int>("RoutingInstanceTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsInfrastructureVrf");

                    b.Property<bool>("IsLayer3");

                    b.Property<bool>("IsTenantFacingVrf");

                    b.Property<bool>("IsVrf");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RoutingInstanceTypeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RoutingInstanceType");
                });

            modelBuilder.Entity("SCM.Models.RoutingPolicyMatchOption", b =>
                {
                    b.Property<int>("RoutingPolicyMatchOptionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RoutingPolicyMatchOptionID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RoutingPolicyMatchOption");
                });

            modelBuilder.Entity("SCM.Models.SubRegion", b =>
                {
                    b.Property<int>("SubRegionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AutonomousSystemNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Number");

                    b.Property<int>("RegionID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("SubRegionID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionID");

                    b.ToTable("SubRegion");
                });

            modelBuilder.Entity("SCM.Models.Tenant", b =>
                {
                    b.Property<int>("TenantID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("TenantID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("SCM.Models.TenantCommunity", b =>
                {
                    b.Property<int>("TenantCommunityID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowExtranet");

                    b.Property<int>("AutonomousSystemNumber");

                    b.Property<int>("Number");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantID");

                    b.HasKey("TenantCommunityID");

                    b.HasIndex("TenantID");

                    b.HasIndex("AutonomousSystemNumber", "Number")
                        .IsUnique();

                    b.ToTable("TenantCommunity");
                });

            modelBuilder.Entity("SCM.Models.TenantCommunitySet", b =>
                {
                    b.Property<int>("TenantCommunitySetID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("RoutingPolicyMatchOptionID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TenantCommunityID");

                    b.Property<int>("TenantID");

                    b.HasKey("TenantCommunitySetID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("RoutingPolicyMatchOptionID");

                    b.HasIndex("TenantCommunityID");

                    b.HasIndex("TenantID");

                    b.ToTable("TenantCommunitySet");
                });

            modelBuilder.Entity("SCM.Models.TenantCommunitySetCommunity", b =>
                {
                    b.Property<int>("TenantCommunitySetCommunityID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantCommunityID");

                    b.Property<int>("TenantCommunitySetID");

                    b.HasKey("TenantCommunitySetCommunityID");

                    b.HasIndex("TenantCommunitySetID");

                    b.HasIndex("TenantCommunityID", "TenantCommunitySetID")
                        .IsUnique();

                    b.ToTable("TenantCommunitySetCommunity");
                });

            modelBuilder.Entity("SCM.Models.TenantMulticastGroup", b =>
                {
                    b.Property<int>("TenantMulticastGroupID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowExtranet");

                    b.Property<string>("GroupAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("GroupMask")
                        .HasMaxLength(15);

                    b.Property<bool>("IsSsmGroup");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(15);

                    b.Property<string>("SourceMask")
                        .HasMaxLength(15);

                    b.Property<int>("TenantID");

                    b.HasKey("TenantMulticastGroupID");

                    b.HasIndex("TenantID");

                    b.ToTable("TenantMulticastGroup");
                });

            modelBuilder.Entity("SCM.Models.TenantNetwork", b =>
                {
                    b.Property<int>("TenantNetworkID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowExtranet");

                    b.Property<string>("IpPrefix")
                        .HasMaxLength(15);

                    b.Property<int>("Length");

                    b.Property<int?>("LessThanOrEqualToLength");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantID");

                    b.HasKey("TenantNetworkID");

                    b.HasIndex("TenantID");

                    b.HasIndex("IpPrefix", "Length")
                        .IsUnique()
                        .HasFilter("[IpPrefix] IS NOT NULL");

                    b.ToTable("TenantNetwork");
                });

            modelBuilder.Entity("SCM.Models.Vif", b =>
                {
                    b.Property<int>("VifID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentID");

                    b.Property<int?>("ContractBandwidthPoolID");

                    b.Property<bool>("Created");

                    b.Property<bool>("IsLayer3");

                    b.Property<bool>("RequiresSync");

                    b.Property<int?>("RoutingInstanceID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ShowCreatedAlert");

                    b.Property<bool>("ShowRequiresSyncAlert");

                    b.Property<int?>("TenantID");

                    b.Property<int>("VifRoleID");

                    b.Property<int?>("VifRoleID1");

                    b.Property<int>("VlanTag");

                    b.Property<int?>("VlanTagRangeID");

                    b.HasKey("VifID");

                    b.HasIndex("ContractBandwidthPoolID");

                    b.HasIndex("RoutingInstanceID");

                    b.HasIndex("TenantID");

                    b.HasIndex("VifRoleID");

                    b.HasIndex("VifRoleID1");

                    b.HasIndex("VlanTagRangeID");

                    b.HasIndex("AttachmentID", "VlanTag")
                        .IsUnique();

                    b.ToTable("Vif");
                });

            modelBuilder.Entity("SCM.Models.VifRole", b =>
                {
                    b.Property<int>("VifRoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentRoleID");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsLayer3Role");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("RequireContractBandwidth");

                    b.Property<bool>("RequireSyncToNetwork");

                    b.Property<int?>("RoutingInstanceTypeID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("VifRoleID");

                    b.HasIndex("AttachmentRoleID");

                    b.HasIndex("RoutingInstanceTypeID");

                    b.ToTable("VifRole");
                });

            modelBuilder.Entity("SCM.Models.Vlan", b =>
                {
                    b.Property<int>("VlanID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InterfaceID");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(15);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(15);

                    b.Property<int?>("VifID");

                    b.HasKey("VlanID");

                    b.HasIndex("InterfaceID");

                    b.HasIndex("VifID");

                    b.ToTable("Vlan");
                });

            modelBuilder.Entity("SCM.Models.VlanTagRange", b =>
                {
                    b.Property<int>("VlanTagRangeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VlanTagRangeCount");

                    b.Property<int>("VlanTagRangeStart");

                    b.HasKey("VlanTagRangeID");

                    b.ToTable("VlanTagRange");
                });

            modelBuilder.Entity("SCM.Models.Vpn", b =>
                {
                    b.Property<int>("VpnID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressFamilyID");

                    b.Property<bool>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsExtranet");

                    b.Property<bool>("IsMulticastVpn");

                    b.Property<bool>("IsNovaVpn");

                    b.Property<int?>("MulticastVpnDirectionTypeID");

                    b.Property<int?>("MulticastVpnServiceTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("PlaneID");

                    b.Property<int?>("RegionID");

                    b.Property<bool>("RequiresSync");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ShowCreatedAlert");

                    b.Property<bool>("ShowRequiresSyncAlert");

                    b.Property<int>("TenantID");

                    b.Property<int>("VpnTenancyTypeID");

                    b.Property<int>("VpnTopologyTypeID");

                    b.HasKey("VpnID");

                    b.HasIndex("AddressFamilyID");

                    b.HasIndex("MulticastVpnDirectionTypeID");

                    b.HasIndex("MulticastVpnServiceTypeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PlaneID");

                    b.HasIndex("RegionID");

                    b.HasIndex("TenantID");

                    b.HasIndex("VpnTenancyTypeID");

                    b.HasIndex("VpnTopologyTypeID");

                    b.ToTable("Vpn");
                });

            modelBuilder.Entity("SCM.Models.VpnAttachmentSet", b =>
                {
                    b.Property<int>("VpnAttachmentSetID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentSetID");

                    b.Property<bool?>("IsHub");

                    b.Property<bool?>("IsMulticastDirectlyIntegrated");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VpnID");

                    b.HasKey("VpnAttachmentSetID");

                    b.HasIndex("VpnID");

                    b.HasIndex("AttachmentSetID", "VpnID")
                        .IsUnique();

                    b.ToTable("VpnAttachmentSet");
                });

            modelBuilder.Entity("SCM.Models.VpnProtocolType", b =>
                {
                    b.Property<int>("VpnProtocolTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ProtocolType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("VpnProtocolTypeID");

                    b.HasIndex("ProtocolType")
                        .IsUnique();

                    b.ToTable("VpnProtocolType");
                });

            modelBuilder.Entity("SCM.Models.VpnTenancyType", b =>
                {
                    b.Property<int>("VpnTenancyTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenancyType");

                    b.HasKey("VpnTenancyTypeID");

                    b.HasIndex("TenancyType")
                        .IsUnique();

                    b.ToTable("VpnTenancyType");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantCommunityIn", b =>
                {
                    b.Property<int>("VpnTenantCommunityInID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AddToAllBgpPeersInAttachmentSet");

                    b.Property<int>("AttachmentSetID");

                    b.Property<int?>("BgpPeerID");

                    b.Property<int?>("LocalIpRoutingPreference");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantCommunityID");

                    b.HasKey("VpnTenantCommunityInID");

                    b.HasIndex("AttachmentSetID");

                    b.HasIndex("BgpPeerID");

                    b.HasIndex("TenantCommunityID", "AttachmentSetID")
                        .IsUnique();

                    b.ToTable("VpnTenantCommunityIn");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantCommunityOut", b =>
                {
                    b.Property<int>("VpnTenantCommunityOutID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdvertisedIpRoutingPreference");

                    b.Property<int>("AttachmentSetID");

                    b.Property<int>("BgpPeerID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantCommunityID");

                    b.HasKey("VpnTenantCommunityOutID");

                    b.HasIndex("AttachmentSetID");

                    b.HasIndex("BgpPeerID");

                    b.HasIndex("TenantCommunityID", "AttachmentSetID")
                        .IsUnique();

                    b.ToTable("VpnTenantCommunityOut");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantCommunityRoutingInstance", b =>
                {
                    b.Property<int>("VpnTenantCommunityRoutingInstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentSetID");

                    b.Property<int>("LocalIpRoutingPreference");

                    b.Property<int>("RoutingInstanceID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TenantCommunityID");

                    b.Property<int?>("TenantCommunitySetID");

                    b.HasKey("VpnTenantCommunityRoutingInstanceID");

                    b.HasIndex("AttachmentSetID");

                    b.HasIndex("RoutingInstanceID");

                    b.HasIndex("TenantCommunityID", "AttachmentSetID")
                        .IsUnique()
                        .HasFilter("[TenantCommunityID] IS NOT NULL");

                    b.HasIndex("TenantCommunitySetID", "AttachmentSetID")
                        .IsUnique()
                        .HasFilter("[TenantCommunitySetID] IS NOT NULL");

                    b.ToTable("VpnTenantCommunityRoutingInstance");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantMulticastGroup", b =>
                {
                    b.Property<int>("VpnTenantMulticastGroupID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentSetID");

                    b.Property<int?>("MulticastGeographicalScopeID");

                    b.Property<int?>("MulticastVpnRpID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantMulticastGroupID");

                    b.HasKey("VpnTenantMulticastGroupID");

                    b.HasIndex("AttachmentSetID");

                    b.HasIndex("MulticastGeographicalScopeID");

                    b.HasIndex("MulticastVpnRpID");

                    b.HasIndex("TenantMulticastGroupID", "AttachmentSetID")
                        .IsUnique();

                    b.ToTable("VpnTenantMulticastGroup");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkCommunityIn", b =>
                {
                    b.Property<int>("VpnTenantNetworkCommunityInID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantCommunityID");

                    b.Property<int?>("TenantCommunityID1");

                    b.Property<int>("VpnTenantNetworkInID");

                    b.HasKey("VpnTenantNetworkCommunityInID");

                    b.HasIndex("TenantCommunityID");

                    b.HasIndex("TenantCommunityID1");

                    b.HasIndex("VpnTenantNetworkInID", "TenantCommunityID")
                        .IsUnique();

                    b.ToTable("VpnTenantNetworkCommunityIn");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkIn", b =>
                {
                    b.Property<int>("VpnTenantNetworkInID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AddToAllBgpPeersInAttachmentSet");

                    b.Property<int>("AttachmentSetID");

                    b.Property<int?>("BgpPeerID");

                    b.Property<int?>("LocalIpRoutingPreference");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantNetworkID");

                    b.HasKey("VpnTenantNetworkInID");

                    b.HasIndex("AttachmentSetID");

                    b.HasIndex("BgpPeerID");

                    b.HasIndex("TenantNetworkID", "AttachmentSetID")
                        .IsUnique();

                    b.ToTable("VpnTenantNetworkIn");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkOut", b =>
                {
                    b.Property<int>("VpnTenantNetworkOutID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdvertisedIpRoutingPreference");

                    b.Property<int>("AttachmentSetID");

                    b.Property<int>("BgpPeerID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantNetworkID");

                    b.HasKey("VpnTenantNetworkOutID");

                    b.HasIndex("AttachmentSetID");

                    b.HasIndex("BgpPeerID");

                    b.HasIndex("TenantNetworkID", "AttachmentSetID")
                        .IsUnique();

                    b.ToTable("VpnTenantNetworkOut");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkRoutingInstance", b =>
                {
                    b.Property<int>("VpnTenantNetworkRoutingInstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttachmentSetID");

                    b.Property<int>("LocalIpRoutingPreference");

                    b.Property<int>("RoutingInstanceID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantNetworkID");

                    b.HasKey("VpnTenantNetworkRoutingInstanceID");

                    b.HasIndex("AttachmentSetID");

                    b.HasIndex("RoutingInstanceID");

                    b.HasIndex("TenantNetworkID", "AttachmentSetID")
                        .IsUnique();

                    b.ToTable("VpnTenantNetworkRoutingInstance");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkStaticRouteRoutingInstance", b =>
                {
                    b.Property<int>("VpnTenantNetworkStaticRouteRoutingInstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AddToAllRoutingInstancesInAttachmentSet");

                    b.Property<int>("AttachmentSetID");

                    b.Property<bool>("IsBfdEnabled");

                    b.Property<string>("NextHopAddress");

                    b.Property<int?>("RoutingInstanceID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TenantNetworkID");

                    b.HasKey("VpnTenantNetworkStaticRouteRoutingInstanceID");

                    b.HasIndex("AttachmentSetID");

                    b.HasIndex("RoutingInstanceID");

                    b.HasIndex("TenantNetworkID", "AttachmentSetID")
                        .IsUnique();

                    b.ToTable("VpnTenantNetworkStaticRouteRoutingInstance");
                });

            modelBuilder.Entity("SCM.Models.VpnTopologyType", b =>
                {
                    b.Property<int>("VpnTopologyTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TopologyType");

                    b.Property<int>("VpnProtocolTypeID");

                    b.HasKey("VpnTopologyTypeID");

                    b.HasIndex("VpnProtocolTypeID");

                    b.HasIndex("TopologyType", "VpnProtocolTypeID")
                        .IsUnique();

                    b.ToTable("VpnTopologyType");
                });

            modelBuilder.Entity("SCM.Models.Attachment", b =>
                {
                    b.HasOne("SCM.Models.AttachmentBandwidth", "AttachmentBandwidth")
                        .WithMany()
                        .HasForeignKey("AttachmentBandwidthID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.AttachmentRole", "AttachmentRole")
                        .WithMany()
                        .HasForeignKey("AttachmentRoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.ContractBandwidthPool", "ContractBandwidthPool")
                        .WithMany("Attachments")
                        .HasForeignKey("ContractBandwidthPoolID");

                    b.HasOne("SCM.Models.Device", "Device")
                        .WithMany("Attachments")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Mtu", "Mtu")
                        .WithMany("Attachments")
                        .HasForeignKey("MtuID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.RoutingInstance", "RoutingInstance")
                        .WithMany("Attachments")
                        .HasForeignKey("RoutingInstanceID");

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany("Attachments")
                        .HasForeignKey("TenantID");
                });

            modelBuilder.Entity("SCM.Models.AttachmentRole", b =>
                {
                    b.HasOne("SCM.Models.PortPool", "PortPool")
                        .WithMany("AttachmentRoles")
                        .HasForeignKey("PortPoolID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.RoutingInstanceType", "RoutingInstanceType")
                        .WithMany()
                        .HasForeignKey("RoutingInstanceTypeID");
                });

            modelBuilder.Entity("SCM.Models.AttachmentSet", b =>
                {
                    b.HasOne("SCM.Models.AttachmentRedundancy", "AttachmentRedundancy")
                        .WithMany()
                        .HasForeignKey("AttachmentRedundancyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.MulticastVpnDomainType", "MulticastVpnDomainType")
                        .WithMany()
                        .HasForeignKey("MulticastVpnDomainTypeID");

                    b.HasOne("SCM.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.SubRegion", "SubRegion")
                        .WithMany()
                        .HasForeignKey("SubRegionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SCM.Models.AttachmentSetRoutingInstance", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("AttachmentSetRoutingInstances")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.RoutingInstance", "RoutingInstance")
                        .WithMany("AttachmentSetRoutingInstances")
                        .HasForeignKey("RoutingInstanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.BgpPeer", b =>
                {
                    b.HasOne("SCM.Models.RoutingInstance", "RoutingInstance")
                        .WithMany("BgpPeers")
                        .HasForeignKey("RoutingInstanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.ContractBandwidthPool", b =>
                {
                    b.HasOne("SCM.Models.ContractBandwidth", "ContractBandwidth")
                        .WithMany()
                        .HasForeignKey("ContractBandwidthID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID");
                });

            modelBuilder.Entity("SCM.Models.Device", b =>
                {
                    b.HasOne("SCM.Models.DeviceModel", "DeviceModel")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceModelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.DeviceRole", "DeviceRole")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceRoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.DeviceStatus", "DeviceStatus")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.Plane", "Plane")
                        .WithMany()
                        .HasForeignKey("PlaneID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany("Devices")
                        .HasForeignKey("TenantID");
                });

            modelBuilder.Entity("SCM.Models.DeviceRoleAttachmentRole", b =>
                {
                    b.HasOne("SCM.Models.AttachmentRole", "AttachmentRole")
                        .WithMany("DeviceRoleAttachmentRoles")
                        .HasForeignKey("AttachmentRoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.DeviceRole", "DeviceRole")
                        .WithMany("DeviceRoleAttachmentRoles")
                        .HasForeignKey("DeviceRoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.DeviceRolePortRole", b =>
                {
                    b.HasOne("SCM.Models.DeviceRole", "DeviceRole")
                        .WithMany("DeviceRolePortRoles")
                        .HasForeignKey("DeviceRoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.PortRole", "PortRole")
                        .WithMany("DeviceRolePortRoles")
                        .HasForeignKey("PortRoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.ExtranetVpnMember", b =>
                {
                    b.HasOne("SCM.Models.Vpn", "ExtranetVpn")
                        .WithMany("ExtranetVpnMembers")
                        .HasForeignKey("ExtranetVpnID");

                    b.HasOne("SCM.Models.Vpn", "MemberVpn")
                        .WithMany("ExtranetVpns")
                        .HasForeignKey("MemberVpnID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.ExtranetVpnTenantCommunityIn", b =>
                {
                    b.HasOne("SCM.Models.ExtranetVpnMember", "ExtranetVpnMember")
                        .WithMany("ExtranetVpnTenantCommunitiesIn")
                        .HasForeignKey("ExtranetVpnMemberID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.VpnTenantCommunityIn", "VpnTenantCommunityIn")
                        .WithMany("ExtranetVpnTenantCommunitiesIn")
                        .HasForeignKey("VpnTenantCommunityInID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.ExtranetVpnTenantNetworkIn", b =>
                {
                    b.HasOne("SCM.Models.ExtranetVpnMember", "ExtranetVpnMember")
                        .WithMany("ExtranetVpnTenantNetworksIn")
                        .HasForeignKey("ExtranetVpnMemberID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.VpnTenantNetworkIn", "VpnTenantNetworkIn")
                        .WithMany("ExtranetVpnTenantNetworksIn")
                        .HasForeignKey("VpnTenantNetworkInID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.Interface", b =>
                {
                    b.HasOne("SCM.Models.Attachment", "Attachment")
                        .WithMany("Interfaces")
                        .HasForeignKey("AttachmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Device", "Device")
                        .WithMany("Interfaces")
                        .HasForeignKey("DeviceID");
                });

            modelBuilder.Entity("SCM.Models.Location", b =>
                {
                    b.HasOne("SCM.Models.Location", "AlternateLocation")
                        .WithMany()
                        .HasForeignKey("AlternateLocationLocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.SubRegion", "SubRegion")
                        .WithMany("Locations")
                        .HasForeignKey("SubRegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.LogicalInterface", b =>
                {
                    b.HasOne("SCM.Models.RoutingInstance", "RoutingInstance")
                        .WithMany("LogicalInterfaces")
                        .HasForeignKey("RoutingInstanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.MulticastVpnRp", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("MulticastVpnRps")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.Port", b =>
                {
                    b.HasOne("SCM.Models.Device", "Device")
                        .WithMany("Ports")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Interface", "Interface")
                        .WithMany("Ports")
                        .HasForeignKey("InterfaceID");

                    b.HasOne("SCM.Models.PortBandwidth", "PortBandwidth")
                        .WithMany()
                        .HasForeignKey("PortBandwidthID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.PortConnector", "PortConnector")
                        .WithMany("Ports")
                        .HasForeignKey("PortConnectorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.PortPool", "PortPool")
                        .WithMany("Ports")
                        .HasForeignKey("PortPoolID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.PortSfp", "PortSfp")
                        .WithMany("Ports")
                        .HasForeignKey("PortSfpID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.PortStatus", "PortStatus")
                        .WithMany("Ports")
                        .HasForeignKey("PortStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany("Ports")
                        .HasForeignKey("TenantID");
                });

            modelBuilder.Entity("SCM.Models.PortPool", b =>
                {
                    b.HasOne("SCM.Models.PortRole", "PortRole")
                        .WithMany("PortPools")
                        .HasForeignKey("PortRoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.RouteTarget", b =>
                {
                    b.HasOne("SCM.Models.RouteTargetRange", "RouteTargetRange")
                        .WithMany("RouteTargets")
                        .HasForeignKey("RouteTargetRangeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Vpn", "Vpn")
                        .WithMany("RouteTargets")
                        .HasForeignKey("VpnID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.RoutingInstance", b =>
                {
                    b.HasOne("SCM.Models.Device", "Device")
                        .WithMany("RoutingInstances")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.RouteDistinguisherRange", "RouteDistinguisherRange")
                        .WithMany("RoutingInstance")
                        .HasForeignKey("RouteDistinguisherRangeID");

                    b.HasOne("SCM.Models.RoutingInstanceType", "RoutingInstanceType")
                        .WithMany("RoutingInstances")
                        .HasForeignKey("RoutingInstanceTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SCM.Models.SubRegion", b =>
                {
                    b.HasOne("SCM.Models.Region", "Region")
                        .WithMany("SubRegions")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.TenantCommunity", b =>
                {
                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany("TenantCommunities")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.TenantCommunitySet", b =>
                {
                    b.HasOne("SCM.Models.RoutingPolicyMatchOption", "RoutingPolicyMatchOption")
                        .WithMany()
                        .HasForeignKey("RoutingPolicyMatchOptionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.TenantCommunity")
                        .WithMany("TenantCommunitySets")
                        .HasForeignKey("TenantCommunityID");

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.TenantCommunitySetCommunity", b =>
                {
                    b.HasOne("SCM.Models.TenantCommunity", "TenantCommunity")
                        .WithMany()
                        .HasForeignKey("TenantCommunityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.TenantCommunitySet", "TenantCommunitySet")
                        .WithMany("TenantCommunitySetCommunities")
                        .HasForeignKey("TenantCommunitySetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.TenantMulticastGroup", b =>
                {
                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany("TenantMulticastGroups")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.TenantNetwork", b =>
                {
                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany("TenantNetworks")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.Vif", b =>
                {
                    b.HasOne("SCM.Models.Attachment", "Attachment")
                        .WithMany("Vifs")
                        .HasForeignKey("AttachmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.ContractBandwidthPool", "ContractBandwidthPool")
                        .WithMany("Vifs")
                        .HasForeignKey("ContractBandwidthPoolID");

                    b.HasOne("SCM.Models.RoutingInstance", "RoutingInstance")
                        .WithMany("Vifs")
                        .HasForeignKey("RoutingInstanceID");

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany("Vifs")
                        .HasForeignKey("TenantID");

                    b.HasOne("SCM.Models.VifRole", "VifRole")
                        .WithMany()
                        .HasForeignKey("VifRoleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.VifRole")
                        .WithMany("Vifs")
                        .HasForeignKey("VifRoleID1");

                    b.HasOne("SCM.Models.VlanTagRange", "VlanTagRange")
                        .WithMany("Vifs")
                        .HasForeignKey("VlanTagRangeID");
                });

            modelBuilder.Entity("SCM.Models.VifRole", b =>
                {
                    b.HasOne("SCM.Models.AttachmentRole", "AttachmentRole")
                        .WithMany("VifRoles")
                        .HasForeignKey("AttachmentRoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.RoutingInstanceType", "RoutingInstanceType")
                        .WithMany()
                        .HasForeignKey("RoutingInstanceTypeID");
                });

            modelBuilder.Entity("SCM.Models.Vlan", b =>
                {
                    b.HasOne("SCM.Models.Interface", "Interface")
                        .WithMany("Vlans")
                        .HasForeignKey("InterfaceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Vif", "Vif")
                        .WithMany("Vlans")
                        .HasForeignKey("VifID");
                });

            modelBuilder.Entity("SCM.Models.Vpn", b =>
                {
                    b.HasOne("SCM.Models.AddressFamily", "AddressFamily")
                        .WithMany()
                        .HasForeignKey("AddressFamilyID");

                    b.HasOne("SCM.Models.MulticastVpnDirectionType", "MulticastVpnDirectionType")
                        .WithMany()
                        .HasForeignKey("MulticastVpnDirectionTypeID");

                    b.HasOne("SCM.Models.MulticastVpnServiceType", "MulticastVpnServiceType")
                        .WithMany()
                        .HasForeignKey("MulticastVpnServiceTypeID");

                    b.HasOne("SCM.Models.Plane", "Plane")
                        .WithMany()
                        .HasForeignKey("PlaneID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.VpnTenancyType", "VpnTenancyType")
                        .WithMany("Vpns")
                        .HasForeignKey("VpnTenancyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.VpnTopologyType", "VpnTopologyType")
                        .WithMany("Vpns")
                        .HasForeignKey("VpnTopologyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnAttachmentSet", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnAttachmentSets")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.Vpn", "Vpn")
                        .WithMany("VpnAttachmentSets")
                        .HasForeignKey("VpnID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTenantCommunityIn", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnTenantCommunitiesIn")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.BgpPeer", "BgpPeer")
                        .WithMany("VpnTenantCommunitiesIn")
                        .HasForeignKey("BgpPeerID");

                    b.HasOne("SCM.Models.TenantCommunity", "TenantCommunity")
                        .WithMany("VpnTenantCommunitiesIn")
                        .HasForeignKey("TenantCommunityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTenantCommunityOut", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnTenantCommunitiesOut")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.BgpPeer", "BgpPeer")
                        .WithMany("VpnTenantCommunitiesOut")
                        .HasForeignKey("BgpPeerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.TenantCommunity", "TenantCommunity")
                        .WithMany("VpnTenantCommunitiesOut")
                        .HasForeignKey("TenantCommunityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTenantCommunityRoutingInstance", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnTenantCommunitiesRoutingInstance")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.RoutingInstance", "RoutingInstance")
                        .WithMany("VpnTenantCommunitiesRoutingInstance")
                        .HasForeignKey("RoutingInstanceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.TenantCommunity", "TenantCommunity")
                        .WithMany("VpnTenantCommunitiesRoutingInstance")
                        .HasForeignKey("TenantCommunityID");

                    b.HasOne("SCM.Models.TenantCommunitySet", "TenantCommunitySet")
                        .WithMany()
                        .HasForeignKey("TenantCommunitySetID");
                });

            modelBuilder.Entity("SCM.Models.VpnTenantMulticastGroup", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnTenantMulticastGroups")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.MulticastGeographicalScope", "MulticastGeographicalScope")
                        .WithMany("VpnTenantMulticastGroups")
                        .HasForeignKey("MulticastGeographicalScopeID");

                    b.HasOne("SCM.Models.MulticastVpnRp", "MulticastVpnRp")
                        .WithMany("VpnTenantMulticastGroups")
                        .HasForeignKey("MulticastVpnRpID");

                    b.HasOne("SCM.Models.TenantMulticastGroup", "TenantMulticastGroup")
                        .WithMany("VpnTenantMulticastGroups")
                        .HasForeignKey("TenantMulticastGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkCommunityIn", b =>
                {
                    b.HasOne("SCM.Models.TenantCommunity", "TenantCommunity")
                        .WithMany()
                        .HasForeignKey("TenantCommunityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCM.Models.TenantCommunity")
                        .WithMany("VpnTenantNetworkCommunitiesIn")
                        .HasForeignKey("TenantCommunityID1");

                    b.HasOne("SCM.Models.VpnTenantNetworkIn", "VpnTenantNetworkIn")
                        .WithMany("VpnTenantNetworkCommunitiesIn")
                        .HasForeignKey("VpnTenantNetworkInID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkIn", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnTenantNetworksIn")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.BgpPeer", "BgpPeer")
                        .WithMany("VpnTenantNetworksIn")
                        .HasForeignKey("BgpPeerID");

                    b.HasOne("SCM.Models.TenantNetwork", "TenantNetwork")
                        .WithMany("VpnTenantNetworksIn")
                        .HasForeignKey("TenantNetworkID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkOut", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnTenantNetworksOut")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.BgpPeer", "BgpPeer")
                        .WithMany("VpnTenantNetworksOut")
                        .HasForeignKey("BgpPeerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.TenantNetwork", "TenantNetwork")
                        .WithMany("VpnTenantNetworksOut")
                        .HasForeignKey("TenantNetworkID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkRoutingInstance", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnTenantNetworksRoutingInstance")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.RoutingInstance", "RoutingInstance")
                        .WithMany("VpnTenantNetworksRoutingInstance")
                        .HasForeignKey("RoutingInstanceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.TenantNetwork", "TenantNetwork")
                        .WithMany("VpnTenantNetworksRoutingInstance")
                        .HasForeignKey("TenantNetworkID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTenantNetworkStaticRouteRoutingInstance", b =>
                {
                    b.HasOne("SCM.Models.AttachmentSet", "AttachmentSet")
                        .WithMany("VpnTenantNetworkStaticRoutesRoutingInstance")
                        .HasForeignKey("AttachmentSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCM.Models.RoutingInstance", "RoutingInstance")
                        .WithMany("VpnTenantNetworkStaticRoutesRoutingInstance")
                        .HasForeignKey("RoutingInstanceID");

                    b.HasOne("SCM.Models.TenantNetwork", "TenantNetwork")
                        .WithMany()
                        .HasForeignKey("TenantNetworkID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCM.Models.VpnTopologyType", b =>
                {
                    b.HasOne("SCM.Models.VpnProtocolType", "VpnProtocolType")
                        .WithMany("VpnTopologyTypes")
                        .HasForeignKey("VpnProtocolTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
