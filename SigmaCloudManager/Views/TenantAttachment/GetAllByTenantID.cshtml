@model IEnumerable<SCM.Models.ViewModels.AttachmentViewModel>
@inject IOptions<ApplicationConfiguration> ApplicationConfiguration
@using Microsoft.Extensions.Options;
@using SCM;

@{
    ViewData["Title"] = "Tenant Attachments";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/Home">Home</a></li>
    <li class="breadcrumb-item"><a href="/Tenant/GetAll">Tenants</a></li>
    <li class="breadcrumb-item active">Tenant Attachments - [@ViewBag.Tenant.Name]</li>
</ol>

@if (ApplicationConfiguration.Value.EnableNetworkSync)
{

    // Show Network messages if Network Sync functionality is enabled
    await Html.RenderPartialAsync("_NetworkMessagingPartial");
}

@{await Html.RenderPartialAsync("_MessagingPartial");}
@{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}

@if (ViewData["SuccessMessage"] != null)
{
    @using (Html.BeginForm("ClearCreatedAlerts", "TenantAttachment", FormMethod.Post))
    {
        <input type="hidden" name="id" value="@ViewBag.Tenant.TenantID" />
        <p>
            <button type="submit" class="btn btn-info btn-default ">
                <span class="glyphicon glyphicon-minus-sign"></span>&nbsp;Clear Created Alerts
            </button>
        </p>
    }
}
@if (ApplicationConfiguration.Value.EnableNetworkSync)
{
    @if (ViewData["NetworkWarningMessage"] != null)
    {
        @using (Html.BeginForm("ClearRequiresSyncAlerts", "TenantAttachment", FormMethod.Post))
        {
            <input type="hidden" name="id" value="@ViewBag.Tenant.TenantID" />
            <p>
                <button type="submit" class="btn btn-info btn-default ">
                    <span class="glyphicon glyphicon-minus-sign"></span>&nbsp;Clear Requires Sync Alerts
                </button>
            </p>
        }
    }
}
<h2>Attachments for Tenant '@ViewBag.Tenant.Name'</h2>

<p>
    <a asp-action="CreateProviderDomainAttachment" asp-route-id="@ViewBag.Tenant.TenantID"
       data-toggle="tooltip" data-placement="right"
       title="Create an Attachment to connect a Provider Domain to a Tenant Domain.
       For example, create an Attachment on a PE to connect the PE to a data-center.">Create New Provider Domain Attachment</a>
</p>
<p>
    <a asp-action="CreateTenantDomainAttachment" asp-route-id="@ViewBag.Tenant.TenantID"
       data-toggle="tooltip" data-placement="right"
       title="Create an Attachment within the Tenant Domain.
       For example, create an Attachment on a CE to connect the CE to a PE in the Provider Domain.">Create New Tenant Domain Attachment</a>
</p>

<table class="table" id="attachmentsTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Device)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AttachmentRole)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsBundle)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsMultiPort)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsTagged)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsLayer3)
            </th>
            @if (ApplicationConfiguration.Value.EnableNetworkSync)
            {
                <th>
                    @Html.DisplayNameFor(model => model.RequiresSync)
                </th>
            }
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Device.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AttachmentRole.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsBundle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsMultiPort)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsTagged)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsLayer3)
                </td>
                @if (ApplicationConfiguration.Value.EnableNetworkSync)
                {
                    if (item.AttachmentRole.RequireSyncToNetwork)
                    {
                    <td id="requiresSync_@item.AttachmentID" class="checkbox-insync">
                        @Html.DisplayFor(modelItem => item.RequiresSync)
                    </td>
                    <td>
                        <button type="button" id="Sync_@item.AttachmentID" data-item='{"id" : "@item.AttachmentID"}' class="btn btn-info btn-danger btn-margin-2 btn-sync">
                            <span class="glyphicon glyphicon-refresh"></span>&nbsp;Sync
                        </button>
                        <button type="button" id="CheckSync_@item.AttachmentID" data-item='{"id" : "@item.AttachmentID"}' class="btn btn-info btn-warning btn-margin-2 btn-checksync">
                            <span class="glyphicon glyphicon-check"></span>&nbsp;Check Sync
                        </button>
                    </td>
                    <td class="row-spinner spinner-element" id="syncStatus_@item.AttachmentID"></td>
                    }

                    else
                    {
                    <td></td>
                    <td></td>
                    <td></td>
                    }
                }

                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.AttachmentID }) |
                    @Html.ActionLink("Details", "Details", new { id = item.AttachmentID }) |
                    @Html.ActionLink("Delete", "Delete", new { attachmentID = item.AttachmentID }) |
                    @Html.ActionLink("Interfaces", "GetAllInterfacesByAttachmentID", new { id = item.AttachmentID })
                    @if (item.IsLayer3)
                    {
                        if (item.RoutingInstance != null)
                        {
                            <span>|</span> @Html.ActionLink("BGP Peers", "GetAllByRoutingInstanceID", "AttachmentBgpPeer", new { routingInstanceID = item.RoutingInstance.RoutingInstanceID, attachmentID = item.AttachmentID })
                        }
                    }
                    @if (item.IsTagged)
                    {
                        <span>|</span> @Html.ActionLink("VIFs", "GetAllByAttachmentID", "TenantVif", new { ID = item.AttachmentID })
                    }
                    else
                    {
                        <span>|</span> @Html.ActionLink("VRF", "RoutingInstanceDetails", new { ID = item.AttachmentID })
                        <span>|</span> @Html.ActionLink("Logical Interfaces", "GetAllLogicalInterfacesByAttachmentID", new { attachmentID = item.AttachmentID })
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<input type="hidden" name="TenantID" id="TenantID" value="@ViewBag.Tenant.TenantID" />

@if (ApplicationConfiguration.Value.EnableNetworkSync)
{
    <button type="button" id="CheckSync" class="btn btn-info btn-warning">
        <span class="glyphicon glyphicon-check"></span>&nbsp;Check Sync All
    </button><span>|</span>
    <button type="button" id="Sync" class="btn btn-info btn-danger">
        <span class="glyphicon glyphicon-refresh"></span>&nbsp;Sync All
    </button>
}
<a asp-controller="Tenant" asp-action="GetAll">Back to Tenants</a>


@section Scripts {
    <script type="text/javascript">

        (function ($) {

            // Initialise all tool-tips

            $('[data-toggle="tooltip"]').tooltip();

        }(jQuery));

    </script>


    @if (ApplicationConfiguration.Value.EnableNetworkSync)
    {

        <script type="text/javascript">

            (function ($) {

                var $tenantID = $('#TenantID'),
                    tenantVal = $tenantID[0].value;

                SCM.Utilities.connectToNetworkSyncHub({
                    checkSyncUrl: '/api/v1/attachments/{id}/checksync',
                    syncUrl: '/api/v1/attachments/{id}/sync',
                    checkSyncAllUrl: '/api/v1/tenants/' + tenantVal + '/attachments/checksync',
                    syncAllUrl: '/api/v1/tenants/' + tenantVal + '/attachments/sync',
                    contextVal: tenantVal,
                    groupName: 'TenantAttachment_' + tenantVal,
                    itemKey: 'AttachmentID'
                });

            }(jQuery));

        </script>
    }
}