@model IEnumerable<SCM.Models.ViewModels.VifViewModel>
@inject IOptions<ApplicationConfiguration> ApplicationConfiguration
@using Microsoft.Extensions.Options;
@using SCM;

@{
    ViewData["Title"] = "VIFs";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/Home">Home</a></li>
    <li class="breadcrumb-item"><a href="/Tenant/GetAll">Tenants</a></li>
    <li class="breadcrumb-item"><a href="/TenantAttachment/GetAllByTenantID?tenantID=@ViewBag.Attachment.TenantID">Tenant Attachments - [@ViewBag.Attachment.Tenant.Name]</a></li>
    <li class="breadcrumb-item active">Tenant VIFs - [@ViewBag.Attachment.Name]</li>
</ol>

@if (ApplicationConfiguration.Value.EnableNetworkSync)
{

    // Show Network messages if Network Sync functionality is enabled
    await Html.RenderPartialAsync("_NetworkMessagingPartial");
}

@{await Html.RenderPartialAsync("_MessagingPartial");}
@{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}

@if (ViewData["SuccessMessage"] != null)
{
    @using (Html.BeginForm("ClearCreatedAlerts", "TenantVif", FormMethod.Post))
    {
        <input type="hidden" name="id" value="@ViewBag.Attachment.AttachmentID" />
        <p>
            <button type="submit" class="btn btn-info btn-default ">
                <span class="glyphicon glyphicon-minus-sign"></span>&nbsp;Clear Created Alerts
            </button>
        </p>
    }
}
@if (ApplicationConfiguration.Value.EnableNetworkSync)
{
    @if (ViewData["NetworkWarningMessage"] != null)
    {
        @using (Html.BeginForm("ClearRequiresSyncAlerts", "TenantVif", FormMethod.Post))
        {
            <input type="hidden" name="id" value="@ViewBag.Attachment.AttachmentID" />
            <p>
                <button type="submit" class="btn btn-info btn-default ">
                    <span class="glyphicon glyphicon-minus-sign"></span>&nbsp;Clear Requires Sync Alerts
                </button>
            </p>
        }
    }
}
<h2>Tenant VIFs for Attachment '@ViewBag.Attachment.Name'</h2>

<p>
    <a asp-action="Create" asp-route-id="@ViewBag.Attachment.AttachmentID" asp-route-attachmentIsMultiPort="@ViewBag.Attachment.IsMultiPort"
       asp-route-tenantID="@ViewBag.Attachment.TenantID">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tenant)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VlanTag)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RoutingInstance)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ContractBandwidthPool.ContractBandwidth)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsSharedContractBandwidthPool)
            </th>
            @if (ApplicationConfiguration.Value.EnableNetworkSync)
            {
                <th>
                    @Html.DisplayNameFor(model => model.RequiresSync)
                </th>
            }
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Tenant.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.VlanTag)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RoutingInstance.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ContractBandwidthPool.ContractBandwidth.BandwidthMbps)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsSharedContractBandwidthPool)
                </td>
                @if (ApplicationConfiguration.Value.EnableNetworkSync)
                {
                    if (item.VifRole.RequireSyncToNetwork)
                    {
                    <td id="requiresSync_@item.VifID" class="checkbox-insync">
                        @Html.DisplayFor(modelItem => item.RequiresSync)
                    </td>
                    <td>
                        <button type="button" id="Sync_@item.VifID" data-item='{"id" : "@item.VifID"}' class="btn btn-info btn-danger btn-sync btn-margin-2">
                            <span class="glyphicon glyphicon-refresh"></span>&nbsp;Sync
                        </button>
                        <button type="button" id="CheckSync_@item.VifID" data-item='{"id" : "@item.VifID"}' class="btn btn-info btn-warning btn-checksync btn-margin-2">
                            <span class="glyphicon glyphicon-check"></span>&nbsp;Check Sync
                        </button>
                    </td>
                    <td class="row-spinner spinner-element" id="syncStatus_@item.VifID"></td>
                    }
                    else
                    {
                    <td></td>
                    <td></td>
                    <td></td>
                    }
                }
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.VifID, attachmentIsMultiPort = ViewBag.Attachment.IsMultiPort }) |
                    @Html.ActionLink("Details", "Details", new { id = item.VifID, attachmentIsMultiPort = ViewBag.Attachment.IsMultiPort }) |
                    @Html.ActionLink("Delete", "Delete", new
                    {
                        ID = item.VifID,
                        attachmentID = ViewBag.Attachment.AttachmentID,
                        tenantID = item.TenantID
                    })
                    <span>|</span> <a asp-action="GetAllVlansByVifID" asp-route-id="@item.VifID">Vlans</a>
                    @if (item.IsLayer3)
                    {
                        <span>|</span> @Html.ActionLink("BGP Peers", "GetAllByRoutingInstanceID", "VifBgpPeer", new { routingInstanceID = item.RoutingInstance.RoutingInstanceID, vifID = item.VifID })
                        <span>|</span> @Html.ActionLink("Logical Interfaces", "GetAllLogicalInterfacesByVifID", "TenantVif", new { vifID = item.VifID })
                    }
                    <span>|</span> @Html.ActionLink("VRF", "RoutingInstanceDetails", new { ID = item.VifID })
                </td>
            </tr>
        }
    </tbody>
</table>
<input type="hidden" id="AttachmentID" name="AttachmentID" value="@ViewBag.Attachment.AttachmentID" />

@if (ApplicationConfiguration.Value.EnableNetworkSync)
{

    <button type="button" id="CheckSync" class="btn btn-info btn-warning">
        <span class="glyphicon glyphicon-check"></span>&nbsp;Check Sync All
    </button><span>|</span>
    <button type="button" id="Sync" class="btn btn-info btn-danger">
        <span class="glyphicon glyphicon-refresh"></span>&nbsp;Sync All
    </button><span>|</span>
}
<a asp-controller="TenantAttachment" asp-action="GetAllByTenantID" asp-route-tenantID="@ViewBag.Attachment.TenantID">Back to Tenant Attachments</a>

@if (ApplicationConfiguration.Value.EnableNetworkSync)
{
    @section Scripts {

        <script type="text/javascript">

            (function ($) {

                var $attachmentID = $('#AttachmentID'),
                    attachmentVal = $attachmentID[0].value;

                SCM.Utilities.connectToNetworkSyncHub({
                    checkSyncUrl: '/api/v1/vifs/{id}/checksync',
                    syncUrl: '/api/v1/vifs/{id}/sync',
                    checkSyncAllUrl: '/api/v1/attachments/' + attachmentVal + '/vifs/checksync',
                    syncAllUrl: '/api/v1/attachments/' + attachmentVal + '/vifs/sync',
                    groupName: 'Attachment_' + attachmentVal,
                    itemKey: 'VifID'
                });

            }(jQuery));

        </script>
    }
}