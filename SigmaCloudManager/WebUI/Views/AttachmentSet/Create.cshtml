@using Mind.WebUI.Models;
@model Mind.WebUI.Models.AttachmentSetRequestViewModel

@{
    ViewData["Title"] = "Create Attachment Set";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/Home">Home</a></li>
    <li class="breadcrumb-item"><a href="/Tenant/GetAll">Tenants</a></li>
    <li class="breadcrumb-item"><a href="/AttachmentSet/GetAllByTenantID?tenantID=@ViewBag.Tenant.TenantId">Attachment Sets - [@ViewBag.Tenant.Name]</a></li>
    <li class="breadcrumb-item active">Create</li>
</ol>

<h2>Create an Attachment Set for Tenant '@ViewBag.Tenant.Name'</h2>

<form id="createForm" asp-action="Create">
    <hr />
    @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}
    <input type="hidden" asp-for="TenantId" value="@ViewBag.Tenant.TenantId" />
    <div id="createAttachmentSetWizard">
        <h3>Attachment Redundancy</h3>
        <section id="attachment-redundancy">
            <br />
            <div class="alert alert-info" role="alert">
                Select a redundancy option.
            </div>
            <div class="form-group row">
                <label asp-for="AttachmentRedundancy" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="AttachmentRedundancy" class="form-control" asp-items="ViewBag.AttachmentRedundancy">
                        <option value="">-- Select Redundancy --</option>
                    </select>
                    <span asp-validation-for="AttachmentRedundancy" class="text-danger"></span>
                </div>
            </div>
        </section>
        <h3>Protocol Layer Option</h3>
        <section id="protocol-layer">
            <br />
            <div class="alert alert-info" role="alert">
                Create a layer 2 attachment set for inter-connecting tenant domains via an Ethernet VPN.
                Create a layer 3 attachment set for inter-connecting tenant domains with an IP VPN.
            </div>
            <div class="form-group row">
                <label class="col-form-label col-sm-2" asp-for="IsLayer3"></label>
                <div class="col-sm-10">
                    <div class="custom-control custom-checkbox">
                        <input class="form-check-input custom-control-input" type="checkbox" asp-for="IsLayer3" data-toggle="tooltip"
                               data-placement="right" title="Request a layer 3 attachment set">
                        <label class="form-check-label custom-control-label" for="IsLayer3"></label>
                    </div>
                </div>
            </div>
        </section>
        <h3>Geographic Region</h3>
        <section id="geographic-region">
            <br />
            <div class="alert alert-info" role="alert">
                Select a region for the attachment set. When you add routing instances to the attachment set they must
                all belong to the designated region.
            </div>
            <div class="form-group row">
                <label asp-for="Region" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="Region" class="form-control" asp-items="ViewBag.Region">
                        <option value="">-- Select Region --</option>
                    </select>
                    <span asp-validation-for="Region" class="text-danger"></span>
                </div>
            </div>
            <div class="alert alert-info" role="alert">
                For attachment sets with silver or gold level attachment redundancy you must select a sub-region option.
            </div>
            <div class="form-group row">
                <label asp-for="SubRegion" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="SubRegion" class="form-control" asp-items="ViewBag.SubRegion">
                        <option value="">-- Optionally Select Sub-Region --</option>
                    </select>
                    <span asp-validation-for="SubRegion" class="text-danger"></span>
                </div>
            </div>
        </section>
        <!-- View component for displaying the routing instances which are bound to the attachment set -->
        @await Component.InvokeAsync("AttachmentSetRoutingInstances", new
        {
            attachmentSetRoutingInstanceRequests = Model?.AttachmentSetRoutingInstances
        })
        <!-- View component for displaying the BGP IP Network Inbound Policy -->
        @await Component.InvokeAsync("BgpIpNetworkInboundPolicy", new
        {
            bgpIpNetworkInboundPolicy = Model?.BgpIpNetworkInboundPolicy
        })

        <!-- View component for displaying the BGP IP Network Outbound Policy -->

    </div>
</form>
<div class="modal fade" id="duplicateItemModal" tabindex="-1" role="dialog" aria-labelledby="duplicateItemModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="duplicateItemModalLabel">Routing Instance Already Exists</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                The selected routing instance is already bound to the attachment set
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div>
    <a asp-action="GetAllByTenantID" asp-route-tenantID="@ViewBag.Tenant.TenantId">Back to Attachment Sets List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">

        (function ($) {

            var $form = $("#createForm"),
                $wizard = $("#createAttachmentSetWizard");

            //Create wizard
            $wizard.steps({
                headerTag: "h3",
                bodyTag: "section",
                transitionEffect: "fade",
                onStepChanging: function (event, currentIndex, newIndex) {

                    // Allways allow previous action even if the current form is not valid!
                    if (currentIndex > newIndex) {
                        return true;
                    }

                    $form.validate().settings.ignore = ":disabled,:hidden";
                    return $form.valid();
                },
                onFinishing: function (event, currentIndex) {
                    $form.validate().settings.ignore = ":disabled";
                    return $form.valid();
                },
                onFinished: function (event, currentIndex) {

                    $form.submit();
                }
            });

            var $region = $('#Region'),
                region = $region[0],
                $subregion = $('#SubRegion'),
                subregion = $subregion[0],
                $routingInstance = $('#RoutingInstance'),
                routingInstance = $routingInstance[0],
                $tenantId = $('#TenantId'),
                tenantId = $tenantId[0];

            // Initialise all tool-tips
            $('[data-toggle="tooltip"]').tooltip();

            if (region.value === null || region.value === "") {

                subregion.disabled = true;
                routingInstance.disabled = true;
            }

            $region.on('change', function (e) {

                if (region.value === null || region.value === "") {

                    subregion.selectedIndex = 0;
                    subregion.disabled = true;
                    routingInstance.selectedIndex = 0;
                    $routingInstance.empty();
                    routingInstance.disabled = true;
                }
                else {

                    routingInstance.selectedIndex = 0;
                    routingInstance.disabled = true;

                    Mind.Utilities.populateElement($subregion, "SubRegions", { region: region.value });
                    Mind.Utilities.populateElement($routingInstance, "RoutingInstances", { tenantId: tenantId.value, region: region.value });
                }
            });

            $subregion.on('change', function (e) {

                if (subregion.value === null || subregion.value === "") {

                    Mind.Utilities.populateElement($routingInstance, "RoutingInstances", { tenantId: tenantId.value, region: region.value });
                }
                else {

                    Mind.Utilities.populateElement($routingInstance, "RoutingInstances", { tenantId: tenantId.value, region: region.value, subRegion: subregion.value });
                }
            });

        }(jQuery));

    </script>

    @{await Html.RenderPartialAsync("_AttachmentSetScriptsPartial");}
}