@using Mind.WebUI.Models;
@model Mind.WebUI.Models.InfrastructureVifUpdateViewModel
@{
    ViewData["Title"] = "Edit VIF";
}
<div id="crumbs">
    <ul>
        <li><a href="/Home"><i class="fa fa-home" aria-hidden="true"></i></a></li>
        <li><a href="/InfrastructureServices"><i class="fa" aria-hidden="true"></i>Infrastructure Services</a></li>
        <li><a href="/InfrastructureDevice/GetAll"><i class="fa" aria-hidden="true"></i>Infrastructure Devices</a></li>
        <li><a href="/InfrastructureAttachment/GetAllByDeviceID?deviceId=@ViewBag.Device.DeviceId"><i class="fa" aria-hidden="true"></i>Infrastructure Attachments - [@ViewBag.Device.Name]</a></li>
        <li><a href="/InfrastructureVif/GetAllByAttachmentId?attachmentId=@ViewBag.Attachment.AttachmentId"><i class="fa active" aria-hidden="true"></i>VIFs - [@ViewBag.Attachment.Name]</a></li>
        <li><a href="#"><i class="fa active" aria-hidden="true"></i>Edit - [@Model.Name]</a></li>
    </ul>
</div>
<h2>Edit VIF '@Model.Name'</h2>
<form id="form" asp-action="Edit">
    <div class="form-horizontal">
        <hr />

        @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}

        <input type="hidden" asp-for="VifId" />
        <input type="hidden" asp-for="RowVersion" />
        <input type="hidden" asp-for="Name" />

        <div id="vifWizard">

            <h3>IP Address</h3>
            <section id="ip-addressing">
                <br />
                <div id="ipAddressingComponent">
                    @await Component.InvokeAsync("VifIpAddressing", new
                    {
                        vifId = Model.VifId,
                        currentModel = Model.Ipv4Addresses
                    })
                </div>
            </section>

            <h3>Contract Bandwidth</h3>
            <section id="ip-addressing">
                <div id="contractBandwidthPoolComponent">
                    @await Component.InvokeAsync("ContractBandwidthPool", new ContractBandwidthComponentViewModel
                    {
                        VifId = Model.VifId
                    })
                </div>
            </section>

            @if (!string.IsNullOrEmpty(Model.ExistingRoutingInstanceName))
            {
                <h3>Routing Instance</h3>
                <section id="routing-instance">
                    <!-- View component for selecting an existing routing instance or to create a new routing instance
                         for the vif -->
                    @await Component.InvokeAsync("RoutingInstanceSelector", new RoutingInstanceSelectorComponentViewModel
                    {
                        TenantId = Model.RoutingInstance.TenantId,
                        DeviceId = Model.RoutingInstance.DeviceId,
                        CreateNewRoutingInstance = Model.CreateNewRoutingInstance,
                        ExistingRoutingInstanceName = Model.ExistingRoutingInstanceName
                    })
                </section>
            }
            <h3>BGP Peers</h3>
            <section>
                <div id="bgpPeersComponent">
                    <!-- View component for creating/updating BGP peers -->
                    @await Component.InvokeAsync("RoutingInstanceBgpPeers", new BgpPeersComponentViewModel
                    {
                        VifId = Model.VifId,
                        BgpPeers = Model.RoutingInstance?.BgpPeers
                    })
                </div>
            </section>

            <h3>MTU Options</h3>
            <section id="mtu-options">
                <!-- View component for setting MTU options -->
                @await Component.InvokeAsync("MtuOptions", new MtuOptionsComponentViewModel
                {
                    UseJumboMtu = Model.UseJumboMtu
                })
            </section>

        </div>
    </div>
</form>

<div>
    <a mind-nav-link-back-btn="true" asp-action="GetAllByAttachmentID" asp-route-attachmentID="@ViewBag.Attachment.AttachmentId">Back to VIFs</a>
</div>

<!--Component for a form allowing the user to enter data to create or edit a BGP peer
    The component HTML must be placed outside of other page elements to avoid nesting because browser will
    remove the <form> element from the component otherwise -->
@await Component.InvokeAsync("BgpPeerForm")

<!-- Loading Spinner partial view -->
@{await Html.RenderPartialAsync("_LoadingSpinnerPartial");}

@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @{await Html.RenderPartialAsync("_InfrastructureVifEditScriptsPartial");}

}