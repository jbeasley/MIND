@using Mind.WebUI.Models;
@model Mind.WebUI.Models.InfrastructureVifRequestViewModel
@{
    ViewData["Title"] = "Create VIF";
}
<div id="crumbs">
    <ul>
        <li><a href="/Home"><i class="fa fa-home" aria-hidden="true"></i></a></li>
        <li><a href="/InfrastructureServices"><i class="fa" aria-hidden="true"></i>Infrastructure Services</a></li>
        <li><a href="/InfrastructureDevice/GetAll"><i class="fa" aria-hidden="true"></i>Infrastructure Devices</a></li>
        <li><a href="/InfrastructureAttachment/GetAllByDeviceID?deviceId=@ViewBag.Attachment.DeviceId"><i class="fa" aria-hidden="true"></i>Infrastructure Attachments - [@ViewBag.Attachment.InfrastructureDeviceName]</a></li>
        <li><a href="/InfrastructureVif/GetAllByAttachmentId?attachmentId=@ViewBag.Attachment.AttachmentId"><i class="fa" aria-hidden="true"></i>VIFs - [@ViewBag.Attachment.Name]</a></li>
        <li><a href="#"><i class="fa active" aria-hidden="true"></i>Create</a></li>
    </ul>
</div>
<h2>Create a VIF for Attachment '@ViewBag.Attachment.Name'</h2>
<form id="form" asp-action="Create">
    <hr />

    @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}

    <input type="hidden" asp-for="AttachmentId" value="@ViewBag.Attachment.AttachmentId" />
    <input type="hidden" asp-for="AttachmentRoleName" value="@ViewBag.Attachment.AttachmentRoleName" />

    <!-- The following input is used by the create.js and edit.js scripts to prevent the stage or sync modal form from being
     displayed when the user finishes the wizard -->
    <input type="hidden" id="showStageOrSyncModal" value="false" />

    <div id="vifWizard">

        <h3>Role</h3>
        <section id="role">
            @await Component.InvokeAsync("VifRole", new VifRoleComponentViewModel
            {
                AttachmentRoleId = ViewBag.Attachment.AttachmentRoleId,
                VifRoleName = Model?.VifRoleName
            })
        </section>

        <h3>Vlan Tag</h3>
        <section id="vlan-tag">
            <br />
            <div mind-alert="info" message="
                Optionally enter a desired vlan tag for the vif, or leave blank to have one automatically assigned.">
            </div>
            <div class="form-group row">
                <label asp-for="RequestedVlanTag" class="col-sm-2 col-form-label"> </label>
                <div class="col-sm-10">
                    <input asp-for="RequestedVlanTag" class="form-control" data-toggle="tooltip" data-placement="right" title="Request a specific vlan tag (between 1 and 4094). If you leave this option
                   blank then a vlan tag will be automatically allocated for you." />
                    <span asp-validation-for="RequestedVlanTag" class="text-danger"></span>
                </div>
            </div>
        </section>

        <h3>IP Addressing</h3>
        <section id="ip-addressing">
            <div id="ipAddressingComponent">
                @await Component.InvokeAsync("VifIpAddressing", new
                {
                    attachmentId = Model?.AttachmentId,
                    currentModel = Model?.Ipv4Addresses
                })
            </div>
        </section>

        <h3>Contract Bandwidth</h3>
        <section id="ip-addressing">
            <div id="contractBandwidthPoolComponent">
                @await Component.InvokeAsync("ContractBandwidthPool", new ContractBandwidthComponentViewModel
                {
                    AttachmentRoleName = Model?.AttachmentRoleName,
                    VifRoleName = Model?.VifRoleName,
                    ContractBandwidthPool = new ContractBandwidthPoolViewModel
                    {
                        ContractBandwidthMbps = Model?.ContractBandwidthMbps,
                        TrustReceivedCosAndDscp = Model != null ? Model.TrustReceivedCosAndDscp.GetValueOrDefault() : false
                    }
                })
            </div>
        </section>

        <h3>BGP Peers</h3>
        <section id="bgp-peers">
            <div id="bgpPeersComponent">
                <!-- View component for creating BGP peers -->
                @await Component.InvokeAsync("RoutingInstanceBgpPeers", new BgpPeersComponentViewModel
                {
                    AttachmentRoleName = Model?.AttachmentRoleName,
                    VifRoleName = Model?.VifRoleName,
                    BgpPeers = Model?.RoutingInstance?.BgpPeers
                })
            </div>
        </section>

    </div>
</form>

<div>
    <a mind-nav-link-back-btn="true" asp-action="GetAllByAttachmentID" asp-route-attachmentId="@ViewBag.Attachment.AttachmentId">Back to VIFs</a>
</div>

<!--Component for a form allowing the user to enter data to create or edit a BGP peer
    The component HTML must be placed outside of other page elements to avoid nesting because the browser will
    remove the <form> element from the component otherwise -->
@await Component.InvokeAsync("BgpPeerForm")

<!-- Loading Spinner partial view -->
@{await Html.RenderPartialAsync("_LoadingSpinnerPartial");}

@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @{await Html.RenderPartialAsync("_InfrastructureVifCreateScriptsPartial");}

}