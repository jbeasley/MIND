@using Mind.WebUI.Models;
@model Mind.WebUI.Models.ProviderDomainAttachmentRequestViewModel

@{
    ViewData["Title"] = "Create Attachment";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/Home">Home</a></li>
    <li class="breadcrumb-item"><a href="/Tenant/GetAll">Tenants</a></li>
    <li class="breadcrumb-item"><a href="/ProviderDomainAttachment/GetAllByTenantID?tenantID=@ViewBag.Tenant.TenantId">Provider Domain Attachments - [@ViewBag.Tenant.Name]</a></li>
    <li class="breadcrumb-item active">Create</li>
</ol>

<h2>Create an Attachment to the Provider Domain for Tenant '@ViewBag.Tenant.Name'</h2>

<form id="createForm" asp-action="Create">
    <hr />
    @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}
    <input type="hidden" asp-for="TenantId" value="@ViewBag.Tenant.TenantId" />
    <div id="createAttachmentWizard">
        <h3>Location</h3>
        <section id="location">
            <br />
            <div class="alert alert-info" role="alert">
                Select location where you wish to attach to the Sigma network.
            </div>
            <div class="form-group row">
                <label asp-for="RegionId" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="RegionId" class="form-control" asp-items="ViewBag.Region">
                        <option value="">-- Select Region --</option>
                    </select>
                    <span asp-validation-for="RegionId" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <label asp-for="SubRegionId" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="SubRegionId" class="form-control" asp-items="ViewBag.SubRegion">
                        <option value="">-- Select Sub-Region --</option>
                    </select>
                    <span asp-validation-for="SubRegionId" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <label asp-for="LocationName" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="LocationName" class="form-control" asp-items="ViewBag.Location">
                        <option value="">-- Select Location --</option>
                    </select>
                    <span asp-validation-for="LocationName" class="text-danger"></span>
                </div>
            </div>
        </section>
        <h3>Bundle/Multiport Options</h3>
        <section id="bundle-and-multiport-options">
            <br />
            <div class="alert alert-info" role="alert">
                If you want the attachment to be configured as a bundle then select the bundle option. Bundles are groups of two or
                more physical attachments which are logically grouped together and behave as one physical attachment. Traffic is load-balandced
                across the bundle using the LACP protocol.
            </div>
            <div class="form-group row">
                <label class="col-form-label col-sm-2" asp-for="BundleRequired"></label>
                <div class="col-sm-10">
                    <div class="custom-control custom-checkbox">
                        <input class="form-check-input custom-control-input" type="checkbox" asp-for="BundleRequired" data-toggle="tooltip"
                               data-placement="right" title="Request a bundle attachment">
                        <label class="form-check-label custom-control-label" for="BundleRequired"></label>
                    </div>
                </div>
            </div>
            <div class="alert alert-info" role="alert">
                If you want the attachment to be configured as a multiport then select the multiport option. Multiports are groups of
                two or more physical attachments each of which is configured for layer 3. Traffic is load-balanced across a multiport using
                the ECMP protocol.
            </div>
            <div class="form-group row">
                <label class="col-form-label col-sm-2" asp-for="MultiportRequired"></label>
                <div class="col-sm-10">
                    <div class="custom-control custom-checkbox">
                        <input class="form-check-input custom-control-input" type="checkbox" asp-for="MultiportRequired" data-toggle="tooltip"
                               data-placement="right" title="Request a multi-port attachment">
                        <label class="form-check-label custom-control-label" for="MultiportRequired"></label>
                    </div>
                </div>
            </div>
        </section>
        <h3>Bandwidth</h3>
        <section id="bandwidth-options">
            <br />
            <div class="alert alert-info" role="alert">
                Select a bandwidth for the attachment. The values are in Gigabits per Second.
            </div>
            <div class="form-group row">
                <label asp-for="AttachmentBandwidthGbps" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="AttachmentBandwidthGbps" class="form-control" asp-items="ViewBag.AttachmentBandwidth">
                        <option value="">-- Select a Bandwidth --</option>
                    </select>
                    <span asp-validation-for="AttachmentBandwidthGbps" class="text-danger"></span>
                </div>
            </div>
        </section>
        <h3>Port Pool and Role</h3>
        <section id="port-pool-and-role">
            <div class="alert alert-info" role="alert">
                Select a port pool. The port pool determines the pool from which ports will be assigned
                for the new attachment.
            </div>
            <div class="form-group row">
                <label asp-for="PortPoolName" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="PortPoolName" class="form-control" asp-items="ViewBag.PortPool">
                        <option value="">-- Select a Port Pool --</option>
                    </select>
                    <span asp-validation-for="PortPoolName" class="text-danger"></span>
                </div>
            </div>
            <div class="alert alert-info" role="alert">
                Selet an attachment role. The attachment determines certain parameters regarding how the attachment will be logically provisioned,
                such as whether IP addressing and contract bandwidth is required. 
            </div>
            <div class="form-group row">
                <label asp-for="AttachmentRoleName" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="AttachmentRoleName" class="form-control" asp-items="ViewBag.AttachmentRole">
                        <option value="">-- Select a Role --</option>
                    </select>
                    <span asp-validation-for="AttachmentRoleName" class="text-danger"></span>
                </div>
            </div>
        </section>
        <h3>IP Addressing</h3>
        <section id="ip-addressing">
            <div id="ipAddressingComponent">

                @if (Model != null)
                {
                    @await Component.InvokeAsync("AttachmentIpAddressing", new
                {
                    portPoolName = Model.PortPoolName,
                    attachmentRoleName = Model.AttachmentRoleName,
                    attachmentBandwidthGbps = Model.AttachmentBandwidthGbps,
                    isMultiport = Model.MultiportRequired,
                    currentModel = Model.Ipv4Addresses
                });
                }
            </div>
        </section>
        <h3>Contract Bandwidth</h3>
        <section id="contract-bandwidth">
            <div id="contractBandwidthPoolComponent">
                @if (Model != null)
                {
                    @await Component.InvokeAsync("AttachmentContractBandwidthPool", new
               {
                   portPoolName = Model.PortPoolName,
                   attachmentRoleName = Model.AttachmentRoleName,
                   attachmentBandwidthGbps = Model.AttachmentBandwidthGbps,
                   currentModel = new ContractBandwidthPoolViewModel
                     {
                         ContractBandwidthMbps = Model.ContractBandwidthMbps,
                         TrustReceivedCosAndDscp = Model.TrustReceivedCosAndDscp
                     }
                    });
                }
            </div>
        </section>
        <h3>Plane</h3>
        <section id="plane">
            <br />
            <div class="alert alert-info" role="alert">
                Optionally select a provider network plane. If a plane option is selected then the attachment will be provisioned
                on a PE in the selected plane. The plane option is typically useful for
                'Live/Live' routing scenarios.
            </div>
            <div class="form-group row">
                <label asp-for="PlaneName" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="PlaneName" class="form-control" asp-items="ViewBag.Plane">
                        <option value="">-- Optionally Select a Plane --</option>
                    </select>
                    <span asp-validation-for="PlaneName" class="text-danger"></span>
                </div>
            </div>
        </section>
        <h3>Description and Notes</h3>
        <section id="description-and-notes">
            <div class="alert alert-info" role="alert">
                Enter a description and any notes which describe the purpose of the attachment.
            </div>
            <div class="form-group row">
                <label asp-for="Description" class="col-sm-2 col-form-label"> </label>
                <div class="col-sm-10">
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <label asp-for="Notes" class="col-sm-2 col-form-label"> </label>
                <div class="col-sm-10">
                    <textarea asp-for="Notes" class="form-control" rows="5"></textarea>
                    <span asp-validation-for="Notes" class="text-danger"></span>
                </div>
            </div>
        </section>
    </div>
</form>

<div>
    <a asp-action="GetAllByTenantID" asp-route-tenantID="@ViewBag.Tenant.TenantId">Back to Attachments List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">

        (function ($) {

            var $form = $("#createForm"),
                $wizard = $("#createAttachmentWizard");

            //Create wizard
            $wizard.steps({
                headerTag: "h3",
                bodyTag: "section",
                transitionEffect: "fade",
                onStepChanging: function (event, currentIndex, newIndex) {

                    // Allways allow previous action even if the current form is not valid!
                    if (currentIndex > newIndex) {
                        return true;
                    }

                    $form.validate().settings.ignore = ":disabled,:hidden";
                    return $form.valid();
                },
                onFinishing: function (event, currentIndex) {
                    $form.validate().settings.ignore = ":disabled";
                    return $form.valid();
                },
                onFinished: function (event, currentIndex) {

                    $form.submit();
                }
            });

            var $region = $('#RegionId'),
                region = $region[0],
                $subregion = $('#SubRegionId'),
                subregion = $subregion[0],
                $location = $('#LocationName'),
                location = $location[0],
                $bundleRequired = $('#BundleRequired'),
                bundleRequired = $bundleRequired[0],
                $multiportRequired = $('#MultiportRequired'),
                multiportRequired = $multiportRequired[0],
                $portPool = $('#PortPoolName'),
                portPool = $portPool[0],
                $attachmentRole = $('#AttachmentRoleName'),
                attachmentRole = $attachmentRole[0],
                $attachmentBandwidthGbps = $('#AttachmentBandwidthGbps'),
                attachmentBandwidthGbps = $attachmentBandwidthGbps[0],
                $ipAddressingComponent = $("#ipAddressingComponent"),
                $contractBandwidthPoolComponent = $("#contractBandwidthPoolComponent");

            const uri = "/ProviderDomainAttachment/";

            // Initialise all tool-tips
            $('[data-toggle="tooltip"]').tooltip();

            $attachmentBandwidthGbps.on('change', function (e) {

                attachmentRole.selectedIndex = 0;
                attachmentRole.disabled = true;
                portPool.selectedIndex = 0;
                $ipAddressingComponent.fadeOut().empty();
                $contractBandwidthPoolComponent.fadeOut().empty();

                if (attachmentBandwidthGbps.value === null || attachmentBandwidthGbps.value === "") {

                    portPool.disabled = true;
                }
                else {

                    portPool.disabled = false;
                }
            });

            $portPool.on('change', function (e) {

                $ipAddressingComponent.fadeOut().empty();
                $contractBandwidthPoolComponent.fadeOut().empty();
                var portPoolVal = this.value;
                if (portPoolVal === null || portPoolVal === "") {

                    attachmentRole.selectedIndex = 0;
                    attachmentRole.disabled = true;
                }
                else {

                    Mind.Utilities.populateElement($attachmentRole, uri + "AttachmentRoles", {
                        portPoolName: portPoolVal
                    });
                }
            });

            $attachmentRole.on('change', function (e) {

                var attachmentRoleName = this.value;
                if (attachmentRoleName !== null) {

                    GetIpAddressingComponent();
                    GetContractBandwidthPoolComponent();
                }
            });

            if (region.value === null || region.value === "") {

                subregion.disabled = true;
                location.disabled = true;
            }

            if (subregion.value === null || subregion.value === "") {

                location.disabled = true;
            }

            if (attachmentBandwidthGbps.value === null || attachmentBandwidthGbps.value === "") {

                portPool.disabled = true;
            }

            if (portPool.value === null || portPool.value === "") {

                attachmentRole.disabled = true;
            }

            $region.on('change', function (e) {

                var regionId = this.value;
                if (regionId === null || regionId === "") {

                    subregion.selectedIndex = 0;
                    subregion.disabled = true;
                    location.selectedIndex = 0;
                    location.disabled = true;
                }
                else {
                    location.selectedIndex = 0;
                    location.disabled = true;

                    Mind.Utilities.populateElement($subregion, uri + "SubRegions", { regionId : regionId });
                }
            });

            $subregion.on('change', function (e) {

                var subRegionId = this.value;
                Mind.Utilities.populateElement($location, uri + "Locations", { subRegionId: subRegionId });
            });

            $multiportRequired.on('click', function (e) {

                bundleRequired.checked = false;
                Mind.Utilities.populateElement($attachmentBandwidthGbps, uri + "AttachmentBandwidths", { multiportRequired: multiportRequired.checked });
            });

            $bundleRequired.on('click', function (e) {

                multiportRequired.checked = false;
                Mind.Utilities.populateElement($attachmentBandwidthGbps, uri + "AttachmentBandwidths", { bundleRequired: bundleRequired.checked });
            });

            function GetIpAddressingComponent() {

                $ipAddressingComponent.fadeOut().empty();

                $.get(uri + "GetIpAddressingComponent", {
                    portPoolName: portPool.value,
                    attachmentRoleName: attachmentRole.value,
                    attachmentBandwidthGbps: attachmentBandwidthGbps.value,
                    isMultiport: multiportRequired.checked
                })
                    .done(function (data) {

                        $ipAddressingComponent.html(data).fadeIn();
                        // Initialise new tool-tips
                        $('[data-toggle="tooltip"]').tooltip();

                        // Re-initialise unobtrusive validation on the form
                        var $form = $('#createForm')
                            .removeData("validator")
                            .removeData("unobtrusiveValidation");
                        $.validator.unobtrusive.parse($form);
                    });
            }

            function GetContractBandwidthPoolComponent() {

                $contractBandwidthPoolComponent.fadeOut().empty();

                $.get(uri + "GetContractBandwidthPoolComponent", {
                    portPoolName: portPool.value,
                    attachmentRoleName: attachmentRole.value,
                    attachmentBandwidthGbps: attachmentBandwidthGbps.value
                })
                    .done(function (data) {

                        $contractBandwidthPoolComponent.html(data).fadeIn();
                        // Initialise new tool-tips
                        $('[data-toggle="tooltip"]').tooltip();

                        // Re-initialise unobtrusive validation on the form
                        var $form = $('#createForm')
                            .removeData("validator")
                            .removeData("unobtrusiveValidation");
                        $.validator.unobtrusive.parse($form);
                    });
            }

        }(jQuery));
    
    </script>
}