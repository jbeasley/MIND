@using Mind.WebUI.Models;
@model Mind.WebUI.Models.ProviderDomainAttachmentUpdateViewModel

@{
    ViewData["Title"] = "Edit Attachment";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/Home">Home</a></li>
    <li class="breadcrumb-item"><a href="/Tenant/GetAll">Tenants</a></li>
    <li class="breadcrumb-item"><a href="/ProviderDomainAttachment/GetAllByTenantID?tenantId=@ViewBag.Tenant.TenantId">Provider Domain Attachments - [@ViewBag.Tenant.Name]</a></li>
    <li class="breadcrumb-item active">Edit - [@Model.Name]</li>
</ol>

<h2>Edit Attachment '@Model.Name'</h2>

<form id="editForm" asp-action="Edit">
    <div class="form-horizontal">
        <hr />
        @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}
        <input type="hidden" asp-for="AttachmentId" />
        <input type="hidden" asp-for="RowVersion" />
        <input type="hidden" asp-for="Name" />
        <div id="editAttachmentWizard">
            @if (Model.IsBundle)
            {
                <h3>Bundle Options</h3>
                <section id="bundle-options">
                    <br />
                    <div class="alert alert-info" role="alert">
                        Select the minimum and maximum number of active links for the bundle.
                        If the number of active links falls below the minimum link threshold then the bundle will be disabled until the number
                        of active links meets or exceed the minimum threshold.
                        If the number of active links exceeds the maximum links threshold then the number of links above the maximum threshold will
                        be disabled.
                    </div>
                    <div class="form-group row">
                        <label asp-for="BundleMinLinks" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-10">
                            <input asp-for="BundleMinLinks" class="form-control" data-toggle="tooltip" data-placement="right"
                                   title="Specify the minimum number of active links in the bundle" />
                            <span asp-validation-for="BundleMinLinks" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label asp-for="BundleMaxLinks" class="col-sm-2 col-form-label"></label>
                        <div class="col-sm-10">
                            <input asp-for="BundleMaxLinks" class="form-control" data-toggle="tooltip" data-placement="right"
                                   title="Specify the maximum number of active links in the bundle" />
                            <span asp-validation-for="BundleMaxLinks" class="text-danger"></span>
                        </div>
                    </div>
                </section>
            }
            <h3>IP Addressing</h3>
            <section id="ip-addressing">
                <div id="ipAddressingComponent">
                    @await Component.InvokeAsync("AttachmentIpAddressing", new
                    {
                        attachmentId = Model.AttachmentId,
                        currentModel = Model.Ipv4Addresses
                    })
                </div>
            </section>
            <h3>Contract Bandwidth</h3>
            <section id="contract-bandwidth">
                <div id="contractBandwidthPoolComponent">
                    @await Component.InvokeAsync("AttachmentContractBandwidthPool", new
                    {
                        attachmentId = Model.AttachmentId,
                        currentModel = new ContractBandwidthPoolViewModel
                        {
                            ContractBandwidthMbps = Model.ContractBandwidthMbps,
                            TrustReceivedCosAndDscp = Model.TrustReceivedCosAndDscp
                        }
                    })
                </div>
            </section>
            @if (!string.IsNullOrEmpty(Model.ExistingRoutingInstanceName))
            {
                <h3>Routing Instance</h3>
                <section id="routing-instance">
                    <br />
                    <div class="alert alert-info" role="alert">
                        Select a routing instance for the attachment. A routing instance holds routing information for the networks in the
                        tenant domains which you wish to communicate with. The routing instance isolates your routing information from the routing
                        information of other tenants. Routing instances can be shared between multiple attachments or vifs which belong to you.
                    </div>
                    <div class="form-group row">
                        <label asp-for="ExistingRoutingInstanceName" class="col-sm-4 col-form-label"></label>
                        <div class="col-sm-8">
                            <select asp-for="ExistingRoutingInstanceName" class="form-control" asp-items="ViewBag.RoutingInstance"
                                    data-toggle="tooltip" data-placement="right" title="Select a routing instance for the attachment">
                                <option value="">-- Select Routing Instance --</option>
                            </select>
                            <span asp-validation-for="ExistingRoutingInstanceName" class="text-danger"></span>
                        </div>
                    </div>
                    <br />
                    <div class="alert alert-info" role="alert">
                        Optionally you can create a new routing instance for this attachment. Do this is if the attachment is currently associated
                        with a routing instance which is shared with other attachments or vifs and you wish to create a dedicated routing instance for this attachment.
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4" asp-for="CreateNewRoutingInstance"></label>
                        <div class="col-sm-8">
                            <div class="custom-control custom-checkbox">
                                <input class="form-check-input custom-control-input" type="checkbox" asp-for="CreateNewRoutingInstance" data-toggle="tooltip"
                                       data-placement="right" title="Create a new routing instance for this attachment">
                                <label class="form-check-label custom-control-label" for="CreateNewRoutingInstance"></label>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- View component for displaying/changing the BGP peers which belong to the routing instance of the attachment -->
                @await Component.InvokeAsync("BgpPeers", new
                {
                    bgpPeerRequests = Model.RoutingInstance?.BgpPeers
                })
            }
            <h3>MTU Options</h3>
            <section id="mtu-options">
                <br />
                <div class="alert alert-info" role="alert">
                    If jumbo MTU is enabled then ethernet frames of up to either 9000 or 9014 bytes may be transmitted using this attachment.
                    If jumbo MTU is disabled then the frame size is limited to either 1500 or 1514 bytes.
                    The actual MTU value is dependent on the Sigma PE hardware which is used to terminate the attachment.
                </div>
                <div class="form-group row">
                    <label class="col-form-label col-sm-2" asp-for="UseJumboMtu"></label>
                    <div class="col-sm-10">
                        <div class="custom-control custom-checkbox">
                            <input class="form-check-input custom-control-input" type="checkbox" asp-for="UseJumboMtu" data-toggle="tooltip"
                                   data-placement="right" title="Enable jumbo MTU">
                            <label class="form-check-label custom-control-label" for="UseJumboMtu"></label>
                        </div>
                    </div>
                </div>
            </section>
            <h3>Description and Notes</h3>
            <section id="location">
                <br />
                <div class="alert alert-info" role="alert">
                    Enter a description and any notes which describe the purpose of the attachment.
                </div>
                <div class="form-group row">
                    <label asp-for="Description" class="col-sm-2 col-form-label"> </label>
                    <div class="col-sm-10">
                        <input asp-for="Description" class="form-control" />
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="Notes" class="col-sm-2 col-form-label"> </label>
                    <div class="col-sm-10">
                        <textarea asp-for="Notes" class="form-control" rows="5"></textarea>
                        <span asp-validation-for="Notes" class="text-danger"></span>
                    </div>
                </div>
            </section>
        </div>
    </div>
</form>

<!--Component for a form allowing the user to enter data to create or edit a BGP peer
    The component HTML must be placed outside of other page elements to avoid nesting because browser will
    remove the <form> element from the component otherwise -->
@await Component.InvokeAsync("CreateBgpPeerForm")

<div>
    <a mind-nav-link-back-btn="true" asp-action="GetAllByTenantID" asp-route-tenantID="@ViewBag.Tenant.TenantId">Back to Attachments</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">

        (function ($) {

            var $form = $("#editForm"),
                $wizard = $("#editAttachmentWizard");

            //Create wizard
            $wizard.steps({
                headerTag: "h3",
                bodyTag: "section",
                transitionEffect: "fade",
                enableAllSteps: true,
                onStepChanging: function (event, currentIndex, newIndex) {

                    // Allways allow previous action even if the current form is not valid!
                    if (currentIndex > newIndex) {
                        return true;
                    }

                    $form.validate().settings.ignore = ":disabled,:hidden";
                    return $form.valid();
                },
                onFinishing: function (event, currentIndex) {
                    $form.validate().settings.ignore = ":disabled";
                    return $form.valid();
                },
                onFinished: function (event, currentIndex) {

                    $form.submit();
                }
            });

            var $routingInstance = $('#ExistingRoutingInstanceName'),
                routingInstance = $routingInstance[0],
                $createNewRoutingInstance = $('#CreateNewRoutingInstance'),
                createNewRoutingInstance = $createNewRoutingInstance[0];

            if (createNewRoutingInstance.checked) {

                routingInstance.selectedIndex = 0;
                routingInstance.disabled = true;
            }

            $createNewRoutingInstance.on('click', function () {

                if (this.checked) {

                    routingInstance.selectedIndex = 0;
                    routingInstance.disabled = true;
                }
                else {

                    routingInstance.disabled = false;
                }
            });


        }(jQuery));

    </script>

    @{await Html.RenderPartialAsync("_ProviderDomainAttachmentScriptsPartial");}

    <script type="text/javascript">

        (function ($) {

            // Initialise all tool-tips - do this after all components are loaded
            $('[data-toggle="tooltip"]').tooltip();

        }(jQuery));

    </script>

}