@using Mind.WebUI.Models;
@model Mind.WebUI.Models.TenantDomainAttachmentRequestViewModel
@{
    ViewData["Title"] = "Create Attachment";
}
<div id="crumbs">
    <ul>
        <li><a href="/Home"><i class="fa fa-home" aria-hidden="true"></i></a></li>
        <li><a href="/Tenant/GetAll"><i class="fa" aria-hidden="true"></i> Tenants</a></li>
        <li><a href="/TenantDomainDevice/GetAllByTenantId?tenantId=@ViewBag.Device.TenantId"><i class="fa" aria-hidden="true"></i>Tenant Domain Devices - [@ViewBag.Device.TenantName]</a></li>
        <li><a href="/TenantDomainAttachment/GetAllByDeviceId?deviceId=@ViewBag.Device.DeviceId"><i class="fa" aria-hidden="true"></i>Tenant Domain Attachments - [@ViewBag.Device.Name]</a></li>
        <li class="active"><a href="#"><i class="fa active" aria-hidden="true"></i>Create</a></li>
    </ul>
</div>
<h2>Create a Tenant Domain Attachment for Device '@ViewBag.Device.Name'</h2>
<form id="createForm" asp-action="Create">
    <hr />

    @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}

    <input type="hidden" asp-for="DeviceId" value="@ViewBag.Device.DeviceId" />

    <!-- The following input is used by the create.js and edit.js scripts to prevent the stage or sync modal form from being
         displayed when the user finishes with wizard -->
    <input type="hidden" id="showStageOrSyncModal" value="false" />

    <!-- The following inputs are used by the create.js script to call the server to populate the list of port pools -->
    <input type="hidden" id="portRoleTypeEnumName" value="@Mind.WebUI.PortRoleTypeEnum.ProviderFacing.ToString()" />
    <input type="hidden" id="deviceRoleId" value="@ViewBag.Device.DeviceRoleId" />

    <div id="createAttachmentWizard">

        <h3>Bundle/Multiport Options</h3>
        <section id="bundle-and-multiport-options">
            <div id="attachmentBundleAndMultiportOptionsComponent">
                @await Component.InvokeAsync("AttachmentBundleAndMultiportOptions", new AttachmentBundleAndMultiportOptionsComponentViewModel
            {
                BundleRequired = Model != null ? Model.BundleRequired : false,
                MultiportRequired = false
            })
            </div>
        </section>

        <h3>Bandwidth</h3>
        <section id="bandwidth-options">
            <div id="attachmentBandwidthComponent">
                @await Component.InvokeAsync("AttachmentBandwidth", new AttachmentBandwidthComponentViewModel
            {
                BundleRequired = Model != null ? Model.BundleRequired : false,
                MultiportRequired = false
            })
            </div>
        </section>

        <h3>Port Pool and Role</h3>
        <section id="port-pool-and-role">
            <div id="attachmentPortPoolAndRoleComponent">
                @await Component.InvokeAsync("AttachmentPortPoolAndRole", new AttachmentPortPoolAndRoleComponentViewModel
            {
                PortRoleTypeEnumName = Mind.WebUI.PortRoleTypeEnum.ProviderFacing.ToString(),
                AttachmentRoleName = Model?.AttachmentRoleName,
                PortPoolName = Model?.PortPoolName,
                DeviceRoleId = ViewBag.Device.DeviceRoleId
            })
            </div>
        </section>

        <h3>IP Addressing</h3>
        <section id="ip-addressing">
            <div id="ipAddressingComponent">
                @await Component.InvokeAsync("AttachmentIpAddressing", new
            {
                portPoolName = Model?.PortPoolName,
                attachmentRoleName = Model?.AttachmentRoleName,
                attachmentBandwidthGbps = Model?.AttachmentBandwidthGbps,
                isMultiport = false,
                currentModel = Model?.Ipv4Addresses
            })
            </div>
        </section>

        <h3>Contract Bandwidth</h3>
        <section id="contract-bandwidth">
            <div id="contractBandwidthPoolComponent">
                @await Component.InvokeAsync("ContractBandwidthPool", new ContractBandwidthComponentViewModel
            {
                PortPoolName = Model?.PortPoolName,
                AttachmentRoleName = Model?.AttachmentRoleName,
                ContractBandwidthPool = new ContractBandwidthPoolViewModel
                {
                    ContractBandwidthMbps = Model?.ContractBandwidthMbps,
                    TrustReceivedCosAndDscp = Model != null ? Model.TrustReceivedCosAndDscp : false
                }
            })
            </div>
        </section>

        <h3>BGP Peers</h3>
        <section id="bgp-peers">
            <div id="bgpPeersComponent">
                <!-- View component for creating BGP peers -->
                @await Component.InvokeAsync("RoutingInstanceBgpPeers", new BgpPeersComponentViewModel
            {
                PortPoolName = Model?.PortPoolName,
                AttachmentRoleName = Model?.AttachmentRoleName,
                BgpPeers = Model?.RoutingInstance?.BgpPeers
            })
            </div>
        </section>

        <h3>Description and Notes</h3>
        <section id="description-and-notes">
            <div mind-alert="info" message="Enter a description and any notes which describe the purpose of the attachment.">
            </div>
            <div class="form-group row">
                <label asp-for="Description" class="col-sm-2 col-form-label"> </label>
                <div class="col-sm-10">
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row">
                <label asp-for="Notes" class="col-sm-2 col-form-label"> </label>
                <div class="col-sm-10">
                    <textarea asp-for="Notes" class="form-control" rows="5"></textarea>
                    <span asp-validation-for="Notes" class="text-danger"></span>
                </div>
            </div>
        </section>
    </div>
</form>

<div>
    <a mind-nav-link-back-btn="true" asp-action="GetAllByDeviceID" asp-route-deviceID="@ViewBag.Device.DeviceId">Back to Attachments</a>
</div>

<!--Component for a form allowing the user to enter data to create or edit a BGP peer
    The component HTML must be placed outside of other page elements to avoid nesting because browser will
    remove the <form> element from the component otherwise -->
@await Component.InvokeAsync("BgpPeerForm")

<!-- Loading Spinner partial view -->
@{await Html.RenderPartialAsync("_LoadingSpinnerPartial");}

@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @{await Html.RenderPartialAsync("_TenantDomainAttachmentCreateScriptsPartial");}
}