@using Mind.WebUI.Models;
@model Mind.WebUI.Models.TenantDomainDeviceRequestViewModel
@{
    ViewData["Title"] = "Create Device";
}
<div id="crumbs">
    <ul>
        <li><a href="/Home"><i class="fa fa-home" aria-hidden="true"></i></a></li>
        <li><a href="/Tenant/GetAll"><i class="fa" aria-hidden="true"></i> Tenants</a></li>
        <li><a href="/TenantDomainDevice/GetAllByTenantId?tenantId=@ViewBag.Tenant.TenantId"><i class="fa active" aria-hidden="true"></i>Tenant Domain Devices - [@ViewBag.Tenant.Name]</a></li>
        <li class="active"><a href="#"><i class="fa" aria-hidden="true"></i>Create</a></li>
    </ul>
</div>
<h2>Create a Device for Tenant '@ViewBag.Tenant.Name'</h2>
<form id="createForm" asp-action="Create">
    @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}
    <input type="hidden" asp-for="TenantId" value="@ViewBag.Tenant.TenantId" />
    <div id="createTenantDomainDeviceWizard">
        <h3>Name and Description</h3>
        <section id="name-and-description">
            <div mind-alert="info" message="
                Enter a name for the device and a description.">
            </div>
            <div class="form-group row">
                <label asp-for="Name" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger" />
                </div>
            </div>
            <div class="form-group row">
                <label asp-for="Description" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger" />
                </div>
            </div>
        </section>
        <h3>Location</h3>
        <section id="location">
            <div mind-alert="info" message="Select a location for the new device.">
            </div>
            <div id="locationSelector">
                <!-- Component for selecting a location for the new device -->
                @await Component.InvokeAsync("LocationSelector", new LocationSelectorViewModel
                {
                    RegionId = Model?.RegionId,
                    SubRegionId = Model?.SubRegionId,
                    LocationName = Model?.LocationName
                })
            </div>
        </section>
        <h3>Model and Role</h3>
        <section id="role-model">
            <!-- View component for MTU and status options for the device -->
            @await Component.InvokeAsync("DeviceRoleAndModel", new DeviceRoleAndModelComponentViewModel
            {
                DeviceRole = Model?.DeviceRole,
                DeviceModel = Model?.DeviceModel
            })
        </section>
        <h3>MTU and Activation Status</h3>
        <section id="mtu-status">
            <!-- View component for MTU and status options for the device -->
            @await Component.InvokeAsync("DeviceMtuAndStatus", new DeviceMtuAndStatusComponentViewModel
            {
                UseLayer2InterfaceMtu = Model != null ? Model.UseLayer2InterfaceMtu : false,
                DeviceStatus = Model?.DeviceStatus
            })
        </section>
        <h3>Ports</h3>
        <section id="ports">
            <div id="portsComponent">
                <!-- View component for displaying a grid of ports which belong to the device -->
                @await Component.InvokeAsync("Ports", new
                {
                    ports = Model?.Ports
                })
            </div>
        </section>
    </div>
</form>
<div>
    <a mind-nav-link-back-btn="true" asp-action="GetAllByTenantID" asp-route-tenantID="@ViewBag.Tenant.TenantId">Back to Devices</a>
</div>

<!--Container for the port form allowing the user to create/edit ports. The form HTML is loaded from the server when
the user clicks the 'create' or one of the grid row edit buttons -->
<div id="portFormContainer"></div>

<!-- Loading Spinner partial view -->
@{await Html.RenderPartialAsync("_LoadingSpinnerPartial");}
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @{await Html.RenderPartialAsync("_TenantDomainDeviceCreateScriptsPartial");}
}
