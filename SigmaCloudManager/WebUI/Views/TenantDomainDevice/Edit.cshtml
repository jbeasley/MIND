@using Mind.WebUI.Models;
@model Mind.WebUI.Models.TenantDomainDeviceUpdateViewModel
@{
    ViewData["Title"] = "Update Device";
}
<div id="crumbs">
    <ul>
        <li><a href="/Home"><i class="fa fa-home" aria-hidden="true"></i></a></li>
        <li><a href="/Tenant/GetAll"><i class="fa" aria-hidden="true"></i> Tenants</a></li>
        <li><a href="/TenantDomainDevice/GetAllByTenantId?tenantId=@ViewBag.Tenant.TenantId"><i class="fa active" aria-hidden="true"></i>Tenant Domain Devices - [@ViewBag.Tenant.Name]</a></li>
        <li class="active"><a href="#"><i class="fa" aria-hidden="true"></i>Edit - [@Model.Name]</a></li>
    </ul>
</div>
<h2>Edit Device '@Model.Name'</h2>
<form id="editForm" asp-action="Edit">
    @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}
    <input type="hidden" asp-for="DeviceId" />
    <input type="hidden" asp-for="RowVersion" />
    <div id="editTenantDomainDeviceWizard">
        <h3>Name and Description</h3>
        <section id="name-and-description">
            <br />
            <div mind-alert="info" message="
                Enter a name for the device and a description.">
            </div>
            <div class="form-group row">
                <label asp-for="Name" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger" />
                </div>
            </div>
            <div class="form-group row">
                <label asp-for="Description" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger" />
                </div>
            </div>
        </section>
        <h3>MTU and Activation Status</h3>
        <section id="mtu-status">
            <!-- View component for MTU and status options for the device -->
            @await Component.InvokeAsync("DeviceMtuAndStatus", new DeviceMtuAndStatusComponentViewModel
            {
                UseLayer2InterfaceMtu = Model != null ? Model.UseLayer2InterfaceMtu : false,
                DeviceStatus = Model?.DeviceStatus
            })
        </section>
        <h3>Ports</h3>
        <section id="ports">
            <div id="portsComponent">
                <!-- View component for displaying a grid of ports which belong to the device -->
                @await Component.InvokeAsync("Ports", new
                {
                    ports = Model?.Ports
                })
            </div>
        </section>
    </div>
</form>
<div class="modal fade" id="duplicateItemModal" tabindex="-1" role="dialog" aria-labelledby="duplicateItemModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="duplicateItemModalLabel">Port Exists</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                The port already exists for the device
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div>
    <a mind-nav-link-back-btn="true" asp-action="GetAllByTenantID" asp-route-tenantID="@ViewBag.Tenant.TenantId">Back to Devices</a>
</div>

<!--Component for a form allowing the user to enter data to create or edit a port
    The component HTML must be placed outside of other page elements to avoid nesting because the browser will
    remove the <form> element from the component otherwise -->
@await Component.InvokeAsync("PortForm")

<!-- Loading Spinner partial view -->
@{await Html.RenderPartialAsync("_LoadingSpinnerPartial");}
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @{await Html.RenderPartialAsync("_TenantDomainDeviceEditScriptsPartial");}
}
