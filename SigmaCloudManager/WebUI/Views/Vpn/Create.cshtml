@using Mind.WebUI.Models;
@model Mind.WebUI.Models.VpnRequestViewModel

@{
    ViewData["Title"] = "Create VPN";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/Home">Home</a></li>
    <li class="breadcrumb-item"><a href="/Tenant/GetAll">Tenants</a></li>
    <li class="breadcrumb-item"><a href="/Vpn/GetAllByTenantID?tenantID=@ViewBag.Tenant.TenantId">VPNs - [@ViewBag.Tenant.Name]</a></li>
    <li class="breadcrumb-item active">Create</li>
</ol>

<h2>Create a VPN for Tenant '@ViewBag.Tenant.Name'</h2>

<form id="createForm" asp-action="Create">
    @{await Html.RenderPartialAsync("_ValidationModelErrorPartial");}
    <input type="hidden" asp-for="TenantId" value="@ViewBag.Tenant.TenantId" />
    <div id="createVpnWizard">
        <h3>Name and Description</h3>
        <section id="name-and-description">
            <br />
            <div class="alert alert-info" role="alert">
                Give a user-friendy name for the VPN and a description.
            </div>
            <div class="form-group row">
                <label asp-for="Name" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger" />
                </div>
            </div>
            <div class="form-group row">
                <label asp-for="Description" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger" />
                </div>
            </div>
            <br />
            <div class="alert alert-info" role="alert">
                Typically the Nova option should be enabled. Disable it if you want to customise the VPN using
                route targets from a specific range, or if you want to associate the VPN with a non-standard routing instance.
            </div>
            <div class="form-group row">
                <label class="col-form-label col-sm-2"></label>
                <div class="col-sm-10">
                    <div class="custom-control custom-checkbox">
                        <input class="form-check-input custom-control-input" type="checkbox" asp-for="IsNovaVpn" checked data-toggle="tooltip"
                               title="Request a standard Nova VPN" data-placement="left" />
                        <label class="form-check-label custom-control-label" asp-for="IsNovaVpn"></label>
                    </div>
                </div>
            </div>
            <div class="alert alert-info" role="alert">
                Extranets are a special type of VPN which provide a 'cross-connect' between two or more other VPNs.
                Enable the extranet option to create a cross-connect VPN.
            </div>
            <div class="form-group row">
                <label class="col-form-label col-sm-2"></label>
                <div class="col-sm-10">
                    <div class="custom-control custom-checkbox">
                        <input class="form-check-input custom-control-input" type="checkbox" asp-for="IsExtranet" data-toggle="tooltip"
                               title="Request an extranet VPN" data-placement="left" />
                        <label class="form-check-label custom-control-label" asp-for="IsExtranet"></label>
                    </div>
                </div>
            </div>
        </section>
        <h3>Protocol and Topology</h3>
        <section id="protocol-and-topology">
            <br />
            <div class="alert alert-info" role="alert">
                Select a protocol type of IP for a layer 3, IP-based connectivity service.
                Select a protocol type of Ethernet for a layer 2 Ethernet-based connectivity service.
            </div>
            <div class="form-group row">
                <label asp-for="ProtocolType" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="ProtocolType" class="form-control" asp-items="ViewBag.ProtocolType">
                        <option value="">--  Select Protocol Type --</option>
                    </select>
                    <span asp-validation-for="ProtocolType" class="text-danger"></span>
                </div>
            </div>
            <div class="alert alert-info" role="alert">
                Select an address-family option. An address-family is a sub-category of the protocol selection. For example,
                IPv4 is an address-family option for an IP-based connectivity service.
            </div>
            <div class="form-group row">
                <label asp-for="AddressFamily" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="AddressFamily" class="form-control" asp-items="ViewBag.AddressFamily">
                        <option value="">--  Select Address-Family --</option>
                    </select>
                    <span asp-validation-for="AddressFamily" class="text-danger"></span>
                </div>
            </div>
            <div class="alert alert-info" role="alert">
                The topology of the VPN determines how sites connected ot the VPN are able to communicate.
                For example, selecting the Meshed option for an IP-based VPN allows any site to communicate with 
                any other site.
            </div>
            <div class="form-group row">
                <label asp-for="TopologyType" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="TopologyType" class="form-control" asp-items="ViewBag.TopologyType">
                        <option value="">-- Select Topology Type --</option>
                    </select>
                    <span asp-validation-for="TopologyType" class="text-danger"></span>
                </div>
            </div>
        </section>
        <h3>Tenancy Type</h3>
        <section id="tenancyType">
            <br />
            <div class="alert alert-info" role="alert">
               Select a tenancy type for the VPN. A tenancy type of 'single' means that only sites which belong to the tenant who owns
                the VPN can be attached to the VPN. If the tenancy type is 'multi' then any site belonging to any tenant can 
                be attached to the VPN.
            </div>
            <div class="form-group row">
                <label asp-for="TenancyType" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="TenancyType" class="form-control" asp-items="ViewBag.TenancyType">
                        <option value="">-- Select Tenancy Type --</option>
                    </select>
                    <span asp-validation-for="TenancyType" class="text-danger"></span>
                </div>
            </div>
        </section>
        <h3>Region</h3>
        <section id="region">
            <br />
            <div class="alert alert-info" role="alert">
                Optionally select a geographical region. If this option is selected then only sites in the specified
                region can be attached to the VPN.
            </div>
            <div class="form-group row">
                <label asp-for="Region" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="Region" class="form-control" asp-items="ViewBag.Region">
                        <option value="">-- Optionally Select Region --</option>
                    </select>
                    <span asp-validation-for="Region" class="text-danger"></span>
                </div>
            </div>
        </section>
        <h3>Plane</h3>
        <section id="plane">
            <br />
            <div class="alert alert-info" role="alert">
                Optionally select a provider network plane. If a plane option is selected then only sites which are 
                attached to the designated plane can participate in the VPN. Typically the plane option is used for 
                'Live/Live' routing where two VPNs, one for each plane, are required.
            </div>
            <div class="form-group row">
                <label asp-for="Plane" class="col-sm-2 col-form-label"></label>
                <div class="col-sm-10">
                    <select asp-for="Plane" class="form-control" asp-items="ViewBag.Plane">
                        <option value="">-- Optionally Select Plane --</option>
                    </select>
                    <span asp-validation-for="Plane" class="text-danger"></span>
                </div>
            </div>
        </section>

        <!-- View component for displaying a grid of attachment sets which belong to the vpn -->
       @await Component.InvokeAsync("VpnAttachmentSets", new
       {
           vpnAttachmentSets = Model?.VpnAttachmentSets
       })

    </div>
</form>
<div class="modal fade" id="duplicateItemModal" tabindex="-1" role="dialog" aria-labelledby="duplicateItemModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="duplicateItemModalLabel">Attachment Set Already Exists</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                The selected attachment set is already bound to the VPN
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div>
    <a asp-action="GetAllByTenantID" asp-route-tenantID="@ViewBag.Tenant.TenantId">Back to VPNs List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">

        (function ($) {

            var $form = $("#createForm"),
                $wizard = $("#createVpnWizard");

            const uri = "/Vpn/";

            //Create wizard
            $wizard.steps({
                headerTag: "h3",
                bodyTag: "section",
                transitionEffect: "fade",
                onStepChanging: function (event, currentIndex, newIndex) {

                    // Allways allow previous action even if the current form is not valid!
                    if (currentIndex > newIndex) {
                        return true;
                    }

                    $form.validate().settings.ignore = ":disabled,:hidden";
                    return $form.valid();
                },
                onFinishing: function (event, currentIndex) {
                    $form.validate().settings.ignore = ":disabled";
                    return $form.valid();
                },
                onFinished: function (event, currentIndex) {

                   $form.submit();
                }
            });

            var $protocolType = $('#ProtocolType'),
                protocolType = $protocolType[0],
                $addressFamily = $('#AddressFamily'),
                addressFamily = $addressFamily[0],
                $topologyType = $('#TopologyType'),
                topologyType = $topologyType[0],
                $tenancyType = $('#TenancyType'),
                $ownerTenantId = $('#TenantId'),
                ownerTenantId = $ownerTenantId[0],
                $participantTenant = $('#TenantName'),
                participantTenant = $participantTenant[0],
                $attachmentSet = $('#AttachmentSet'),
                attachmentSet = $attachmentSet[0],
                $addAttachmentSetBtn = $('#addAttachmentSet');

            // Handle changes to the protocol type dropdown list selection
            $protocolType.on('change', function (e) {

                if (this.value === null || this.value === "") {

                    addressFamily.selectedIndex = 0;
                    addressFamily.disabled = true;
                    topologyType.selectedIndex = 0;
                    topologyType.disabled = true;
                }
                else {

                    Mind.Utilities.populateElement($addressFamily, uri + "AddressFamilies", { protocolType: this.value });
                    Mind.Utilities.populateElement($topologyType, uri + "TopologyTypes", { protocolType: this.value });
                }
            });

            if (protocolType.value === null || protocolType.value === "") {

                addressFamily.selectedIndex = 0;
                addressFamily.disabled = true;
                topologyType.selectedIndex = 0;
                topologyType.disabled = true;
            }

            $tenancyType.on('change', function (e) {

                attachmentSet.selectedIndex = 0;
                attachmentSet.disabled = true;

                if (this.value === null || this.value === "") {

                    participantTenant.selectedIndex = 0;
                    participantTenant.disabled = true;
                }
                else {

                    Mind.Utilities.populateElement($participantTenant, uri + "ParticipantTenants", {
                        ownerTenantId: ownerTenantId.value, tenancyType: this.value
                    });
                }
            });

            $participantTenant.on('change', function (e) {

                if (this.value === null || this.value === "") {

                    attachmentSet.selectedIndex = 0;
                    attachmentSet.disabled = true;
                }
                else {

                    Mind.Utilities.populateElement($attachmentSet, uri + "AttachmentSets", {
                        tenantName: this.value
                    });
                }
            });

            $addAttachmentSetBtn.on('click', function (e) {

                if (attachmentSet.value !== null && attachmentSet.value !== "") {

                    var $selected = $attachmentSet.find(":selected");
                    var attachmentSetName = $selected.data('name');

                    var exists = $('#grid')
                        .find('td > input[type="text"]')
                        .filter(function () {
                            return this.value === attachmentSetName;
                        })
                        .length > 0;

                    if (exists) {

                        // The attachment set already exists in the table
                        $("#duplicateItemModal").modal();
                    }
                    else {

                        var attachmentRedundancy = $selected.data('attachment-redundancy');
                        var tenantName = $selected.data('tenant-name');
                        var regionName = $selected.data('region-name');
                        var arrName = "VpnAttachmentSets";
                        var rowId = 0;
                        var rowCount = $('#grid').find('tbody tr').length;
                        if (rowCount > 0) {
                            rowId = rowCount;
                        }

                        // Create new row and append to the grid 
                        var row = '<tr id="gridRow_' + rowId + '" data-row-id = ' + rowId + '>' +
                            '<td><input type="text" readonly name="' + arrName + '[' + rowId + '].AttachmentSetName" value="' + attachmentSetName + '"></input></td>' +
                            '<td><input type="text" readonly name="' + arrName + '[' + rowId + '].TenantName" value="' + tenantName + '"></input></td>' +
                            '<td><input type="text" readonly name="' + arrName + '[' + rowId + '].Region" value="' + regionName + '"></input></td>' +
                            '<td><input type="text" readonly name="' + arrName + '[' + rowId + '].AttachmentRedundancy" value="' + attachmentRedundancy + '"></input></td>';

                        if (topologyType.value === "HubAndSpoke") {
                            row = row + '<td><div class="custom-control custom-checkbox"> ' +
                                '<input class="custom-control-input mind-grid-checkbox" id="IsHub_' + rowId + '" type="checkbox" name="' + arrName + '[' + rowId + '].IsHub" value="false">' +
                                '<label class="custom-control-label" for="IsHub_' + rowId + '"></label>' +
                                '</div></td>';
                        }
                        else {
                            row = row + '<td></td>';
                        }

                        row = row + '<td><button type="button" id="Delete[' + rowId + ']" class="btn btn-sm btn-secondary mind-grid-delete-row" data-row-id= ' + rowId + '><i class="fas fa-trash"></i></button></td>' +
                                    '</tr>';
                            
                        $('#grid > tbody:last-child').append($(row));
                    }
                }
            });

            //Bind to click event of trash buttons in the grid rows
            $('#grid').on('click', '.mind-grid-delete-row', function (e) {

                var deleteRowId = $(this).data('row-id');
                var $row = $('#gridRow_' + deleteRowId);
                $row.remove();
            });

            // Bind to checkbox change event to set value - this is needed to send correct boolean value
            // to the controller on form submit
            $('#grid').on('change', '.mind-grid-checkbox', function (e) {

                this.value = this.checked;
            });


            // Initialise all tool-tips
            $('[data-toggle="tooltip"]').tooltip();

        }(jQuery));

    </script>
}
