{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.",
    "version" : "1.0.0",
    "title" : "MIND API",
    "contact" : {
      "email" : "jonathan.beasley@thomsonreuters.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "raid.thomsonreuters.com",
  "basePath" : "/v1",
  "tags" : [ {
    "name" : "tenant",
    "description" : "List, create, delete tenants",
    "externalDocs" : {
      "description" : "Find out more about how to create and manage tenants",
      "url" : "https://thehub.thomsonreuters.com/docs/DOC-2198311"
    }
  }, {
    "name" : "tenant device",
    "description" : "List, create, delete tenant devices and ports"
  }, {
    "name" : "tenant attachment",
    "description" : "List, create, delete attachments"
  }, {
    "name" : "tenant vif",
    "description" : "List, create, delete vifs"
  }, {
    "name" : "tenant routing instance",
    "description" : "Manage routing instances and related objects such as BGP peers"
  }, {
    "name" : "tenant ipv4 network",
    "description" : "List, create, delete IPv4 networks for tenants"
  }, {
    "name" : "tenant attachment set",
    "description" : "List, create, delete attachment-sets"
  }, {
    "name" : "vpn",
    "description" : "List, create, delete virtual private networks"
  }, {
    "name" : "infrastructure device",
    "description" : "List, create, delete infrastructure devices"
  }, {
    "name" : "infrastructure attachment",
    "description" : "List, create, delete infrastructure attachments"
  }, {
    "name" : "infrastructure vif",
    "description" : "List, create, delete infrastructure vifs"
  } ],
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/tenant" : {
      "get" : {
        "tags" : [ "tenant" ],
        "summary" : "Find all tenants",
        "description" : "Returns all tenants",
        "operationId" : "getAllTenants",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Tenant"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tenant" ],
        "summary" : "Create a tenant",
        "description" : "This can only be done by the logged in tenant.",
        "operationId" : "createTenant",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Created tenant object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Tenant"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Tenant"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/{tenantId}" : {
      "get" : {
        "tags" : [ "tenant" ],
        "summary" : "Find tenant by ID",
        "description" : "Returns a single tenant",
        "operationId" : "getTenantById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Tenant"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant" ],
        "summary" : "Deletes a tenant",
        "description" : "",
        "operationId" : "deleteTenant",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/{tenantId}/routing-instance" : {
      "get" : {
        "tags" : [ "tenant routing instance" ],
        "summary" : "Find all routing instances for a given tenant",
        "description" : "Returns all routing instances for a given tenant",
        "operationId" : "getAllRoutingInstancesByTenant",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RoutingInstance"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/routing-instance/{routingInstanceId}" : {
      "get" : {
        "tags" : [ "tenant routing instance" ],
        "summary" : "Find a single routing instance",
        "description" : "Returns a single routing instance",
        "operationId" : "getRoutingInstanceById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "routingInstanceId",
          "in" : "path",
          "description" : "ID of the routing instance",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/RoutingInstance"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/routing-instance/{routingInstanceId}/bgp-peer" : {
      "get" : {
        "tags" : [ "tenant routing instance" ],
        "summary" : "Find all BGP peers for a given routing instance",
        "description" : "Returns all BGP peers for a given routing instance",
        "operationId" : "getAllBgpPeersByRoutingInstance",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "routingInstanceId",
          "in" : "path",
          "description" : "ID of the routing instance",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BgpPeer"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tenant routing instance" ],
        "summary" : "Add a bgp peer to a given routing instance",
        "operationId" : "addRoutingInstanceBgpPeer",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "routingInstanceId",
          "in" : "path",
          "description" : "ID of the routing instance",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "request object that creates a new BGP peer entry",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BgpPeer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/BgpPeer"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant routing instance" ],
        "summary" : "Delete a BGP peer from a given routing instance",
        "description" : "",
        "operationId" : "deleteRoutingInstanceBgpPeer",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "routingInstanceId",
          "in" : "path",
          "description" : "ID of the routing instance",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/{tenantId}/attachment-set" : {
      "get" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Find all attachment sets for a given tenant",
        "description" : "Returns all attachment sets for a given tenant",
        "operationId" : "getAttachmentSetsByTenantId",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Attachment"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Create a new attachment set",
        "description" : "",
        "operationId" : "addAttachmentSet",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "attachment set request object that generates a new attachment set",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AttachmentSetRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AttachmentSet"
              }
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/attachment-set/{attachmentSetId}" : {
      "get" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Find an attachment set by ID",
        "description" : "Returns a single attachment set",
        "operationId" : "getAttachmentSetById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/AttachmentSet"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Deletes an attachment set",
        "description" : "",
        "operationId" : "deleteAttachmentSet",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/attachment-set/{attachmentSetId}/routing-instance/{routingInstanceId}" : {
      "post" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Add a routing instance to a given attachment set",
        "operationId" : "addAttachmentSetRoutingInstance",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "routingInstanceId",
          "in" : "path",
          "description" : "ID of a routing instance to be added to the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "request object that generates a new routing instance entry for an attachment set",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AttachmentSetRoutingInstance"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Delete a routing instance from an attachment set",
        "description" : "",
        "operationId" : "deleteAttachmentSetRoutingInstance",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "routingInstanceId",
          "in" : "path",
          "description" : "ID of a routing instance to be added to the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/attachment-set/{attachmentSetId}/inbound-policy/ipv4-network/{tenantIpv4NetworkId}" : {
      "post" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Add a tenant IPv4 network to the inbound policy of a given attachment set",
        "operationId" : "addAttachmentSetInboundPoloicyTenantIpv4Network",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "tenantIpv4NetworkId",
          "in" : "path",
          "description" : "ID of the tenant IPv4 network",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "request object that generates a new inbound policy entry for a tenant IPv4 network",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VpnTenantIpv4NetworkIn"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Delete a tenant IPv4 network from the inbound policy of a given attachment set",
        "description" : "",
        "operationId" : "deleteAttachmentSetInboundPolicyTenantIpv4Network",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "tenantIpv4NetworkId",
          "in" : "path",
          "description" : "ID of the tenant IPv4 network",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/attachment-set/{attachmentSetId}/outbound-policy/ipv4-network/{tenantIpv4NetworkId}" : {
      "post" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Add a tenant IPv4 network to the outbound policy of a given attachment set",
        "operationId" : "addAttachmentSetOutboundPolicyTenantIpv4Network",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "tenantIpv4NetworkId",
          "in" : "path",
          "description" : "ID of the tenant IPv4 network",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "request object that generates a new outbound policy entry for an tenant IPv4 network",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VpnTenantIpv4NetworkOut"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant attachment set" ],
        "summary" : "Delete a tenant IPv4 network from the outbound policy of a given attachment set",
        "description" : "",
        "operationId" : "deleteAttachmentSetOutboundPolicyTenantIpv4Network",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "tenantIpv4NetworkId",
          "in" : "path",
          "description" : "ID of the tenant IPv4 network",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/{tenantId}/device" : {
      "get" : {
        "tags" : [ "tenant device" ],
        "summary" : "Find all devices for a given tenant",
        "description" : "Returns all infrastructure devices",
        "operationId" : "getAllTenantDevices",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TenantDevice"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tenant device" ],
        "summary" : "Create a new tenant device",
        "description" : "",
        "operationId" : "addTenantDevice",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "device request object that generates a new device",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TenantDeviceRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/TenantDevice"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/device/{deviceId}" : {
      "get" : {
        "tags" : [ "tenant device" ],
        "summary" : "Find device by ID",
        "description" : "Returns a single device",
        "operationId" : "getTenantDeviceById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TenantDevice"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "tenant device" ],
        "summary" : "Update an existing device",
        "description" : "",
        "operationId" : "updateTenantDevice",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "device update object that updates an existing device",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TenantDeviceUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TenantDevice"
              }
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant device" ],
        "summary" : "Deletes a device",
        "description" : "",
        "operationId" : "deleteTenantDevice",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/device/{deviceId}/port" : {
      "get" : {
        "tags" : [ "tenant device" ],
        "summary" : "Find all ports for a given tenant device",
        "description" : "Returns all ports for a given tenant device",
        "operationId" : "getPortsByTenantDevice",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Port"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tenant device" ],
        "summary" : "Create a new port",
        "operationId" : "createTenantPort",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Created port object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PortRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Port"
              }
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/device/port/{portId}" : {
      "get" : {
        "tags" : [ "tenant device" ],
        "summary" : "Find port by ID",
        "description" : "Returns a single port",
        "operationId" : "getTenantPortById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "portId",
          "in" : "path",
          "description" : "ID of the port",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Port"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant device" ],
        "summary" : "Deletes a port",
        "description" : "",
        "operationId" : "deleteTenantPort",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "portId",
          "in" : "path",
          "description" : "ID of the port",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/{tenantId}/ipv4-network" : {
      "get" : {
        "tags" : [ "tenant ipv4 network" ],
        "summary" : "Find all IPv4 networks for a given tenant",
        "description" : "Returns all IPv4 networks for a given tenant",
        "operationId" : "getIpv4NetworksByTenantId",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TenantIpv4Network"
              }
            }
          },
          "400" : {
            "description" : "Invalid tenant ID supplied"
          }
        }
      },
      "post" : {
        "tags" : [ "tenant ipv4 network" ],
        "summary" : "Create a new tenant IPv4 network",
        "description" : "",
        "operationId" : "addTenantIpv4Network",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "IPv4 network request object that generates a new IPv4 network",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TenantIpv4Network"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TenantIpv4Network"
              }
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/ipv4-network/{tenantIpv4NetworkId}" : {
      "get" : {
        "tags" : [ "tenant ipv4 network" ],
        "summary" : "Find a tenant IPv4 network by ID",
        "description" : "Returns a single tenant IPv4 network",
        "operationId" : "getTenantIpv4NetworkById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantIpv4NetworkId",
          "in" : "path",
          "description" : "ID of the tenant IPv4 network",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TenantIpv4Network"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Tenant IPv4 network not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant ipv4 network" ],
        "summary" : "Deletes a tenant IPv4 network",
        "description" : "",
        "operationId" : "deleteTenantIpv4Network",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantIpv4NetworkId",
          "in" : "path",
          "description" : "ID of the tenant IPv4 network",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/infrastructure/device" : {
      "get" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Find all infrastructure devices",
        "description" : "Returns all infrastructure devices",
        "operationId" : "getAllInfrastructureDevices",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/InfrastructureDevice"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Create a new infrastructure device",
        "description" : "",
        "operationId" : "addInfrastructureDevice",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "device request object that generates a new device",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureDeviceRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/InfrastructureDevice"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/infrastructure/device/{deviceId}" : {
      "get" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Find device by ID",
        "description" : "Returns a single device",
        "operationId" : "getInfrastructureDeviceById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/InfrastructureDevice"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Update an existing device",
        "description" : "",
        "operationId" : "updateInfrastructureDevice",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "device update object that updates an existing device",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureDeviceUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/InfrastructureDevice"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Deletes a device",
        "description" : "",
        "operationId" : "deleteInfrastructureDevice",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/infrastructure/device/{deviceId}/port" : {
      "get" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Find all ports for a given infrastructure device",
        "description" : "Returns all ports for a given infrastructure device",
        "operationId" : "getPortsByInfrastructureDevice",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Port"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Create a new port",
        "operationId" : "createInfrastructurePort",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Created port object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PortRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Port"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/infrastructure/device/port/{portId}" : {
      "get" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Find port by ID",
        "description" : "Returns a single port",
        "operationId" : "getInfrastructurePortById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "portId",
          "in" : "path",
          "description" : "ID of the port",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Port"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "infrastructure device" ],
        "summary" : "Deletes a port",
        "description" : "",
        "operationId" : "deleteInfrastructurePort",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "portId",
          "in" : "path",
          "description" : "ID of the port",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/{tenantId}/attachment" : {
      "get" : {
        "tags" : [ "tenant attachment" ],
        "summary" : "Find all attachments for a given tenant",
        "description" : "Returns all attachments for a given tenant",
        "operationId" : "getTenantAttachmentsByTenantId",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Attachment"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tenant attachment" ],
        "summary" : "Create a new network attachment",
        "description" : "",
        "operationId" : "addTenantAttachment",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "ID of the tenant",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "attachment request object that generates a new attachment",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TenantAttachmentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Attachment"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/attachment/{attachmentId}" : {
      "get" : {
        "tags" : [ "tenant attachment" ],
        "summary" : "Find attachment by ID",
        "description" : "Returns a single attachment",
        "operationId" : "getTenantAttachmentById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Attachment"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "tenant attachment" ],
        "summary" : "Update an existing attachment",
        "description" : "",
        "operationId" : "updateTenantAttachment",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "attachment update object that updates an existing attachment",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AttachmentUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Attachment"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant attachment" ],
        "summary" : "Deletes an attachment",
        "description" : "",
        "operationId" : "deleteTenantAttachment",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/attachment/{attachmentId}/vif" : {
      "get" : {
        "tags" : [ "tenant vif" ],
        "summary" : "Find all vifs for a given attachment",
        "description" : "Returns all vifs for a given attachment",
        "operationId" : "getAllTenantVifsByAttachmentId",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Vif"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tenant vif" ],
        "summary" : "Create a new vif",
        "description" : "",
        "operationId" : "addTenantVif",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "vif request object that generates a new vif",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TenantVifRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vif"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/tenant/attachment/vif/{vifId}" : {
      "get" : {
        "tags" : [ "tenant vif" ],
        "summary" : "Find vif by ID",
        "description" : "Returns a single vif",
        "operationId" : "getTenantVifById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vifId",
          "in" : "path",
          "description" : "ID of the vif",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vif"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "tenant vif" ],
        "summary" : "Update an existing vif",
        "description" : "",
        "operationId" : "updateTenantVif",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vifId",
          "in" : "path",
          "description" : "ID of the vif",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "vif update object that updates an existing vif",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VifUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vif"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tenant vif" ],
        "summary" : "Deletes a vif",
        "description" : "",
        "operationId" : "deleteTenantVif",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vifId",
          "in" : "path",
          "description" : "ID of the vif",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/vpn" : {
      "get" : {
        "tags" : [ "vpn" ],
        "summary" : "Return all vpns",
        "description" : "Returns all vpns",
        "operationId" : "getAllVpns",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Vpn"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "vpn" ],
        "summary" : "Create a new virtual private network",
        "description" : "",
        "operationId" : "addVpn",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "vpn request object that generates a new vpn",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VpnRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vpn"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/vpn/{vpnId}" : {
      "get" : {
        "tags" : [ "vpn" ],
        "summary" : "Find vpn by ID",
        "description" : "Returns a single vpn",
        "operationId" : "getVpnById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vpnId",
          "in" : "path",
          "description" : "ID of the vpn",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vpn"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "vpn" ],
        "summary" : "Update an existing vpn",
        "description" : "",
        "operationId" : "updateVpn",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vpnId",
          "in" : "path",
          "description" : "ID of the vpn",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "vpn update object that updates an existing vpn",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VpnUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vpn"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "vpn" ],
        "summary" : "Deletes a vpn",
        "description" : "",
        "operationId" : "deleteVpn",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vpnId",
          "in" : "path",
          "description" : "ID of the vpn",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/vpn/{vpnId}/attachment-set/{attachmentSetId}" : {
      "post" : {
        "tags" : [ "vpn" ],
        "summary" : "Add an attachment set to a virtual private network",
        "description" : "",
        "operationId" : "addVpnAttachmentSet",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vpnId",
          "in" : "path",
          "description" : "ID of the vpn",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "vpn" ],
        "summary" : "Remove an attachment set from a vpn",
        "description" : "",
        "operationId" : "removeAttachmentSet",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vpnId",
          "in" : "path",
          "description" : "ID of the vpn",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "attachmentSetId",
          "in" : "path",
          "description" : "ID of the attachment set",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/infrastructure/{deviceId}/attachment" : {
      "get" : {
        "tags" : [ "infrastructure attachment" ],
        "summary" : "Find all attachments for a given device",
        "description" : "Returns all attachments for a given tenant",
        "operationId" : "getInfrastructureAttachmentsByDeviceId",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the infrastructure device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Attachment"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "infrastructure attachment" ],
        "summary" : "Create a new network attachment",
        "description" : "",
        "operationId" : "addInfrastructureAttachment",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "ID of the infrastructure device",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "attachment request object that generates a new attachment",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureAttachmentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Attachment"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/infrastructure/attachment/{attachmentId}" : {
      "get" : {
        "tags" : [ "infrastructure attachment" ],
        "summary" : "Find attachment by ID",
        "description" : "Returns a single attachment",
        "operationId" : "getInfrastructureAttachmentById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Attachment"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "infrastructure attachment" ],
        "summary" : "Update an existing attachment",
        "description" : "",
        "operationId" : "updateInfrastructureAttachment",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "attachment update object that updates an existing attachment",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AttachmentUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Attachment"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "infrastructure attachment" ],
        "summary" : "Deletes an attachment",
        "description" : "",
        "operationId" : "deleteInfrastructureAttachment",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/infrastructure/attachment/{attachmentId}/vif" : {
      "get" : {
        "tags" : [ "infrastructure vif" ],
        "summary" : "Find all vifs for a given attachment",
        "description" : "Returns all vifs for a given attachment",
        "operationId" : "getAllInfrastructureVifsByAttachmentId",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Vif"
              }
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "infrastructure vif" ],
        "summary" : "Create a new vif",
        "description" : "",
        "operationId" : "addInfrastructureVif",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "attachmentId",
          "in" : "path",
          "description" : "ID of the attachment",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "vif request object that generates a new vif",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InfrastructureVifRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vif"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/infrastructure/attachment/vif/{vifId}" : {
      "get" : {
        "tags" : [ "infrastructure vif" ],
        "summary" : "Find vif by ID",
        "description" : "Returns a single vif",
        "operationId" : "getInfrastructureVifById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vifId",
          "in" : "path",
          "description" : "ID of the vif",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vif"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "infrastructure vif" ],
        "summary" : "Update an existing vif",
        "description" : "",
        "operationId" : "updateInfrastructureVif",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vifId",
          "in" : "path",
          "description" : "ID of the vif",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "vif update object that updates an existing vif",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VifUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Vif"
            }
          },
          "400" : {
            "description" : "Validation error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "infrastructure vif" ],
        "summary" : "Deletes a vif",
        "description" : "",
        "operationId" : "deleteInfrastructureVif",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "vifId",
          "in" : "path",
          "description" : "ID of the vif",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "404" : {
            "description" : "The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "description" : "",
        "operationId" : "loginUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "X-Rate-Limit" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "calls per hour allowed by the user"
              },
              "X-Expires-After" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "date in UTC when token expires"
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "description" : "",
        "operationId" : "logoutUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "description" : "",
        "operationId" : "getUserByName",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing. ",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Updated user object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    }
  },
  "definitions" : {
    "ApiResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "example" : {
        "code" : 0,
        "type" : "type",
        "message" : "message"
      }
    },
    "TenantAttachmentRequest" : {
      "type" : "object",
      "required" : [ "locationName" ],
      "properties" : {
        "isLayer3" : {
          "type" : "boolean",
          "description" : "Determines if the attachment is enabled for layer 3",
          "default" : false
        },
        "bundleRequired" : {
          "type" : "boolean",
          "description" : "Determines if a bundle style of attachment is required",
          "default" : false
        },
        "multiportRequired" : {
          "type" : "boolean",
          "description" : "Determines if a multi port style of attachment is required",
          "default" : false
        },
        "isTagged" : {
          "type" : "boolean",
          "description" : "Determines if the attachment should be enabled for tagging",
          "default" : false
        },
        "locationName" : {
          "type" : "string",
          "description" : "The name of a provider network location within which the new attachment will be provisioned"
        },
        "planeName" : {
          "type" : "string",
          "description" : "Optional name of the provider network plane within which the attachment will be provisioned",
          "enum" : [ "Red", "Blue" ]
        },
        "attachmentBandwidthGbps" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The required bandwidth of the attachment in Gbps"
        },
        "contractBandwidthMbps" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The required contract bandwidth in Mbps"
        },
        "trustReceivedCosDscp" : {
          "type" : "boolean",
          "description" : "Determines whether DSCP and COS markings of packets sent from the tenant network should be trusted by the provider",
          "default" : false
        },
        "IpAddress1" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the first connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask1" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the first connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress2" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the second connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask2" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the second connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress3" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the third connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask3" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the third connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress4" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the fourth connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask4" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the fourth connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        }
      },
      "example" : {
        "locationName" : "locationName",
        "contractBandwidthMbps" : 6,
        "isLayer3" : false,
        "attachmentBandwidthGbps" : 0,
        "isTagged" : false,
        "planeName" : "Red",
        "SubnetMask1" : "SubnetMask1",
        "SubnetMask2" : "SubnetMask2",
        "multiportRequired" : false,
        "SubnetMask3" : "SubnetMask3",
        "SubnetMask4" : "SubnetMask4",
        "bundleRequired" : false,
        "trustReceivedCosDscp" : false,
        "IpAddress1" : "IpAddress1",
        "IpAddress2" : "IpAddress2",
        "IpAddress3" : "IpAddress3",
        "IpAddress4" : "IpAddress4"
      },
      "xml" : {
        "name" : "TenantAttachmentRequest"
      }
    },
    "InfrastructureAttachmentRequest" : {
      "type" : "object",
      "required" : [ "deviceName" ],
      "properties" : {
        "isLayer3" : {
          "type" : "boolean",
          "description" : "Determines if the attachment is enabled for layer 3",
          "default" : false
        },
        "bundleRequired" : {
          "type" : "boolean",
          "description" : "Determines if a bundle style of attachment is required",
          "default" : false
        },
        "multiportRequired" : {
          "type" : "boolean",
          "description" : "Determines if a multi port style of attachment is required",
          "default" : false
        },
        "isTagged" : {
          "type" : "boolean",
          "description" : "Determines if the attachment should be enabled for tagging",
          "default" : false
        },
        "deviceName" : {
          "type" : "string",
          "description" : "Name of the device to which the attachment will be assigned"
        },
        "attachmentBandwidthGbps" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The required bandwidth of the attachment in Gbps"
        },
        "IpAddress1" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the first connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask1" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the first connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress2" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the second connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask2" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the second connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress3" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the third connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask3" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the third connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress4" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the fourth connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask4" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the fourth connection in the attachment",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        }
      },
      "example" : {
        "isLayer3" : false,
        "attachmentBandwidthGbps" : 0,
        "deviceName" : "deviceName",
        "isTagged" : false,
        "SubnetMask1" : "SubnetMask1",
        "SubnetMask2" : "SubnetMask2",
        "multiportRequired" : false,
        "SubnetMask3" : "SubnetMask3",
        "SubnetMask4" : "SubnetMask4",
        "bundleRequired" : false,
        "IpAddress1" : "IpAddress1",
        "IpAddress2" : "IpAddress2",
        "IpAddress3" : "IpAddress3",
        "IpAddress4" : "IpAddress4"
      },
      "xml" : {
        "name" : "TenantAttachmentRequest"
      }
    },
    "AttachmentUpdate" : {
      "type" : "object",
      "properties" : {
        "trustReceivedCosDscp" : {
          "type" : "boolean",
          "description" : "Determines whether DSCP and COS markings of packets should be trusted by the provider"
        }
      },
      "example" : {
        "trustReceivedCosDscp" : true
      },
      "xml" : {
        "name" : "AttachmenUpdate"
      }
    },
    "Attachment" : {
      "type" : "object",
      "properties" : {
        "attachmentId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "ID of the attachment"
        },
        "trustReceivedCosDscp" : {
          "type" : "boolean",
          "description" : "Determines whether DSCP and COS markings of packets should be trusted by the provider"
        },
        "isLayer3" : {
          "type" : "boolean",
          "description" : "Determines whether the attachment is enabled for layer 3",
          "default" : false
        },
        "isBundle" : {
          "type" : "boolean",
          "description" : "Determines if the attachment is delivered as a bundle",
          "default" : false
        },
        "isMultiport" : {
          "type" : "boolean",
          "description" : "Determines if the attachment is delivered as a multiport",
          "default" : false
        },
        "isTagged" : {
          "type" : "boolean",
          "description" : "Determines if the attachment is enabled with tagging",
          "default" : false
        },
        "tenant" : {
          "$ref" : "#/definitions/Tenant"
        },
        "infrastructureDevice" : {
          "$ref" : "#/definitions/InfrastructureDevice"
        },
        "attachmentBandwidthGbps" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The bandwidth of the attachment in Gbps"
        },
        "contractBandwidthPool" : {
          "$ref" : "#/definitions/ContractBandwidthPool"
        },
        "routingInstance" : {
          "$ref" : "#/definitions/RoutingInstance"
        }
      },
      "example" : {
        "isBundle" : false,
        "isTagged" : false,
        "contractBandwidthPool" : {
          "name" : "name",
          "contractBandwidthMbps" : 5
        },
        "isMultiport" : false,
        "trustReceivedCosDscp" : true,
        "attachmentId" : 0,
        "isLayer3" : false,
        "attachmentBandwidthGbps" : 5,
        "infrastructureDevice" : {
          "useLayer2InterfaceMtu" : true,
          "planeName" : "planeName",
          "locationName" : "locationName",
          "name" : "name",
          "description" : "description",
          "deviceModel" : "deviceModel",
          "ports" : [ {
            "portPool" : "portPool",
            "name" : "name",
            "portStatus" : "portStatus",
            "portId" : 1,
            "type" : "type",
            "portSfp" : "portSfp",
            "portRole" : "portRole"
          }, {
            "portPool" : "portPool",
            "name" : "name",
            "portStatus" : "portStatus",
            "portId" : 1,
            "type" : "type",
            "portSfp" : "portSfp",
            "portRole" : "portRole"
          } ],
          "deviceID" : 6,
          "deviceStatus" : "deviceStatus"
        },
        "routingInstance" : {
          "routingInstanceId" : 0,
          "name" : "name"
        },
        "tenant" : {
          "tenantId" : 0,
          "name" : "name"
        }
      },
      "xml" : {
        "name" : "Attachment"
      }
    },
    "AttachmentSetRequest" : {
      "type" : "object",
      "properties" : {
        "region" : {
          "type" : "string",
          "description" : "The geographic region within which the attachment set operates",
          "enum" : [ "EMEA", "ASIAPAC", "AMERS" ]
        },
        "subRegion" : {
          "type" : "string",
          "description" : "The sub-region within which the attachment set operates",
          "minLength" : 1,
          "maxLength" : 15
        },
        "attachmentRedundancy" : {
          "type" : "string",
          "description" : "Determines the type of attachment redundancy supported by the attachment set",
          "enum" : [ "Bronze", "Silver", "Gold", "Custom" ]
        },
        "isLayer3" : {
          "type" : "boolean",
          "description" : "Determines if the attachment set should be enabled for layer 3",
          "default" : true
        },
        "routingInstances" : {
          "type" : "array",
          "description" : "Routing instances to add to the attachment set",
          "items" : {
            "$ref" : "#/definitions/AttachmentSetRequest_routingInstances"
          }
        }
      },
      "example" : {
        "subRegion" : "subRegion",
        "routingInstances" : [ {
          "routingInstanceId" : 0,
          "locaIpRoutingPreference" : 6,
          "advertisedIpRoutingPreference" : 1
        }, {
          "routingInstanceId" : 0,
          "locaIpRoutingPreference" : 6,
          "advertisedIpRoutingPreference" : 1
        } ],
        "attachmentRedundancy" : "Bronze",
        "isLayer3" : true,
        "region" : "EMEA"
      },
      "xml" : {
        "name" : "AttachmentSetRequest"
      }
    },
    "AttachmentSet" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "System-generated name of the attachment set"
        },
        "region" : {
          "type" : "string",
          "description" : "The geographic region within which the attachment set operates"
        },
        "subRegion" : {
          "type" : "string",
          "description" : "The sub-region within which the attachment set operates"
        },
        "attachmentRedundancy" : {
          "type" : "string",
          "description" : "Determines the type of attachment redundancy supported by the attachment set"
        },
        "isLayer3" : {
          "type" : "boolean",
          "description" : "Determines if the attachment set is enabled for layer 3"
        }
      },
      "example" : {
        "subRegion" : "subRegion",
        "name" : "name",
        "attachmentRedundancy" : "attachmentRedundancy",
        "isLayer3" : true,
        "region" : "region"
      },
      "xml" : {
        "name" : "AttachmentSet"
      }
    },
    "Tenant" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "tenantId" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the tenant",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9-]+$"
        }
      },
      "example" : {
        "tenantId" : 0,
        "name" : "name"
      },
      "xml" : {
        "name" : "Tenant"
      }
    },
    "InfrastructureDeviceRequest" : {
      "type" : "object",
      "required" : [ "description", "deviceModel", "deviceStatus", "locationName", "name", "planeName" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the device",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9-]+$"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the device",
          "maxLength" : 200
        },
        "deviceModel" : {
          "type" : "string",
          "description" : "The model of the device"
        },
        "planeName" : {
          "type" : "string",
          "description" : "The provider network plane to which the device belongs"
        },
        "locationName" : {
          "type" : "string",
          "description" : "The location of the device"
        },
        "deviceStatus" : {
          "type" : "string",
          "description" : "The status of the device"
        },
        "useLayer2InterfaceMtu" : {
          "type" : "boolean",
          "description" : "Determines if layer 2 overhead is included in the device MTU calculation"
        },
        "ports" : {
          "type" : "array",
          "description" : "List of ports for the device",
          "items" : {
            "$ref" : "#/definitions/Port"
          }
        }
      },
      "example" : {
        "useLayer2InterfaceMtu" : true,
        "planeName" : "planeName",
        "locationName" : "locationName",
        "name" : "name",
        "description" : "description",
        "deviceModel" : "deviceModel",
        "ports" : [ {
          "portPool" : "portPool",
          "name" : "name",
          "portStatus" : "portStatus",
          "portId" : 1,
          "type" : "type",
          "portSfp" : "portSfp",
          "portRole" : "portRole"
        }, {
          "portPool" : "portPool",
          "name" : "name",
          "portStatus" : "portStatus",
          "portId" : 1,
          "type" : "type",
          "portSfp" : "portSfp",
          "portRole" : "portRole"
        } ],
        "deviceStatus" : "deviceStatus"
      },
      "xml" : {
        "name" : "DeviceRequest"
      }
    },
    "InfrastructureDeviceUpdate" : {
      "type" : "object",
      "required" : [ "description", "deviceModel", "deviceStatus", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the device",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9-]+$"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the device",
          "maxLength" : 200
        },
        "deviceModel" : {
          "type" : "string",
          "description" : "The model of the device"
        },
        "deviceStatus" : {
          "type" : "string",
          "description" : "The status of the device"
        },
        "useLayer2InterfaceMtu" : {
          "type" : "boolean",
          "description" : "Determines if layer 2 overhead is included in the device MTU calculation"
        }
      },
      "example" : {
        "useLayer2InterfaceMtu" : true,
        "name" : "name",
        "description" : "description",
        "deviceModel" : "deviceModel",
        "deviceStatus" : "deviceStatus"
      },
      "xml" : {
        "name" : "DeviceUpdate"
      }
    },
    "InfrastructureDevice" : {
      "type" : "object",
      "properties" : {
        "deviceID" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the device"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the device"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the device"
        },
        "useLayer2InterfaceMtu" : {
          "type" : "boolean",
          "description" : "Determines if layer 2 overhead is included in the device MTU calculation"
        },
        "deviceModel" : {
          "type" : "string",
          "description" : "The model of the device"
        },
        "planeName" : {
          "type" : "string",
          "description" : "The provider network plane to which the device belongs"
        },
        "locationName" : {
          "type" : "string",
          "description" : "The location of the device"
        },
        "deviceStatus" : {
          "type" : "string",
          "description" : "The status of the device"
        },
        "ports" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Port"
          }
        }
      },
      "example" : {
        "useLayer2InterfaceMtu" : true,
        "planeName" : "planeName",
        "locationName" : "locationName",
        "name" : "name",
        "description" : "description",
        "deviceModel" : "deviceModel",
        "ports" : [ {
          "portPool" : "portPool",
          "name" : "name",
          "portStatus" : "portStatus",
          "portId" : 1,
          "type" : "type",
          "portSfp" : "portSfp",
          "portRole" : "portRole"
        }, {
          "portPool" : "portPool",
          "name" : "name",
          "portStatus" : "portStatus",
          "portId" : 1,
          "type" : "type",
          "portSfp" : "portSfp",
          "portRole" : "portRole"
        } ],
        "deviceID" : 6,
        "deviceStatus" : "deviceStatus"
      },
      "xml" : {
        "name" : "Device"
      }
    },
    "TenantDeviceRequest" : {
      "type" : "object",
      "required" : [ "description", "deviceModel", "deviceStatus", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the device",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9-]+$"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the device",
          "maxLength" : 200
        },
        "deviceModel" : {
          "type" : "string",
          "description" : "The model of the device"
        },
        "deviceStatus" : {
          "type" : "string",
          "description" : "The status of the device"
        },
        "useLayer2InterfaceMtu" : {
          "type" : "boolean",
          "description" : "Determines if layer 2 overhead is included in the device MTU calculation"
        },
        "ports" : {
          "type" : "array",
          "description" : "List of ports for the device",
          "items" : {
            "$ref" : "#/definitions/Port"
          }
        }
      },
      "example" : {
        "useLayer2InterfaceMtu" : true,
        "name" : "name",
        "description" : "description",
        "deviceModel" : "deviceModel",
        "ports" : [ {
          "portPool" : "portPool",
          "name" : "name",
          "portStatus" : "portStatus",
          "portId" : 1,
          "type" : "type",
          "portSfp" : "portSfp",
          "portRole" : "portRole"
        }, {
          "portPool" : "portPool",
          "name" : "name",
          "portStatus" : "portStatus",
          "portId" : 1,
          "type" : "type",
          "portSfp" : "portSfp",
          "portRole" : "portRole"
        } ],
        "deviceStatus" : "deviceStatus"
      },
      "xml" : {
        "name" : "DeviceRequest"
      }
    },
    "TenantDeviceUpdate" : {
      "type" : "object",
      "required" : [ "description", "deviceModel", "deviceStatus", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the device",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9-]+$"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the device",
          "maxLength" : 200
        },
        "deviceModel" : {
          "type" : "string",
          "description" : "The model of the device"
        },
        "deviceStatus" : {
          "type" : "string",
          "description" : "The status of the device"
        },
        "useLayer2InterfaceMtu" : {
          "type" : "boolean",
          "description" : "Determines if layer 2 overhead is included in the device MTU calculation"
        }
      },
      "example" : {
        "useLayer2InterfaceMtu" : true,
        "name" : "name",
        "description" : "description",
        "deviceModel" : "deviceModel",
        "deviceStatus" : "deviceStatus"
      },
      "xml" : {
        "name" : "DeviceUpdate"
      }
    },
    "TenantDevice" : {
      "type" : "object",
      "properties" : {
        "deviceID" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the device",
          "minimum" : 1
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the device"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the device"
        },
        "useLayer2InterfaceMtu" : {
          "type" : "boolean",
          "description" : "Determines if layer 2 overhead is included in the device MTU calculation"
        },
        "deviceModel" : {
          "type" : "string",
          "description" : "The model of the device"
        },
        "deviceStatus" : {
          "type" : "string",
          "description" : "The status of the device"
        },
        "ports" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Port"
          }
        }
      },
      "example" : {
        "useLayer2InterfaceMtu" : true,
        "name" : "name",
        "description" : "description",
        "deviceModel" : "deviceModel",
        "ports" : [ {
          "portPool" : "portPool",
          "name" : "name",
          "portStatus" : "portStatus",
          "portId" : 1,
          "type" : "type",
          "portSfp" : "portSfp",
          "portRole" : "portRole"
        }, {
          "portPool" : "portPool",
          "name" : "name",
          "portStatus" : "portStatus",
          "portId" : 1,
          "type" : "type",
          "portSfp" : "portSfp",
          "portRole" : "portRole"
        } ],
        "deviceID" : 1,
        "deviceStatus" : "deviceStatus"
      },
      "xml" : {
        "name" : "Device"
      }
    },
    "PortRequest" : {
      "type" : "object",
      "required" : [ "name", "portPool", "portRole", "portSfp", "portStatus", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The type of the port, e.g. TenGigabitEtheret"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the port, e.g. 1/0"
        },
        "portSfp" : {
          "type" : "string",
          "description" : "Small Form-Factor Pluggable optic for the port"
        },
        "portStatus" : {
          "type" : "string",
          "description" : "Status of the port"
        },
        "portRole" : {
          "type" : "string",
          "description" : "The role of the port"
        },
        "portPool" : {
          "type" : "string",
          "description" : "Pool to which the port is assigned"
        }
      },
      "example" : {
        "portPool" : "portPool",
        "name" : "name",
        "portStatus" : "portStatus",
        "type" : "type",
        "portSfp" : "portSfp",
        "portRole" : "portRole"
      }
    },
    "Port" : {
      "type" : "object",
      "properties" : {
        "portId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the port"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the port, e.g. TenGigabitEtheret"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the port"
        },
        "portSfp" : {
          "type" : "string",
          "description" : "Small Form-Factor Pluggable optic for the port"
        },
        "portStatus" : {
          "type" : "string",
          "description" : "Status of the port"
        },
        "portRole" : {
          "type" : "string",
          "description" : "The role of the port"
        },
        "portPool" : {
          "type" : "string",
          "description" : "Pool to which the port is assigned"
        }
      },
      "example" : {
        "portPool" : "portPool",
        "name" : "name",
        "portStatus" : "portStatus",
        "portId" : 1,
        "type" : "type",
        "portSfp" : "portSfp",
        "portRole" : "portRole"
      }
    },
    "TenantVifRequest" : {
      "type" : "object",
      "required" : [ "tenantName" ],
      "properties" : {
        "isLayer3" : {
          "type" : "boolean",
          "description" : "Determines if the vif should be enabled for layer 3",
          "default" : false
        },
        "vlanTag" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "IEEE 802.1Q vlan tag allocated to the vif",
          "minimum" : 1,
          "maximum" : 4094
        },
        "tenantName" : {
          "type" : "string",
          "description" : "The name of the tenant"
        },
        "contractBandwidthMbps" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The required contract bandwidth in Mbps"
        },
        "trustReceivedCosDscp" : {
          "type" : "boolean",
          "description" : "Determines whether DSCP and COS markings of packets should be trusted by the provider",
          "default" : false
        },
        "IpAddress1" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the first connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask1" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the first connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress2" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the second connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask2" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the second connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress3" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the third connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask3" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the third connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress4" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the fourth connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask4" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the fourth connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        }
      },
      "example" : {
        "vlanTag" : 328,
        "contractBandwidthMbps" : 6,
        "isLayer3" : false,
        "tenantName" : "tenantName",
        "SubnetMask1" : "SubnetMask1",
        "SubnetMask2" : "SubnetMask2",
        "SubnetMask3" : "SubnetMask3",
        "SubnetMask4" : "SubnetMask4",
        "trustReceivedCosDscp" : false,
        "IpAddress1" : "IpAddress1",
        "IpAddress2" : "IpAddress2",
        "IpAddress3" : "IpAddress3",
        "IpAddress4" : "IpAddress4"
      },
      "xml" : {
        "name" : "TenantVifRequest"
      }
    },
    "InfrastructureVifRequest" : {
      "type" : "object",
      "properties" : {
        "isLayer3" : {
          "type" : "boolean",
          "description" : "Determines if the vif should be enabled for layer 3",
          "default" : false
        },
        "vlanTag" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "IEEE 802.1Q vlan tag allocated to the vif",
          "minimum" : 1,
          "maximum" : 4094
        },
        "IpAddress1" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the first connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask1" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the first connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress2" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the second connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask2" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the second connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress3" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the third connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask3" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the third connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress4" : {
          "type" : "string",
          "description" : "IPv4 address assigned to the fourth connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "SubnetMask4" : {
          "type" : "string",
          "description" : "IPv4 subnet mask assigned to the fourth connection in the vif",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        }
      },
      "example" : {
        "vlanTag" : 328,
        "SubnetMask1" : "SubnetMask1",
        "SubnetMask2" : "SubnetMask2",
        "SubnetMask3" : "SubnetMask3",
        "SubnetMask4" : "SubnetMask4",
        "isLayer3" : false,
        "IpAddress1" : "IpAddress1",
        "IpAddress2" : "IpAddress2",
        "IpAddress3" : "IpAddress3",
        "IpAddress4" : "IpAddress4"
      },
      "xml" : {
        "name" : "InfrastructureVifRequest"
      }
    },
    "Vif" : {
      "type" : "object",
      "properties" : {
        "vifId" : {
          "type" : "integer",
          "description" : "The ID of the vif"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the vif  "
        },
        "isLayer3" : {
          "type" : "boolean",
          "description" : "Determines if the vif is enabled for layer 3"
        },
        "vlanTag" : {
          "type" : "integer",
          "description" : "The vlan tag number assigned to the vif"
        },
        "attachmentId" : {
          "type" : "integer",
          "description" : "The ID of the parent attachment"
        },
        "tenantId" : {
          "type" : "integer",
          "description" : "The ID of the owning tenant"
        },
        "routingInstance" : {
          "$ref" : "#/definitions/RoutingInstance"
        },
        "vlans" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Vlan"
          }
        },
        "contractBandwidthPool" : {
          "$ref" : "#/definitions/ContractBandwidthPool"
        }
      },
      "example" : {
        "vlans" : [ {
          "vlanTag" : 2,
          "vlanID" : 5
        }, {
          "vlanTag" : 2,
          "vlanID" : 5
        } ],
        "vlanTag" : 6,
        "contractBandwidthPool" : {
          "name" : "name",
          "contractBandwidthMbps" : 5
        },
        "name" : "name",
        "tenantId" : 5,
        "isLayer3" : true,
        "attachmentId" : 1,
        "routingInstance" : {
          "routingInstanceId" : 0,
          "name" : "name"
        },
        "vifId" : 0
      },
      "xml" : {
        "name" : "Vif"
      }
    },
    "VifUpdate" : {
      "type" : "object",
      "properties" : {
        "contractBandwidthPoolName" : {
          "type" : "string",
          "description" : "The name of an existing contract bandwidth pool. Changing the contract bandwidth pool will cause this vif to share bandwidth with other vifs in the same contract bandwidth pool",
          "maxLength" : 32
        },
        "contractBandwidthMbps" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Select a contract bandwidth if you want this vif to be allocted its own dedicated contract bandwidth pool. If a contract bandwidth is selected, the provider will create a new contract bandwidth pool for this vif"
        },
        "routingInstanceName" : {
          "type" : "string",
          "description" : "The name of an existing routing instance which will be used by the vif for the routing IP packets",
          "maxLength" : 32
        },
        "createNewRoutingInstance" : {
          "type" : "boolean",
          "description" : "Determines if the provider should create a new routing instance for the vif. This is useful if the vif currently shares a routing instance with one or more other vifs and it is desired to give this vif its own routing instance",
          "default" : false
        },
        "trustReceivedCosDscp" : {
          "type" : "boolean",
          "description" : "Determines whether DSCP and COS markings of packets should be trusted by the provider",
          "default" : false
        }
      },
      "example" : {
        "createNewRoutingInstance" : false,
        "routingInstanceName" : "routingInstanceName",
        "contractBandwidthMbps" : 0,
        "trustReceivedCosDscp" : false,
        "contractBandwidthPoolName" : "contractBandwidthPoolName"
      },
      "xml" : {
        "name" : "VifUpdate"
      }
    },
    "RoutingInstance" : {
      "type" : "object",
      "properties" : {
        "routingInstanceId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the routing instance"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the routing instance"
        }
      },
      "example" : {
        "routingInstanceId" : 0,
        "name" : "name"
      },
      "xml" : {
        "name" : "RoutingInstance"
      }
    },
    "ContractBandwidthPool" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the contract bandwidth pool "
        },
        "contractBandwidthMbps" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The contract bandwidth of the pool in Mbps"
        }
      },
      "example" : {
        "name" : "name",
        "contractBandwidthMbps" : 5
      },
      "xml" : {
        "name" : "ContractBandwidthPool"
      }
    },
    "Vlan" : {
      "type" : "object",
      "properties" : {
        "vlanID" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the vlan"
        },
        "vlanTag" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The vlan tag"
        }
      },
      "example" : {
        "vlanTag" : 2,
        "vlanID" : 5
      }
    },
    "VpnRequest" : {
      "type" : "object",
      "required" : [ "addressFamily", "isNovaVpn", "name", "tenancyType", "topologyType" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the VPN",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9-]+$"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the VPN",
          "maxLength" : 200
        },
        "region" : {
          "type" : "string",
          "description" : "The geographical region which the VPN operates within. If no region is chosen then the VPN is available in all regions",
          "enum" : [ "EMEA", "ASIAPAC", "AMERS" ]
        },
        "plane" : {
          "type" : "string",
          "description" : "The provider plane which the VPN operates within. If no plane is chosen then the VPN will operate in both the red and blue planes.",
          "enum" : [ "Red", "Blue" ]
        },
        "tenancyType" : {
          "type" : "string",
          "description" : "The tenancy type of the VPN. If the tenancy type is single then only the owner of the VPN can participate in the VPN. If the tenancy type is multi then any tenant can participate in the VPN.",
          "default" : "Single",
          "enum" : [ "Single", "Multi" ]
        },
        "topologyType" : {
          "type" : "string",
          "description" : "The topology type of the VPN. A meshed VPN allows any endpoint to communicate with any other endpoint. A hub-and-spoke VPN allows spoke endpoints to communicate with hub endpoints but not with other spoke endpoints. ",
          "default" : "Meshed",
          "enum" : [ "Meshed", "Hub-and-Spoke" ]
        },
        "addressFamily" : {
          "type" : "string",
          "description" : "The address family of the VPN. Currently only IPv4 is available. ",
          "default" : "IPv4",
          "enum" : [ "IPv4" ]
        },
        "isNovaVpn" : {
          "type" : "boolean",
          "description" : "Determines if the VPN is launched as a standard Nova implemented VPN. If this option is disabled the VPN may be customised.",
          "default" : true
        }
      },
      "example" : {
        "plane" : "Red",
        "topologyType" : "Meshed",
        "name" : "name",
        "tenancyType" : "Single",
        "description" : "description",
        "isNovaVpn" : true,
        "region" : "EMEA",
        "addressFamily" : "IPv4"
      },
      "xml" : {
        "name" : "VpnRequest"
      }
    },
    "VpnUpdate" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "A description of the VPN",
          "maxLength" : 200
        },
        "region" : {
          "type" : "string",
          "description" : "The geographical region which the VPN operates within. If no region is chosen then the VPN is available in all regions",
          "enum" : [ "EMEA", "ASIAPAC", "AMERS" ]
        },
        "tenancyType" : {
          "type" : "string",
          "description" : "The tenancy type of the VPN. If the tenancy type is single then only the owner of the VPN can participate in the VPN. If the tenancy type is multi then any tenant can participate in the VPN.",
          "default" : "Single",
          "enum" : [ "Single", "Multi" ]
        }
      },
      "example" : {
        "tenancyType" : "Single",
        "description" : "description",
        "region" : "EMEA"
      },
      "xml" : {
        "name" : "VpnUpdate"
      }
    },
    "Vpn" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the VPN"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the VPN"
        },
        "region" : {
          "type" : "string",
          "description" : "The geographical region which the VPN operates within."
        },
        "plane" : {
          "type" : "string",
          "description" : "The provider plane which the VPN operates within."
        },
        "tenancyType" : {
          "type" : "string",
          "description" : "The tenancy type of the VPN. If the tenancy type is single then only the owner of the VPN can participate in the VPN. If the tenancy type is multi then any tenant can participate in the VPN."
        },
        "topologyType" : {
          "type" : "string",
          "description" : "The topology type of the VPN. A meshed VPN allows any endpoint to communicate with any other endpoint. A hub-and-spoke VPN allows spoke endpoints to communicate with hub endpoints but not with other spoke endpoints. "
        },
        "addressFamily" : {
          "type" : "string",
          "description" : "The address family of the VPN."
        },
        "isNovaVpn" : {
          "type" : "boolean",
          "description" : "Determines if the VPN is launched as a standard Nova implemented VPN. If this option is disabled the VPN may be customised.",
          "default" : true
        }
      },
      "example" : {
        "plane" : "plane",
        "topologyType" : "topologyType",
        "name" : "name",
        "tenancyType" : "tenancyType",
        "description" : "description",
        "isNovaVpn" : true,
        "region" : "region",
        "addressFamily" : "addressFamily"
      },
      "xml" : {
        "name" : "Vpn"
      }
    },
    "TenantIpv4Network" : {
      "type" : "object",
      "properties" : {
        "tenantIpv4NetworkId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the tenant IPv4 network",
          "readOnly" : true
        },
        "ipv4Prefix" : {
          "type" : "string",
          "description" : "The CIDR IPv4 prefix",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "length" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The CIDR length of the IPv4 prefix",
          "minimum" : 1,
          "maximum" : 32
        },
        "allowExtranet" : {
          "type" : "boolean",
          "description" : "Determines whether the IPv4 prefix is allowed into any IP Extranet VPNs",
          "default" : false
        },
        "tenantId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the tenant to which the IPv4 prefix belongs"
        }
      },
      "example" : {
        "tenantIpv4NetworkId" : 0,
        "length" : 19,
        "tenantId" : 1,
        "allowExtranet" : false,
        "ipv4Prefix" : "ipv4Prefix"
      },
      "xml" : {
        "name" : "TenantIpv4Network"
      }
    },
    "VpnTenantIpv4NetworkIn" : {
      "type" : "object",
      "properties" : {
        "tenantIpv4NetworkId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the tenant IPv4 network",
          "readOnly" : true
        },
        "addToAllBgpPeersInAttachmentSet" : {
          "type" : "boolean",
          "default" : true
        },
        "ipv4BgpPeer" : {
          "type" : "string",
          "description" : "An IPv4 BGP peer address",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "localIpRoutingPreference" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The local IP routing preference",
          "minimum" : 1,
          "maximum" : 500,
          "default" : 100
        }
      },
      "example" : {
        "tenantIpv4NetworkId" : 0,
        "localIpRoutingPreference" : 301,
        "addToAllBgpPeersInAttachmentSet" : true,
        "ipv4BgpPeer" : "ipv4BgpPeer"
      },
      "xml" : {
        "name" : "VpnTenantIpv4NetworkIn"
      }
    },
    "VpnTenantIpv4NetworkOut" : {
      "type" : "object",
      "properties" : {
        "tenantIpv4NetworkId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the tenant IPv4 network",
          "readOnly" : true
        },
        "ipv4BgpPeer" : {
          "type" : "string",
          "description" : "An IPv4 BGP peer address",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "advertisedIpRoutingPreference" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The advertised IP routing preference",
          "minimum" : 1,
          "maximum" : 20,
          "default" : 1
        }
      },
      "example" : {
        "tenantIpv4NetworkId" : 0,
        "advertisedIpRoutingPreference" : 12,
        "ipv4BgpPeer" : "ipv4BgpPeer"
      },
      "xml" : {
        "name" : "VpnTenantIpv4NetworkOut"
      }
    },
    "AttachmentSetRoutingInstance" : {
      "type" : "object",
      "properties" : {
        "locaIpRoutingPreference" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Default preference applied to IPv4 and IPv6 routes within the routing instance",
          "default" : 100
        },
        "advertisedIpRoutingPreference" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Default preference of IPv4 and IPv6 routes advertised from the routing instance",
          "default" : 1
        },
        "multicastDesignatedRouterPreference" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Default multicast designated router preference",
          "default" : 1
        }
      },
      "example" : {
        "locaIpRoutingPreference" : 0,
        "multicastDesignatedRouterPreference" : 1,
        "advertisedIpRoutingPreference" : 6
      },
      "xml" : {
        "name" : "AttachmentSetRoutingInstance"
      }
    },
    "BgpPeer" : {
      "type" : "object",
      "properties" : {
        "peerIpv4Address" : {
          "type" : "string",
          "description" : "An IPv4 BGP peer address",
          "pattern" : "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "Peer2ByteAutonomousSystem" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "2 Byte Autonomous system number of the BGP peer",
          "minimum" : 1,
          "maximum" : 65535
        },
        "PeerPassword" : {
          "type" : "string",
          "format" : "password",
          "description" : "Authentication password for the BGP peer",
          "minLength" : 5,
          "maxLength" : 12
        },
        "IsMultiHop" : {
          "type" : "boolean",
          "description" : "Determines if multi-hop peering is enabled",
          "default" : false
        },
        "IsBfdEnabled" : {
          "type" : "boolean",
          "description" : "Determines if the peer should be enabled with bidirectional forwarding detection",
          "default" : true
        }
      },
      "example" : {
        "peerIpv4Address" : "peerIpv4Address",
        "PeerPassword" : "PeerPassword",
        "IsMultiHop" : false,
        "Peer2ByteAutonomousSystem" : 5249,
        "IsBfdEnabled" : true
      },
      "xml" : {
        "name" : "BgpPeer"
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "username" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "userStatus" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "User Status"
        }
      },
      "example" : {
        "firstName" : "firstName",
        "lastName" : "lastName",
        "password" : "password",
        "userStatus" : 6,
        "phone" : "phone",
        "id" : 0,
        "email" : "email",
        "username" : "username"
      },
      "xml" : {
        "name" : "User"
      }
    },
    "AttachmentSetRequest_routingInstances" : {
      "properties" : {
        "routingInstanceId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The ID of the routing instance"
        },
        "locaIpRoutingPreference" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Default preference applied to IPv4 and IPv6 routes within the routing instance",
          "default" : 100
        },
        "advertisedIpRoutingPreference" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Default preference of IPv4 and IPv6 routes advertised from the routing instance",
          "default" : 1
        }
      },
      "example" : {
        "routingInstanceId" : 0,
        "locaIpRoutingPreference" : 6,
        "advertisedIpRoutingPreference" : 1
      }
    }
  },
  "responses" : {
    "NotFound" : {
      "description" : "The specified resource was not found",
      "schema" : {
        "$ref" : "#/definitions/ApiResponse"
      }
    },
    "SuccessfulOperation" : {
      "description" : "Successful operation",
      "schema" : {
        "$ref" : "#/definitions/ApiResponse"
      }
    },
    "Unauthorized" : {
      "description" : "Unauthorized",
      "schema" : {
        "$ref" : "#/definitions/ApiResponse"
      }
    },
    "ValidationError" : {
      "description" : "Validation error",
      "schema" : {
        "$ref" : "#/definitions/ApiResponse"
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  }
}
