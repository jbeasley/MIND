{
  "swagger": "2.0",
  "info": {
    "description": "This is the MIND API which can be used to create IP Service instances on the global Sigma network. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more about our architecture for IP Services called 'Nova'.",
    "version": "1.0.0",
    "title": "MIND API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "jonathan.beasley@thomsonreuters.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "raid.thomsonreuters.com",
  "basePath": "/v2",
  "tags": [
    {
      "name": "attachment",
      "description": "List, create, delete attachments",
      "externalDocs": {
        "description": "Find out more about physical attachment to our network",
        "url": "https://thehub.thomsonreuters.com/docs/DOC-2198311"
      }
    },
    {
      "name": "attachment-set",
      "description": "List, create, delete attachment-sets"
    },
    {
      "name": "vpn",
      "description": "List, create, delete IP VPNs",
      "externalDocs": {
        "description": "Find out more about our IP services",
        "url": "https://thehub.thomsonreuters.com/docs/DOC-2612129"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/attachment": {
      "post": {
        "tags": [
          "attachment"
        ],
        "summary": "Create a new network attachment",
        "description": "",
        "operationId": "addAttachment",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "attachment request object that generates a new attachment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachmentRequest"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "attachment"
        ],
        "summary": "Update an existing attachment",
        "description": "",
        "operationId": "updateAttachment",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "attachment update object that updates an existing attachment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachmentUpdate"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Attachment not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "attachment"
        ],
        "summary": "Find attachment by ID",
        "description": "Returns a single attachment",
        "operationId": "getAttachmentById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "ID of the attachment to return",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Attachment not found"
          }
        }
      },
      "delete": {
        "tags": [
          "attachment"
        ],
        "summary": "Deletes an attachment",
        "description": "",
        "operationId": "deleteAttachment",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment id to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Attachment not found"
          }
        }
      }
    },
    "/tenant": {
      "post": {
        "tags": [
          "tenant"
        ],
        "summary": "Create a tenant",
        "description": "This can only be done by the logged in tenant.",
        "operationId": "createTenant",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created tenant object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "AttachmentRequest": {
      "type": "object",
      "required": [
        "tenantName",
        "locationName",
        "attachmentBandwidth"
      ],
      "properties": {
        "isLayer3": {
          "type": "boolean",
          "default": false
        },
        "bundleRequired": {
          "type": "boolean",
          "default": false
        },
        "multiportRequired": {
          "type": "boolean",
          "default": false
        },
        "isTagged": {
          "type": "boolean",
          "default": false
        },
        "tenantName": {
          "type": "string",
          "description": "The name of the tenant"
        },
        "locationName": {
          "type": "string",
          "description": "The name of a network location"
        },
        "planeName": {
          "type": "string",
          "description": "Optional name of a network plane"
        },
        "attachmentBandwidth": {
          "type": "integer",
          "format": "int32",
          "description": "The required bandwidth of the attachment"
        },
        "contractBandwidth": {
          "type": "integer",
          "format": "int32",
          "description": "The required contract bandwidth"
        },
        "trustReceivedCosDscp": {
          "type": "boolean",
          "default": false,
          "description": "Determines whether DSCP and COS markings of packets should be trusted by the provider"
        },
        "IpAddress1": {
          "type": "string",
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress2": {
          "type": "string",
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress3": {
          "type": "string",
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        },
        "IpAddress4": {
          "type": "string",
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        }
      },
      "xml": {
        "name": "AttachmentRequest"
      }
    },
    "AttachmentUpdate": {
      "type": "object",
      "properties": {
        "trustReceivedCosDscp": {
          "type": "boolean",
          "description": "Determines whether DSCP and COS markings of packets should be trusted by the provider"
        }
      },
      "xml": {
        "name": "AttachmenUpdate"
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "trustReceivedCosDscp": {
          "type": "boolean",
          "description": "Determines whether DSCP and COS markings of packets should be trusted by the provider"
        }
      },
      "xml": {
        "name": "AttachmenUpdate"
      }
    },
    "Tenant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}