/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Api;
using IO.NovaAttSwagger.Model;

namespace IO.NovaAttSwagger.Test
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataApiTests
    {
        private DataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataApi
            //Assert.IsInstanceOfType(typeof(DataApi), instance, "instance is a DataApi");
        }

        
        /// <summary>
        /// Test DataAttachmentAttachmentDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DataAttachmentAttachmentDelete();
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentGet(content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachment> (response, "response is DataAttachmentAttachment");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataAttachmentAttachment attachment = null;
            //instance.DataAttachmentAttachmentPatch(attachment);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //instance.DataAttachmentAttachmentPePePeNameDelete(pePeName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameGet(pePeName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeName> (response, "response is DataAttachmentAttachmentPePePeName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //DataAttachmentAttachmentPePePeName pe = null;
            //instance.DataAttachmentAttachmentPePePeNamePatch(pePeName, pe);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePeNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //instance.DataAttachmentAttachmentPePePeNamePeNameDelete(pePeName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePeNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePeNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNamePeNameGet(pePeName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNamePeName> (response, "response is DataAttachmentAttachmentPePePeNamePeName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePeNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePeNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //DataAttachmentAttachmentPePePeNamePeName peName = null;
            //instance.DataAttachmentAttachmentPePePeNamePeNamePatch(pePeName, peName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePut
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //DataAttachmentAttachmentPePePeName pe = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNamePut(pePeName, pe, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, attachmentBandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, name);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidthPool);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidthPool, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, serviceClasses);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, bandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, burstSize);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, bwUnits);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scBandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scBandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, trustReceivedCosAndDscp);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceMtu);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceType);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, taggedAttachmentInterface);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, contractBandwidthPoolName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Delete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Delete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4 = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, enableIpv4);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Delete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Delete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4PrefixLength);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4SubnetMask);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4 = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4 = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vif);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vif, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vrfName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, isBfdEnabled);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, isMultiHop);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, maxPeerRoutes);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerAutonomousSystem);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerPassword);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameDelete(pePeName, vrfVrfName, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfName> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch(pePeName, vrfVrfName, vrf);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut(pePeName, vrfVrfName, vrf, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldDelete(pePeName, vrfVrfName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch(pePeName, vrfVrfName, rdAdministratorSubfield);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldDelete(pePeName, vrfVrfName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch(pePeName, vrfVrfName, rdAssignedNumberSubfield);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameDelete(pePeName, vrfVrfName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch(pePeName, vrfVrfName, vrfName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPost
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataAttachmentAttachmentPost attachment = null;
            //instance.DataAttachmentAttachmentPost(attachment);
            
        }
        
        /// <summary>
        /// Test DataGet
        /// </summary>
        [Test]
        public void DataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DataGet();
            //Assert.IsInstanceOf<Data> (response, "response is Data");
        }
        
        /// <summary>
        /// Test DataPatch
        /// </summary>
        [Test]
        public void DataPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataPutPatch data = null;
            //instance.DataPatch(data);
            
        }
        
        /// <summary>
        /// Test DataPost
        /// </summary>
        [Test]
        public void DataPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataPost data = null;
            //instance.DataPost(data);
            
        }
        
    }

}
