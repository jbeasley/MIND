/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Api;

namespace IO.NovaAttSwagger.Test
{
    /// <summary>
    ///  Class for testing DeleteApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeleteApiTests
    {
        private DeleteApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeleteApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeleteApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeleteApi
            //Assert.IsInstanceOfType(typeof(DeleteApi), instance, "instance is a DeleteApi");
        }

        
        /// <summary>
        /// Test DataAttachmentAttachmentDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DataAttachmentAttachmentDelete();
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //instance.DataAttachmentAttachmentPePePeNameDelete(pePeName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePeNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //instance.DataAttachmentAttachmentPePePeNamePeNameDelete(pePeName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Delete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Delete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Delete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Delete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameDelete(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordDelete(pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameDelete(pePeName, vrfVrfName, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldDelete(pePeName, vrfVrfName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldDelete(pePeName, vrfVrfName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameDelete
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameDelete(pePeName, vrfVrfName);
            
        }
        
    }

}
