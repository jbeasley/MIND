/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Api;
using IO.NovaAttSwagger.Model;

namespace IO.NovaAttSwagger.Test
{
    /// <summary>
    ///  Class for testing GetApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GetApiTests
    {
        private GetApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GetApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GetApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GetApi
            //Assert.IsInstanceOfType(typeof(GetApi), instance, "instance is a GetApi");
        }

        
        /// <summary>
        /// Test DataAttachmentAttachmentGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentGet(content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachment> (response, "response is DataAttachmentAttachment");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameGet(pePeName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeName> (response, "response is DataAttachmentAttachmentPePePeName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePeNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePeNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNamePeNameGet(pePeName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNamePeName> (response, "response is DataAttachmentAttachmentPePePeNamePeName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp> (response, "response is DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName> (response, "response is DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfName> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfName");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield");
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName> (response, "response is DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName");
        }
        
        /// <summary>
        /// Test DataGet
        /// </summary>
        [Test]
        public void DataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DataGet();
            //Assert.IsInstanceOf<Data> (response, "response is Data");
        }
        
        /// <summary>
        /// Test OperationsGet
        /// </summary>
        [Test]
        public void OperationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OperationsGet();
            //Assert.IsInstanceOf<Operations> (response, "response is Operations");
        }
        
        /// <summary>
        /// Test RootGet
        /// </summary>
        [Test]
        public void RootGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RootGet();
            //Assert.IsInstanceOf<Root> (response, "response is Root");
        }
        
        /// <summary>
        /// Test YangLibraryVersionGet
        /// </summary>
        [Test]
        public void YangLibraryVersionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.YangLibraryVersionGet();
            //Assert.IsInstanceOf<YangLibraryVersion> (response, "response is YangLibraryVersion");
        }
        
    }

}
