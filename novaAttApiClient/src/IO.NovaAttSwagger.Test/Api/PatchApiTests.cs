/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Api;
using IO.NovaAttSwagger.Model;

namespace IO.NovaAttSwagger.Test
{
    /// <summary>
    ///  Class for testing PatchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PatchApiTests
    {
        private PatchApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PatchApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PatchApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PatchApi
            //Assert.IsInstanceOfType(typeof(PatchApi), instance, "instance is a PatchApi");
        }

        
        /// <summary>
        /// Test DataAttachmentAttachmentPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataAttachmentAttachment attachment = null;
            //instance.DataAttachmentAttachmentPatch(attachment);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //DataAttachmentAttachmentPePePeName pe = null;
            //instance.DataAttachmentAttachmentPePePeNamePatch(pePeName, pe);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNamePeNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNamePeNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //DataAttachmentAttachmentPePePeNamePeName peName = null;
            //instance.DataAttachmentAttachmentPePePeNamePeNamePatch(pePeName, peName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, attachmentBandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, name);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidthPool);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, serviceClasses);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, bandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, burstSize);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, bwUnits);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scBandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, trustReceivedCosAndDscp);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceMtu);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceType);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, taggedAttachmentInterface);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, contractBandwidthPoolName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4 = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, enableIpv4);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4PrefixLength);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4SubnetMask);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4 = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vif);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vlanId);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vrfName);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, isBfdEnabled);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, isMultiHop);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, maxPeerRoutes);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerAutonomousSystem);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerPassword);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch(pePeName, vrfVrfName, vrf);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch(pePeName, vrfVrfName, rdAdministratorSubfield);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch(pePeName, vrfVrfName, rdAssignedNumberSubfield);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName = null;
            //instance.DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch(pePeName, vrfVrfName, vrfName);
            
        }
        
        /// <summary>
        /// Test DataPatch
        /// </summary>
        [Test]
        public void DataPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataPutPatch data = null;
            //instance.DataPatch(data);
            
        }
        
    }

}
