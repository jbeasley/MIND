/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Api;
using IO.NovaAttSwagger.Model;

namespace IO.NovaAttSwagger.Test
{
    /// <summary>
    ///  Class for testing PostApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PostApiTests
    {
        private PostApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PostApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PostApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PostApi
            //Assert.IsInstanceOfType(typeof(PostApi), instance, "instance is a PostApi");
        }

        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //string contractBandwidthPoolName = null;
            //string serviceClassesScName = null;
            //DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scBandwidth);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pePeName = null;
            //string taggedAttachmentInterfaceInterfaceType = null;
            //string taggedAttachmentInterfaceInterfaceId = null;
            //int? vifVlanId = null;
            //DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4 = null;
            //instance.DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4);
            
        }
        
        /// <summary>
        /// Test DataAttachmentAttachmentPost
        /// </summary>
        [Test]
        public void DataAttachmentAttachmentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataAttachmentAttachmentPost attachment = null;
            //instance.DataAttachmentAttachmentPost(attachment);
            
        }
        
        /// <summary>
        /// Test DataPost
        /// </summary>
        [Test]
        public void DataPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataPost data = null;
            //instance.DataPost(data);
            
        }
        
    }

}
