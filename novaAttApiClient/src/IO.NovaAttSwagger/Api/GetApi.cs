/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Model;

namespace IO.NovaAttSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachment</returns>
        DataAttachmentAttachment DataAttachmentAttachmentGet (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachment</returns>
        ApiResponse<DataAttachmentAttachment> DataAttachmentAttachmentGetWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeName</returns>
        DataAttachmentAttachmentPePePeName DataAttachmentAttachmentPePePeNameGet (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeName</returns>
        ApiResponse<DataAttachmentAttachmentPePePeName> DataAttachmentAttachmentPePePeNameGetWithHttpInfo (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNamePeName</returns>
        DataAttachmentAttachmentPePePeNamePeName DataAttachmentAttachmentPePePeNamePeNameGet (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNamePeName</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNamePeName> DataAttachmentAttachmentPePePeNamePeNameGetWithHttpInfo (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <remarks>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <remarks>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <remarks>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <remarks>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the Contract Bandwidth Poole
        /// </summary>
        /// <remarks>
        /// Name of the Contract Bandwidth Poole
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the Contract Bandwidth Poole
        /// </summary>
        /// <remarks>
        /// Name of the Contract Bandwidth Poole
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <remarks>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName</returns>
        DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <remarks>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName</returns>
        ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Sevice Class bandwidth
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth</returns>
        DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Sevice Class bandwidth
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth</returns>
        ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Burst size in bytes
        /// </summary>
        /// <remarks>
        /// Burst size in bytes
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize</returns>
        DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Burst size in bytes
        /// </summary>
        /// <remarks>
        /// Burst size in bytes
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize</returns>
        ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Bandwidth units
        /// </summary>
        /// <remarks>
        /// Bandwidth units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits</returns>
        DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Bandwidth units
        /// </summary>
        /// <remarks>
        /// Bandwidth units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits</returns>
        ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth</returns>
        DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth</returns>
        ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName</returns>
        DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName</returns>
        ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Trust the receieved COS and DSCP marking
        /// </summary>
        /// <remarks>
        /// Trust the receieved COS and DSCP marking
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp</returns>
        DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Trust the receieved COS and DSCP marking
        /// </summary>
        /// <remarks>
        /// Trust the receieved COS and DSCP marking
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp</returns>
        ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of tagged Attachment Interfaces
        /// </summary>
        /// <remarks>
        /// List of tagged Attachment Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of tagged Attachment Interfaces
        /// </summary>
        /// <remarks>
        /// List of tagged Attachment Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Attachment Interface ID
        /// </summary>
        /// <remarks>
        /// Attachment Interface ID
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment Interface ID
        /// </summary>
        /// <remarks>
        /// Attachment Interface ID
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Attachment MTU
        /// </summary>
        /// <remarks>
        /// Attachment MTU
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment MTU
        /// </summary>
        /// <remarks>
        /// Attachment MTU
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Attachment Interface Type
        /// </summary>
        /// <remarks>
        /// Attachment Interface Type
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment Interface Type
        /// </summary>
        /// <remarks>
        /// Attachment Interface Type
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The name of the Contract Bandwidth Pool
        /// </summary>
        /// <remarks>
        /// The name of the Contract Bandwidth Pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The name of the Contract Bandwidth Pool
        /// </summary>
        /// <remarks>
        /// The name of the Contract Bandwidth Pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <remarks>
        /// Enables the Logical Attachment Interface for IPv4
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <remarks>
        /// Enables the Logical Attachment Interface for IPv4
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 address
        /// </summary>
        /// <remarks>
        /// IPv4 address
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 address
        /// </summary>
        /// <remarks>
        /// IPv4 address
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 prefix length
        /// </summary>
        /// <remarks>
        /// IPv4 prefix length
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 prefix length
        /// </summary>
        /// <remarks>
        /// IPv4 prefix length
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <remarks>
        /// IPv4 dotted-decimal subnet mask
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <remarks>
        /// IPv4 dotted-decimal subnet mask
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The vlan ID of the Vif
        /// </summary>
        /// <remarks>
        /// The vlan ID of the Vif
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The vlan ID of the Vif
        /// </summary>
        /// <remarks>
        /// The vlan ID of the Vif
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName</returns>
        DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VRF BGP peers
        /// </summary>
        /// <remarks>
        /// VRF BGP peers
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF BGP peers
        /// </summary>
        /// <remarks>
        /// VRF BGP peers
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The BGP peer is enabled for BFD
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for BFD
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The BGP peer is enabled for BFD
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for BFD
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The BGP peer is enabled for multi-hop
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for multi-hop
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The BGP peer is enabled for multi-hop
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for multi-hop
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Maximum number of routes from the BGP peer
        /// </summary>
        /// <remarks>
        /// Maximum number of routes from the BGP peer
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Maximum number of routes from the BGP peer
        /// </summary>
        /// <remarks>
        /// Maximum number of routes from the BGP peer
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The peer autonomous system number
        /// </summary>
        /// <remarks>
        /// The peer autonomous system number
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The peer autonomous system number
        /// </summary>
        /// <remarks>
        /// The peer autonomous system number
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <remarks>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <remarks>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The BGP peer clear password
        /// </summary>
        /// <remarks>
        /// The BGP peer clear password
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The BGP peer clear password
        /// </summary>
        /// <remarks>
        /// The BGP peer clear password
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfName</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfName DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfName</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfName> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName</returns>
        DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName</returns>
        ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Data</returns>
        Data DataGet ();

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Data</returns>
        ApiResponse<Data> DataGetWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Operations</returns>
        Operations OperationsGet ();

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Operations</returns>
        ApiResponse<Operations> OperationsGetWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Root</returns>
        Root RootGet ();

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Root</returns>
        ApiResponse<Root> RootGetWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>YangLibraryVersion</returns>
        YangLibraryVersion YangLibraryVersionGet ();

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of YangLibraryVersion</returns>
        ApiResponse<YangLibraryVersion> YangLibraryVersionGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachment</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachment> DataAttachmentAttachmentGetAsync (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachment>> DataAttachmentAttachmentGetAsyncWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeName</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeName> DataAttachmentAttachmentPePePeNameGetAsync (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeName>> DataAttachmentAttachmentPePePeNameGetAsyncWithHttpInfo (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNamePeName</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNamePeName> DataAttachmentAttachmentPePePeNamePeNameGetAsync (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNamePeName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNamePeName>> DataAttachmentAttachmentPePePeNamePeNameGetAsyncWithHttpInfo (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <remarks>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <remarks>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <remarks>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <remarks>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the Contract Bandwidth Poole
        /// </summary>
        /// <remarks>
        /// Name of the Contract Bandwidth Poole
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the Contract Bandwidth Poole
        /// </summary>
        /// <remarks>
        /// Name of the Contract Bandwidth Poole
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <remarks>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName</returns>
        System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <remarks>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Sevice Class bandwidth
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth</returns>
        System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Sevice Class bandwidth
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Burst size in bytes
        /// </summary>
        /// <remarks>
        /// Burst size in bytes
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize</returns>
        System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Burst size in bytes
        /// </summary>
        /// <remarks>
        /// Burst size in bytes
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Bandwidth units
        /// </summary>
        /// <remarks>
        /// Bandwidth units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits</returns>
        System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Bandwidth units
        /// </summary>
        /// <remarks>
        /// Bandwidth units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth</returns>
        System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName</returns>
        System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Trust the receieved COS and DSCP marking
        /// </summary>
        /// <remarks>
        /// Trust the receieved COS and DSCP marking
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp</returns>
        System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Trust the receieved COS and DSCP marking
        /// </summary>
        /// <remarks>
        /// Trust the receieved COS and DSCP marking
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of tagged Attachment Interfaces
        /// </summary>
        /// <remarks>
        /// List of tagged Attachment Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of tagged Attachment Interfaces
        /// </summary>
        /// <remarks>
        /// List of tagged Attachment Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Attachment Interface ID
        /// </summary>
        /// <remarks>
        /// Attachment Interface ID
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment Interface ID
        /// </summary>
        /// <remarks>
        /// Attachment Interface ID
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Attachment MTU
        /// </summary>
        /// <remarks>
        /// Attachment MTU
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment MTU
        /// </summary>
        /// <remarks>
        /// Attachment MTU
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Attachment Interface Type
        /// </summary>
        /// <remarks>
        /// Attachment Interface Type
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Attachment Interface Type
        /// </summary>
        /// <remarks>
        /// Attachment Interface Type
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The name of the Contract Bandwidth Pool
        /// </summary>
        /// <remarks>
        /// The name of the Contract Bandwidth Pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The name of the Contract Bandwidth Pool
        /// </summary>
        /// <remarks>
        /// The name of the Contract Bandwidth Pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <remarks>
        /// Enables the Logical Attachment Interface for IPv4
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <remarks>
        /// Enables the Logical Attachment Interface for IPv4
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 address
        /// </summary>
        /// <remarks>
        /// IPv4 address
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 address
        /// </summary>
        /// <remarks>
        /// IPv4 address
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 prefix length
        /// </summary>
        /// <remarks>
        /// IPv4 prefix length
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 prefix length
        /// </summary>
        /// <remarks>
        /// IPv4 prefix length
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <remarks>
        /// IPv4 dotted-decimal subnet mask
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <remarks>
        /// IPv4 dotted-decimal subnet mask
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The vlan ID of the Vif
        /// </summary>
        /// <remarks>
        /// The vlan ID of the Vif
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The vlan ID of the Vif
        /// </summary>
        /// <remarks>
        /// The vlan ID of the Vif
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VRF BGP peers
        /// </summary>
        /// <remarks>
        /// VRF BGP peers
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF BGP peers
        /// </summary>
        /// <remarks>
        /// VRF BGP peers
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The BGP peer is enabled for BFD
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for BFD
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The BGP peer is enabled for BFD
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for BFD
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The BGP peer is enabled for multi-hop
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for multi-hop
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The BGP peer is enabled for multi-hop
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for multi-hop
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Maximum number of routes from the BGP peer
        /// </summary>
        /// <remarks>
        /// Maximum number of routes from the BGP peer
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Maximum number of routes from the BGP peer
        /// </summary>
        /// <remarks>
        /// Maximum number of routes from the BGP peer
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The peer autonomous system number
        /// </summary>
        /// <remarks>
        /// The peer autonomous system number
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The peer autonomous system number
        /// </summary>
        /// <remarks>
        /// The peer autonomous system number
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <remarks>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <remarks>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The BGP peer clear password
        /// </summary>
        /// <remarks>
        /// The BGP peer clear password
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The BGP peer clear password
        /// </summary>
        /// <remarks>
        /// The BGP peer clear password
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfName</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfName> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetAsync (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfName>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetAsync (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetAsync (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName</returns>
        System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetAsync (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Data</returns>
        System.Threading.Tasks.Task<Data> DataGetAsync ();

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Data)</returns>
        System.Threading.Tasks.Task<ApiResponse<Data>> DataGetAsyncWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Operations</returns>
        System.Threading.Tasks.Task<Operations> OperationsGetAsync ();

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Operations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operations>> OperationsGetAsyncWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Root</returns>
        System.Threading.Tasks.Task<Root> RootGetAsync ();

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Root)</returns>
        System.Threading.Tasks.Task<ApiResponse<Root>> RootGetAsyncWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of YangLibraryVersion</returns>
        System.Threading.Tasks.Task<YangLibraryVersion> YangLibraryVersionGetAsync ();

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (YangLibraryVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<YangLibraryVersion>> YangLibraryVersionGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetApi : IGetApi
    {
        private IO.NovaAttSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetApi(String basePath)
        {
            this.Configuration = new IO.NovaAttSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaAttSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GetApi(IO.NovaAttSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaAttSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaAttSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaAttSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaAttSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachment</returns>
        public DataAttachmentAttachment DataAttachmentAttachmentGet (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachment> localVarResponse = DataAttachmentAttachmentGetWithHttpInfo(content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachment</returns>
        public ApiResponse< DataAttachmentAttachment > DataAttachmentAttachmentGetWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {

            var localVarPath = "/data/services/attachment:attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachment)));
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachment</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachment> DataAttachmentAttachmentGetAsync (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachment> localVarResponse = await DataAttachmentAttachmentGetAsyncWithHttpInfo(content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachment>> DataAttachmentAttachmentGetAsyncWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {

            var localVarPath = "/data/services/attachment:attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachment)));
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeName</returns>
        public DataAttachmentAttachmentPePePeName DataAttachmentAttachmentPePePeNameGet (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeName> localVarResponse = DataAttachmentAttachmentPePePeNameGetWithHttpInfo(pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeName</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeName > DataAttachmentAttachmentPePePeNameGetWithHttpInfo (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeName)));
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeName> DataAttachmentAttachmentPePePeNameGetAsync (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeName> localVarResponse = await DataAttachmentAttachmentPePePeNameGetAsyncWithHttpInfo(pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeName>> DataAttachmentAttachmentPePePeNameGetAsyncWithHttpInfo (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeName)));
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNamePeName</returns>
        public DataAttachmentAttachmentPePePeNamePeName DataAttachmentAttachmentPePePeNamePeNameGet (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNamePeName> localVarResponse = DataAttachmentAttachmentPePePeNamePeNameGetWithHttpInfo(pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNamePeName</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNamePeName > DataAttachmentAttachmentPePePeNamePeNameGetWithHttpInfo (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNamePeNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNamePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNamePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNamePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNamePeName)));
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNamePeName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNamePeName> DataAttachmentAttachmentPePePeNamePeNameGetAsync (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNamePeName> localVarResponse = await DataAttachmentAttachmentPePePeNamePeNameGetAsyncWithHttpInfo(pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNamePeName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNamePeName>> DataAttachmentAttachmentPePePeNamePeNameGetAsyncWithHttpInfo (string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNamePeNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNamePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNamePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNamePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNamePeName)));
        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/attachment-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth)));
        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/attachment-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth)));
        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/contract-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth)));
        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/contract-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth)));
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName)));
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName)));
        }

        /// <summary>
        /// Name of the Contract Bandwidth Poole Name of the Contract Bandwidth Poole
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Name of the Contract Bandwidth Poole Name of the Contract Bandwidth Poole
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName)));
        }

        /// <summary>
        /// Name of the Contract Bandwidth Poole Name of the Contract Bandwidth Poole
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Name of the Contract Bandwidth Poole Name of the Contract Bandwidth Poole
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName)));
        }

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName</returns>
        public DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName</returns>
        public ApiResponse< DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName)));
        }

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName)));
        }

        /// <summary>
        /// Sevice Class bandwidth Sevice Class bandwidth
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth</returns>
        public DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sevice Class bandwidth Sevice Class bandwidth
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth</returns>
        public ApiResponse< DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth)));
        }

        /// <summary>
        /// Sevice Class bandwidth Sevice Class bandwidth
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth</returns>
        public async System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sevice Class bandwidth Sevice Class bandwidth
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth)));
        }

        /// <summary>
        /// Burst size in bytes Burst size in bytes
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize</returns>
        public DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Burst size in bytes Burst size in bytes
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize</returns>
        public ApiResponse< DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/burst-size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize)));
        }

        /// <summary>
        /// Burst size in bytes Burst size in bytes
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize</returns>
        public async System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Burst size in bytes Burst size in bytes
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/burst-size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize)));
        }

        /// <summary>
        /// Bandwidth units Bandwidth units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits</returns>
        public DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bandwidth units Bandwidth units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits</returns>
        public ApiResponse< DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/bw-units";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits)));
        }

        /// <summary>
        /// Bandwidth units Bandwidth units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits</returns>
        public async System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bandwidth units Bandwidth units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/bw-units";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits)));
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth</returns>
        public DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth</returns>
        public ApiResponse< DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth)));
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth</returns>
        public async System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName</returns>
        public DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName</returns>
        public ApiResponse< DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName)));
        }

        /// <summary>
        /// Trust the receieved COS and DSCP marking Trust the receieved COS and DSCP marking
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp</returns>
        public DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trust the receieved COS and DSCP marking Trust the receieved COS and DSCP marking
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp</returns>
        public ApiResponse< DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/trust-received-cos-and-dscp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp)));
        }

        /// <summary>
        /// Trust the receieved COS and DSCP marking Trust the receieved COS and DSCP marking
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp</returns>
        public async System.Threading.Tasks.Task<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trust the receieved COS and DSCP marking Trust the receieved COS and DSCP marking
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/trust-received-cos-and-dscp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp)));
        }

        /// <summary>
        /// List of tagged Attachment Interfaces List of tagged Attachment Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of tagged Attachment Interfaces List of tagged Attachment Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId)));
        }

        /// <summary>
        /// List of tagged Attachment Interfaces List of tagged Attachment Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of tagged Attachment Interfaces List of tagged Attachment Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId)));
        }

        /// <summary>
        /// Attachment Interface ID Attachment Interface ID
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attachment Interface ID Attachment Interface ID
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId)));
        }

        /// <summary>
        /// Attachment Interface ID Attachment Interface ID
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attachment Interface ID Attachment Interface ID
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId)));
        }

        /// <summary>
        /// Attachment MTU Attachment MTU
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attachment MTU Attachment MTU
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-mtu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu)));
        }

        /// <summary>
        /// Attachment MTU Attachment MTU
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attachment MTU Attachment MTU
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-mtu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu)));
        }

        /// <summary>
        /// Attachment Interface Type Attachment Interface Type
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attachment Interface Type Attachment Interface Type
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType)));
        }

        /// <summary>
        /// Attachment Interface Type Attachment Interface Type
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attachment Interface Type Attachment Interface Type
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType)));
        }

        /// <summary>
        /// The name of the Contract Bandwidth Pool The name of the Contract Bandwidth Pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The name of the Contract Bandwidth Pool The name of the Contract Bandwidth Pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/contract-bandwidth-pool-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName)));
        }

        /// <summary>
        /// The name of the Contract Bandwidth Pool The name of the Contract Bandwidth Pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The name of the Contract Bandwidth Pool The name of the Contract Bandwidth Pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/contract-bandwidth-pool-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName)));
        }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/enable-ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4)));
        }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4GetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/enable-ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4)));
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId)));
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId)));
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4)));
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4GetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4)));
        }

        /// <summary>
        /// IPv4 address IPv4 address
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IPv4 address IPv4 address
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address)));
        }

        /// <summary>
        /// IPv4 address IPv4 address
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IPv4 address IPv4 address
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address)));
        }

        /// <summary>
        /// IPv4 prefix length IPv4 prefix length
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IPv4 prefix length IPv4 prefix length
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-prefix-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength)));
        }

        /// <summary>
        /// IPv4 prefix length IPv4 prefix length
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IPv4 prefix length IPv4 prefix length
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-prefix-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength)));
        }

        /// <summary>
        /// IPv4 dotted-decimal subnet mask IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IPv4 dotted-decimal subnet mask IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-subnet-mask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask)));
        }

        /// <summary>
        /// IPv4 dotted-decimal subnet mask IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IPv4 dotted-decimal subnet mask IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-subnet-mask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask)));
        }

        /// <summary>
        /// The vlan ID of the Vif The vlan ID of the Vif
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The vlan ID of the Vif The vlan ID of the Vif
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/vlan-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId)));
        }

        /// <summary>
        /// The vlan ID of the Vif The vlan ID of the Vif
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The vlan ID of the Vif The vlan ID of the Vif
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/vlan-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId)));
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName</returns>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName> localVarResponse = DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName > DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName)));
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName> localVarResponse = await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGetAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling GetApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName)));
        }

        /// <summary>
        /// VRF BGP peers VRF BGP peers
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VRF BGP peers VRF BGP peers
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)));
        }

        /// <summary>
        /// VRF BGP peers VRF BGP peers
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VRF BGP peers VRF BGP peers
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)));
        }

        /// <summary>
        /// The BGP peer is enabled for BFD The BGP peer is enabled for BFD
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The BGP peer is enabled for BFD The BGP peer is enabled for BFD
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/is-bfd-enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled)));
        }

        /// <summary>
        /// The BGP peer is enabled for BFD The BGP peer is enabled for BFD
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The BGP peer is enabled for BFD The BGP peer is enabled for BFD
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/is-bfd-enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled)));
        }

        /// <summary>
        /// The BGP peer is enabled for multi-hop The BGP peer is enabled for multi-hop
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The BGP peer is enabled for multi-hop The BGP peer is enabled for multi-hop
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/is-multi-hop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop)));
        }

        /// <summary>
        /// The BGP peer is enabled for multi-hop The BGP peer is enabled for multi-hop
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The BGP peer is enabled for multi-hop The BGP peer is enabled for multi-hop
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/is-multi-hop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop)));
        }

        /// <summary>
        /// Maximum number of routes from the BGP peer Maximum number of routes from the BGP peer
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Maximum number of routes from the BGP peer Maximum number of routes from the BGP peer
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/max-peer-routes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes)));
        }

        /// <summary>
        /// Maximum number of routes from the BGP peer Maximum number of routes from the BGP peer
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Maximum number of routes from the BGP peer Maximum number of routes from the BGP peer
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/max-peer-routes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes)));
        }

        /// <summary>
        /// The peer autonomous system number The peer autonomous system number
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The peer autonomous system number The peer autonomous system number
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-autonomous-system";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem)));
        }

        /// <summary>
        /// The peer autonomous system number The peer autonomous system number
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The peer autonomous system number The peer autonomous system number
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-autonomous-system";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem)));
        }

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address)));
        }

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address)));
        }

        /// <summary>
        /// The BGP peer clear password The BGP peer clear password
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The BGP peer clear password The BGP peer clear password
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword)));
        }

        /// <summary>
        /// The BGP peer clear password The BGP peer clear password
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The BGP peer clear password The BGP peer clear password
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword)));
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfName</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfName DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfName> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetWithHttpInfo(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfName</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfName > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfName)));
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfName> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetAsync (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfName> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfName>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfName)));
        }

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetWithHttpInfo(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/rd-administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield)));
        }

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetAsync (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetAsyncWithHttpInfo(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/rd-administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield)));
        }

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetWithHttpInfo(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/rd-assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield)));
        }

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetAsync (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetAsyncWithHttpInfo(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/rd-assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield)));
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName</returns>
        public DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName> localVarResponse = DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName</returns>
        public ApiResponse< DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName > DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName)));
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName</returns>
        public async System.Threading.Tasks.Task<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetAsync (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName> localVarResponse = await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo(pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo (string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName)));
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Data</returns>
        public Data DataGet ()
        {
             ApiResponse<Data> localVarResponse = DataGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Data</returns>
        public ApiResponse< Data > DataGetWithHttpInfo ()
        {

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Data</returns>
        public async System.Threading.Tasks.Task<Data> DataGetAsync ()
        {
             ApiResponse<Data> localVarResponse = await DataGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Data)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Data>> DataGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Operations</returns>
        public Operations OperationsGet ()
        {
             ApiResponse<Operations> localVarResponse = OperationsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Operations</returns>
        public ApiResponse< Operations > OperationsGetWithHttpInfo ()
        {

            var localVarPath = "/operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OperationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operations)));
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Operations</returns>
        public async System.Threading.Tasks.Task<Operations> OperationsGetAsync ()
        {
             ApiResponse<Operations> localVarResponse = await OperationsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Operations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Operations>> OperationsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OperationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operations)));
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Root</returns>
        public Root RootGet ()
        {
             ApiResponse<Root> localVarResponse = RootGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Root</returns>
        public ApiResponse< Root > RootGetWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Root>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Root) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Root)));
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Root</returns>
        public async System.Threading.Tasks.Task<Root> RootGetAsync ()
        {
             ApiResponse<Root> localVarResponse = await RootGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Root)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Root>> RootGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Root>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Root) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Root)));
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>YangLibraryVersion</returns>
        public YangLibraryVersion YangLibraryVersionGet ()
        {
             ApiResponse<YangLibraryVersion> localVarResponse = YangLibraryVersionGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of YangLibraryVersion</returns>
        public ApiResponse< YangLibraryVersion > YangLibraryVersionGetWithHttpInfo ()
        {

            var localVarPath = "/yang-library-version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YangLibraryVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YangLibraryVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (YangLibraryVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YangLibraryVersion)));
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of YangLibraryVersion</returns>
        public async System.Threading.Tasks.Task<YangLibraryVersion> YangLibraryVersionGetAsync ()
        {
             ApiResponse<YangLibraryVersion> localVarResponse = await YangLibraryVersionGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (YangLibraryVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<YangLibraryVersion>> YangLibraryVersionGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/yang-library-version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YangLibraryVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YangLibraryVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (YangLibraryVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YangLibraryVersion)));
        }

    }
}
