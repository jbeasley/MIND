/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Model;

namespace IO.NovaAttSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPatchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPatch (DataAttachmentAttachment attachment);

        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPatchWithHttpInfo (DataAttachmentAttachment attachment);
        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNamePatch (string pePeName, DataAttachmentAttachmentPePePeName pe);

        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNamePatchWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeName pe);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNamePeNamePatch (string pePeName, DataAttachmentAttachmentPePePeNamePeName peName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNamePeNamePatchWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeNamePeName peName);
        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <remarks>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth);

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <remarks>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth);
        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <remarks>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidth">Service Contract Bandwidth value in Mbits/Sec</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth);

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <remarks>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidth">Service Contract Bandwidth value in Mbits/Sec</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth);
        /// <summary>
        /// Name of the Contract Bandwidth Poole
        /// </summary>
        /// <remarks>
        /// Name of the Contract Bandwidth Poole
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="name">Name of the Contract Bandwidth Poole</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name);

        /// <summary>
        /// Name of the Contract Bandwidth Poole
        /// </summary>
        /// <remarks>
        /// Name of the Contract Bandwidth Poole
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="name">Name of the Contract Bandwidth Poole</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name);
        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool);

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool);
        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <remarks>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="serviceClasses">List of Service Classes supported by this contract bandwidth pool</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses);

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <remarks>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="serviceClasses">List of Service Classes supported by this contract bandwidth pool</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses);
        /// <summary>
        /// Sevice Class bandwidth
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bandwidth">Sevice Class bandwidth</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth);

        /// <summary>
        /// Sevice Class bandwidth
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bandwidth">Sevice Class bandwidth</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth);
        /// <summary>
        /// Burst size in bytes
        /// </summary>
        /// <remarks>
        /// Burst size in bytes
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="burstSize">Burst size in bytes</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize);

        /// <summary>
        /// Burst size in bytes
        /// </summary>
        /// <remarks>
        /// Burst size in bytes
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="burstSize">Burst size in bytes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize);
        /// <summary>
        /// Bandwidth units
        /// </summary>
        /// <remarks>
        /// Bandwidth units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bwUnits">Bandwidth units</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits);

        /// <summary>
        /// Bandwidth units
        /// </summary>
        /// <remarks>
        /// Bandwidth units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bwUnits">Bandwidth units</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits);
        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth);

        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scName"></param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName);
        /// <summary>
        /// Trust the receieved COS and DSCP marking
        /// </summary>
        /// <remarks>
        /// Trust the receieved COS and DSCP marking
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="trustReceivedCosAndDscp">Trust the receieved COS and DSCP marking</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp);

        /// <summary>
        /// Trust the receieved COS and DSCP marking
        /// </summary>
        /// <remarks>
        /// Trust the receieved COS and DSCP marking
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="trustReceivedCosAndDscp">Trust the receieved COS and DSCP marking</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp);
        /// <summary>
        /// Attachment Interface ID
        /// </summary>
        /// <remarks>
        /// Attachment Interface ID
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceId">Attachment Interface ID</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId);

        /// <summary>
        /// Attachment Interface ID
        /// </summary>
        /// <remarks>
        /// Attachment Interface ID
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceId">Attachment Interface ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId);
        /// <summary>
        /// Attachment MTU
        /// </summary>
        /// <remarks>
        /// Attachment MTU
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceMtu">Attachment MTU</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu);

        /// <summary>
        /// Attachment MTU
        /// </summary>
        /// <remarks>
        /// Attachment MTU
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceMtu">Attachment MTU</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu);
        /// <summary>
        /// Attachment Interface Type
        /// </summary>
        /// <remarks>
        /// Attachment Interface Type
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceType">Attachment Interface Type</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType);

        /// <summary>
        /// Attachment Interface Type
        /// </summary>
        /// <remarks>
        /// Attachment Interface Type
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceType">Attachment Interface Type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType);
        /// <summary>
        /// List of tagged Attachment Interfaces
        /// </summary>
        /// <remarks>
        /// List of tagged Attachment Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="taggedAttachmentInterface">List of tagged Attachment Interfaces</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface);

        /// <summary>
        /// List of tagged Attachment Interfaces
        /// </summary>
        /// <remarks>
        /// List of tagged Attachment Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="taggedAttachmentInterface">List of tagged Attachment Interfaces</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface);
        /// <summary>
        /// The name of the Contract Bandwidth Pool
        /// </summary>
        /// <remarks>
        /// The name of the Contract Bandwidth Pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName);

        /// <summary>
        /// The name of the Contract Bandwidth Pool
        /// </summary>
        /// <remarks>
        /// The name of the Contract Bandwidth Pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName);
        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <remarks>
        /// Enables the Logical Attachment Interface for IPv4
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4);

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <remarks>
        /// Enables the Logical Attachment Interface for IPv4
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4);
        /// <summary>
        /// IPv4 address
        /// </summary>
        /// <remarks>
        /// IPv4 address
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4Address">IPv4 address</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address);

        /// <summary>
        /// IPv4 address
        /// </summary>
        /// <remarks>
        /// IPv4 address
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4Address">IPv4 address</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address);
        /// <summary>
        /// IPv4 prefix length
        /// </summary>
        /// <remarks>
        /// IPv4 prefix length
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4PrefixLength">IPv4 prefix length</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength);

        /// <summary>
        /// IPv4 prefix length
        /// </summary>
        /// <remarks>
        /// IPv4 prefix length
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4PrefixLength">IPv4 prefix length</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength);
        /// <summary>
        /// IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <remarks>
        /// IPv4 dotted-decimal subnet mask
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4SubnetMask">IPv4 dotted-decimal subnet mask</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask);

        /// <summary>
        /// IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <remarks>
        /// IPv4 dotted-decimal subnet mask
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4SubnetMask">IPv4 dotted-decimal subnet mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask);
        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4);

        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4);
        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif);

        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif);
        /// <summary>
        /// The vlan ID of the Vif
        /// </summary>
        /// <remarks>
        /// The vlan ID of the Vif
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vlanId">The vlan ID of the Vif</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId);

        /// <summary>
        /// The vlan ID of the Vif
        /// </summary>
        /// <remarks>
        /// The vlan ID of the Vif
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vlanId">The vlan ID of the Vif</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId);
        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName);

        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName);
        /// <summary>
        /// The BGP peer is enabled for BFD
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for BFD
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled);

        /// <summary>
        /// The BGP peer is enabled for BFD
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for BFD
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled);
        /// <summary>
        /// The BGP peer is enabled for multi-hop
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for multi-hop
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop);

        /// <summary>
        /// The BGP peer is enabled for multi-hop
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for multi-hop
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop);
        /// <summary>
        /// Maximum number of routes from the BGP peer
        /// </summary>
        /// <remarks>
        /// Maximum number of routes from the BGP peer
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes);

        /// <summary>
        /// Maximum number of routes from the BGP peer
        /// </summary>
        /// <remarks>
        /// Maximum number of routes from the BGP peer
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes);
        /// <summary>
        /// VRF BGP peers
        /// </summary>
        /// <remarks>
        /// VRF BGP peers
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="bgpPeer">VRF BGP peers</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);

        /// <summary>
        /// VRF BGP peers
        /// </summary>
        /// <remarks>
        /// VRF BGP peers
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="bgpPeer">VRF BGP peers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);
        /// <summary>
        /// The peer autonomous system number
        /// </summary>
        /// <remarks>
        /// The peer autonomous system number
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem);

        /// <summary>
        /// The peer autonomous system number
        /// </summary>
        /// <remarks>
        /// The peer autonomous system number
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem);
        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <remarks>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address);

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <remarks>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address);
        /// <summary>
        /// The BGP peer clear password
        /// </summary>
        /// <remarks>
        /// The BGP peer clear password
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerPassword">The BGP peer clear password</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword);

        /// <summary>
        /// The BGP peer clear password
        /// </summary>
        /// <remarks>
        /// The BGP peer clear password
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerPassword">The BGP peer clear password</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword);
        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf);

        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf);
        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAdministratorSubfield">Defines the 2 byte administrator sub-field value of the route-distinguisher</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield);

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAdministratorSubfield">Defines the 2 byte administrator sub-field value of the route-distinguisher</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield);
        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAssignedNumberSubfield">Defines the 4 byte assigned-number sub-field value of the route-distinguisher</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield);

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAssignedNumberSubfield">Defines the 4 byte assigned-number sub-field value of the route-distinguisher</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield);
        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName);

        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName);
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns></returns>
        void DataPatch (DataPutPatch data);

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataPatchWithHttpInfo (DataPutPatch data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPatchAsync (DataAttachmentAttachment attachment);

        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPatchAsyncWithHttpInfo (DataAttachmentAttachment attachment);
        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNamePatchAsync (string pePeName, DataAttachmentAttachmentPePePeName pe);

        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNamePatchAsyncWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeName pe);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNamePeNamePatchAsync (string pePeName, DataAttachmentAttachmentPePePeNamePeName peName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNamePeNamePatchAsyncWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeNamePeName peName);
        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <remarks>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth);

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <remarks>
        /// Attachment Bandwidth values in Gigabits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth);
        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <remarks>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidth">Service Contract Bandwidth value in Mbits/Sec</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth);

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <remarks>
        /// Service Contract Bandwidth value in Mbits/Sec
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidth">Service Contract Bandwidth value in Mbits/Sec</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth);
        /// <summary>
        /// Name of the Contract Bandwidth Poole
        /// </summary>
        /// <remarks>
        /// Name of the Contract Bandwidth Poole
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="name">Name of the Contract Bandwidth Poole</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name);

        /// <summary>
        /// Name of the Contract Bandwidth Poole
        /// </summary>
        /// <remarks>
        /// Name of the Contract Bandwidth Poole
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="name">Name of the Contract Bandwidth Poole</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name);
        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool);

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool);
        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <remarks>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="serviceClasses">List of Service Classes supported by this contract bandwidth pool</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses);

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <remarks>
        /// List of Service Classes supported by this contract bandwidth pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="serviceClasses">List of Service Classes supported by this contract bandwidth pool</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses);
        /// <summary>
        /// Sevice Class bandwidth
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bandwidth">Sevice Class bandwidth</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth);

        /// <summary>
        /// Sevice Class bandwidth
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bandwidth">Sevice Class bandwidth</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth);
        /// <summary>
        /// Burst size in bytes
        /// </summary>
        /// <remarks>
        /// Burst size in bytes
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="burstSize">Burst size in bytes</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize);

        /// <summary>
        /// Burst size in bytes
        /// </summary>
        /// <remarks>
        /// Burst size in bytes
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="burstSize">Burst size in bytes</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize);
        /// <summary>
        /// Bandwidth units
        /// </summary>
        /// <remarks>
        /// Bandwidth units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bwUnits">Bandwidth units</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits);

        /// <summary>
        /// Bandwidth units
        /// </summary>
        /// <remarks>
        /// Bandwidth units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bwUnits">Bandwidth units</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits);
        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth);

        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scName"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scName"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName);
        /// <summary>
        /// Trust the receieved COS and DSCP marking
        /// </summary>
        /// <remarks>
        /// Trust the receieved COS and DSCP marking
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="trustReceivedCosAndDscp">Trust the receieved COS and DSCP marking</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp);

        /// <summary>
        /// Trust the receieved COS and DSCP marking
        /// </summary>
        /// <remarks>
        /// Trust the receieved COS and DSCP marking
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="trustReceivedCosAndDscp">Trust the receieved COS and DSCP marking</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp);
        /// <summary>
        /// Attachment Interface ID
        /// </summary>
        /// <remarks>
        /// Attachment Interface ID
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceId">Attachment Interface ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId);

        /// <summary>
        /// Attachment Interface ID
        /// </summary>
        /// <remarks>
        /// Attachment Interface ID
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceId">Attachment Interface ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId);
        /// <summary>
        /// Attachment MTU
        /// </summary>
        /// <remarks>
        /// Attachment MTU
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceMtu">Attachment MTU</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu);

        /// <summary>
        /// Attachment MTU
        /// </summary>
        /// <remarks>
        /// Attachment MTU
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceMtu">Attachment MTU</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu);
        /// <summary>
        /// Attachment Interface Type
        /// </summary>
        /// <remarks>
        /// Attachment Interface Type
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceType">Attachment Interface Type</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType);

        /// <summary>
        /// Attachment Interface Type
        /// </summary>
        /// <remarks>
        /// Attachment Interface Type
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceType">Attachment Interface Type</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType);
        /// <summary>
        /// List of tagged Attachment Interfaces
        /// </summary>
        /// <remarks>
        /// List of tagged Attachment Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="taggedAttachmentInterface">List of tagged Attachment Interfaces</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface);

        /// <summary>
        /// List of tagged Attachment Interfaces
        /// </summary>
        /// <remarks>
        /// List of tagged Attachment Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="taggedAttachmentInterface">List of tagged Attachment Interfaces</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface);
        /// <summary>
        /// The name of the Contract Bandwidth Pool
        /// </summary>
        /// <remarks>
        /// The name of the Contract Bandwidth Pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName);

        /// <summary>
        /// The name of the Contract Bandwidth Pool
        /// </summary>
        /// <remarks>
        /// The name of the Contract Bandwidth Pool
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName);
        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <remarks>
        /// Enables the Logical Attachment Interface for IPv4
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4);

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <remarks>
        /// Enables the Logical Attachment Interface for IPv4
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4);
        /// <summary>
        /// IPv4 address
        /// </summary>
        /// <remarks>
        /// IPv4 address
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4Address">IPv4 address</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address);

        /// <summary>
        /// IPv4 address
        /// </summary>
        /// <remarks>
        /// IPv4 address
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4Address">IPv4 address</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address);
        /// <summary>
        /// IPv4 prefix length
        /// </summary>
        /// <remarks>
        /// IPv4 prefix length
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4PrefixLength">IPv4 prefix length</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength);

        /// <summary>
        /// IPv4 prefix length
        /// </summary>
        /// <remarks>
        /// IPv4 prefix length
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4PrefixLength">IPv4 prefix length</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength);
        /// <summary>
        /// IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <remarks>
        /// IPv4 dotted-decimal subnet mask
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4SubnetMask">IPv4 dotted-decimal subnet mask</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask);

        /// <summary>
        /// IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <remarks>
        /// IPv4 dotted-decimal subnet mask
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4SubnetMask">IPv4 dotted-decimal subnet mask</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask);
        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4);

        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4);
        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif);

        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif);
        /// <summary>
        /// The vlan ID of the Vif
        /// </summary>
        /// <remarks>
        /// The vlan ID of the Vif
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vlanId">The vlan ID of the Vif</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId);

        /// <summary>
        /// The vlan ID of the Vif
        /// </summary>
        /// <remarks>
        /// The vlan ID of the Vif
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vlanId">The vlan ID of the Vif</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId);
        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName);

        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName);
        /// <summary>
        /// The BGP peer is enabled for BFD
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for BFD
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled);

        /// <summary>
        /// The BGP peer is enabled for BFD
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for BFD
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled);
        /// <summary>
        /// The BGP peer is enabled for multi-hop
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for multi-hop
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop);

        /// <summary>
        /// The BGP peer is enabled for multi-hop
        /// </summary>
        /// <remarks>
        /// The BGP peer is enabled for multi-hop
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop);
        /// <summary>
        /// Maximum number of routes from the BGP peer
        /// </summary>
        /// <remarks>
        /// Maximum number of routes from the BGP peer
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes);

        /// <summary>
        /// Maximum number of routes from the BGP peer
        /// </summary>
        /// <remarks>
        /// Maximum number of routes from the BGP peer
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes);
        /// <summary>
        /// VRF BGP peers
        /// </summary>
        /// <remarks>
        /// VRF BGP peers
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="bgpPeer">VRF BGP peers</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);

        /// <summary>
        /// VRF BGP peers
        /// </summary>
        /// <remarks>
        /// VRF BGP peers
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="bgpPeer">VRF BGP peers</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);
        /// <summary>
        /// The peer autonomous system number
        /// </summary>
        /// <remarks>
        /// The peer autonomous system number
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem);

        /// <summary>
        /// The peer autonomous system number
        /// </summary>
        /// <remarks>
        /// The peer autonomous system number
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem);
        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <remarks>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address);

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <remarks>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address);
        /// <summary>
        /// The BGP peer clear password
        /// </summary>
        /// <remarks>
        /// The BGP peer clear password
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerPassword">The BGP peer clear password</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword);

        /// <summary>
        /// The BGP peer clear password
        /// </summary>
        /// <remarks>
        /// The BGP peer clear password
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerPassword">The BGP peer clear password</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword);
        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf);

        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf);
        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAdministratorSubfield">Defines the 2 byte administrator sub-field value of the route-distinguisher</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield);

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAdministratorSubfield">Defines the 2 byte administrator sub-field value of the route-distinguisher</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield);
        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAssignedNumberSubfield">Defines the 4 byte assigned-number sub-field value of the route-distinguisher</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield);

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <remarks>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAssignedNumberSubfield">Defines the 4 byte assigned-number sub-field value of the route-distinguisher</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield);
        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName);

        /// <summary>
        /// The name of the VRF
        /// </summary>
        /// <remarks>
        /// The name of the VRF
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName);
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataPatchAsync (DataPutPatch data);

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataPatchAsyncWithHttpInfo (DataPutPatch data);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PatchApi : IPatchApi
    {
        private IO.NovaAttSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PatchApi(String basePath)
        {
            this.Configuration = new IO.NovaAttSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaAttSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PatchApi(IO.NovaAttSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaAttSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaAttSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaAttSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaAttSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPatch (DataAttachmentAttachment attachment)
        {
             DataAttachmentAttachmentPatchWithHttpInfo(attachment);
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPatchWithHttpInfo (DataAttachmentAttachment attachment)
        {
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling PatchApi->DataAttachmentAttachmentPatch");

            var localVarPath = "/data/services/attachment:attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachment != null && attachment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachment; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPatchAsync (DataAttachmentAttachment attachment)
        {
             await DataAttachmentAttachmentPatchAsyncWithHttpInfo(attachment);

        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPatchAsyncWithHttpInfo (DataAttachmentAttachment attachment)
        {
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling PatchApi->DataAttachmentAttachmentPatch");

            var localVarPath = "/data/services/attachment:attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachment != null && attachment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachment; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNamePatch (string pePeName, DataAttachmentAttachmentPePePeName pe)
        {
             DataAttachmentAttachmentPePePeNamePatchWithHttpInfo(pePeName, pe);
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNamePatchWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeName pe)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNamePatch");
            // verify the required parameter 'pe' is set
            if (pe == null)
                throw new ApiException(400, "Missing required parameter 'pe' when calling PatchApi->DataAttachmentAttachmentPePePeNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (pe != null && pe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pe; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNamePatchAsync (string pePeName, DataAttachmentAttachmentPePePeName pe)
        {
             await DataAttachmentAttachmentPePePeNamePatchAsyncWithHttpInfo(pePeName, pe);

        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNamePatchAsyncWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeName pe)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNamePatch");
            // verify the required parameter 'pe' is set
            if (pe == null)
                throw new ApiException(400, "Missing required parameter 'pe' when calling PatchApi->DataAttachmentAttachmentPePePeNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (pe != null && pe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pe; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNamePeNamePatch (string pePeName, DataAttachmentAttachmentPePePeNamePeName peName)
        {
             DataAttachmentAttachmentPePePeNamePeNamePatchWithHttpInfo(pePeName, peName);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNamePeNamePatchWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeNamePeName peName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNamePeNamePatch");
            // verify the required parameter 'peName' is set
            if (peName == null)
                throw new ApiException(400, "Missing required parameter 'peName' when calling PatchApi->DataAttachmentAttachmentPePePeNamePeNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (peName != null && peName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNamePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNamePeNamePatchAsync (string pePeName, DataAttachmentAttachmentPePePeNamePeName peName)
        {
             await DataAttachmentAttachmentPePePeNamePeNamePatchAsyncWithHttpInfo(pePeName, peName);

        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNamePeNamePatchAsyncWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeNamePeName peName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNamePeNamePatch");
            // verify the required parameter 'peName' is set
            if (peName == null)
                throw new ApiException(400, "Missing required parameter 'peName' when calling PatchApi->DataAttachmentAttachmentPePePeNamePeNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (peName != null && peName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNamePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, attachmentBandwidth);
        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch");
            // verify the required parameter 'attachmentBandwidth' is set
            if (attachmentBandwidth == null)
                throw new ApiException(400, "Missing required parameter 'attachmentBandwidth' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/attachment-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (attachmentBandwidth != null && attachmentBandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachmentBandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachmentBandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, attachmentBandwidth);

        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec Attachment Bandwidth values in Gigabits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidth attachmentBandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch");
            // verify the required parameter 'attachmentBandwidth' is set
            if (attachmentBandwidth == null)
                throw new ApiException(400, "Missing required parameter 'attachmentBandwidth' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/attachment-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (attachmentBandwidth != null && attachmentBandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachmentBandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachmentBandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdAttachmentBandwidthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidth">Service Contract Bandwidth value in Mbits/Sec</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidth);
        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidth">Service Contract Bandwidth value in Mbits/Sec</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");
            // verify the required parameter 'contractBandwidth' is set
            if (contractBandwidth == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidth' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/contract-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (contractBandwidth != null && contractBandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractBandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractBandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidth">Service Contract Bandwidth value in Mbits/Sec</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidth);

        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec Service Contract Bandwidth value in Mbits/Sec
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidth">Service Contract Bandwidth value in Mbits/Sec</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth contractBandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");
            // verify the required parameter 'contractBandwidth' is set
            if (contractBandwidth == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidth' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/contract-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (contractBandwidth != null && contractBandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractBandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractBandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Contract Bandwidth Poole Name of the Contract Bandwidth Poole
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="name">Name of the Contract Bandwidth Poole</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, name);
        }

        /// <summary>
        /// Name of the Contract Bandwidth Poole Name of the Contract Bandwidth Poole
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="name">Name of the Contract Bandwidth Poole</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Contract Bandwidth Poole Name of the Contract Bandwidth Poole
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="name">Name of the Contract Bandwidth Poole</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, name);

        }

        /// <summary>
        /// Name of the Contract Bandwidth Poole Name of the Contract Bandwidth Poole
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="name">Name of the Contract Bandwidth Poole</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameName name)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidthPool);
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");
            // verify the required parameter 'contractBandwidthPool' is set
            if (contractBandwidthPool == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPool' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (contractBandwidthPool != null && contractBandwidthPool.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractBandwidthPool); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractBandwidthPool; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidthPool);

        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");
            // verify the required parameter 'contractBandwidthPool' is set
            if (contractBandwidthPool == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPool' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (contractBandwidthPool != null && contractBandwidthPool.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractBandwidthPool); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractBandwidthPool; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="serviceClasses">List of Service Classes supported by this contract bandwidth pool</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, serviceClasses);
        }

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="serviceClasses">List of Service Classes supported by this contract bandwidth pool</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'serviceClasses' is set
            if (serviceClasses == null)
                throw new ApiException(400, "Missing required parameter 'serviceClasses' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (serviceClasses != null && serviceClasses.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(serviceClasses); // http body (model) parameter
            }
            else
            {
                localVarPostBody = serviceClasses; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="serviceClasses">List of Service Classes supported by this contract bandwidth pool</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, serviceClasses);

        }

        /// <summary>
        /// List of Service Classes supported by this contract bandwidth pool List of Service Classes supported by this contract bandwidth pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="serviceClasses">List of Service Classes supported by this contract bandwidth pool</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScName serviceClasses)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");
            // verify the required parameter 'serviceClasses' is set
            if (serviceClasses == null)
                throw new ApiException(400, "Missing required parameter 'serviceClasses' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (serviceClasses != null && serviceClasses.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(serviceClasses); // http body (model) parameter
            }
            else
            {
                localVarPostBody = serviceClasses; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sevice Class bandwidth Sevice Class bandwidth
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bandwidth">Sevice Class bandwidth</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, bandwidth);
        }

        /// <summary>
        /// Sevice Class bandwidth Sevice Class bandwidth
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bandwidth">Sevice Class bandwidth</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'bandwidth' is set
            if (bandwidth == null)
                throw new ApiException(400, "Missing required parameter 'bandwidth' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (bandwidth != null && bandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sevice Class bandwidth Sevice Class bandwidth
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bandwidth">Sevice Class bandwidth</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, bandwidth);

        }

        /// <summary>
        /// Sevice Class bandwidth Sevice Class bandwidth
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bandwidth">Sevice Class bandwidth</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidth bandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");
            // verify the required parameter 'bandwidth' is set
            if (bandwidth == null)
                throw new ApiException(400, "Missing required parameter 'bandwidth' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (bandwidth != null && bandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBandwidthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Burst size in bytes Burst size in bytes
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="burstSize">Burst size in bytes</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, burstSize);
        }

        /// <summary>
        /// Burst size in bytes Burst size in bytes
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="burstSize">Burst size in bytes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'burstSize' is set
            if (burstSize == null)
                throw new ApiException(400, "Missing required parameter 'burstSize' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/burst-size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (burstSize != null && burstSize.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(burstSize); // http body (model) parameter
            }
            else
            {
                localVarPostBody = burstSize; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Burst size in bytes Burst size in bytes
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="burstSize">Burst size in bytes</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, burstSize);

        }

        /// <summary>
        /// Burst size in bytes Burst size in bytes
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="burstSize">Burst size in bytes</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSize burstSize)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");
            // verify the required parameter 'burstSize' is set
            if (burstSize == null)
                throw new ApiException(400, "Missing required parameter 'burstSize' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/burst-size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (burstSize != null && burstSize.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(burstSize); // http body (model) parameter
            }
            else
            {
                localVarPostBody = burstSize; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBurstSizePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Bandwidth units Bandwidth units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bwUnits">Bandwidth units</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, bwUnits);
        }

        /// <summary>
        /// Bandwidth units Bandwidth units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bwUnits">Bandwidth units</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'bwUnits' is set
            if (bwUnits == null)
                throw new ApiException(400, "Missing required parameter 'bwUnits' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/bw-units";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (bwUnits != null && bwUnits.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bwUnits); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bwUnits; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Bandwidth units Bandwidth units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bwUnits">Bandwidth units</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, bwUnits);

        }

        /// <summary>
        /// Bandwidth units Bandwidth units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="bwUnits">Bandwidth units</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnits bwUnits)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");
            // verify the required parameter 'bwUnits' is set
            if (bwUnits == null)
                throw new ApiException(400, "Missing required parameter 'bwUnits' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth/bw-units";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (bwUnits != null && bwUnits.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bwUnits); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bwUnits; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthBwUnitsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scBandwidth);
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'scBandwidth' is set
            if (scBandwidth == null)
                throw new ApiException(400, "Missing required parameter 'scBandwidth' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (scBandwidth != null && scBandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scBandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scBandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scBandwidth);

        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidth scBandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");
            // verify the required parameter 'scBandwidth' is set
            if (scBandwidth == null)
                throw new ApiException(400, "Missing required parameter 'scBandwidth' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (scBandwidth != null && scBandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scBandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scBandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scName"></param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'scName' is set
            if (scName == null)
                throw new ApiException(400, "Missing required parameter 'scName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (scName != null && scName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scName"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scName);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scName"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScName scName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");
            // verify the required parameter 'scName' is set
            if (scName == null)
                throw new ApiException(400, "Missing required parameter 'scName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (scName != null && scName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Trust the receieved COS and DSCP marking Trust the receieved COS and DSCP marking
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="trustReceivedCosAndDscp">Trust the receieved COS and DSCP marking</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, trustReceivedCosAndDscp);
        }

        /// <summary>
        /// Trust the receieved COS and DSCP marking Trust the receieved COS and DSCP marking
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="trustReceivedCosAndDscp">Trust the receieved COS and DSCP marking</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");
            // verify the required parameter 'trustReceivedCosAndDscp' is set
            if (trustReceivedCosAndDscp == null)
                throw new ApiException(400, "Missing required parameter 'trustReceivedCosAndDscp' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/trust-received-cos-and-dscp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (trustReceivedCosAndDscp != null && trustReceivedCosAndDscp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trustReceivedCosAndDscp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trustReceivedCosAndDscp; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Trust the receieved COS and DSCP marking Trust the receieved COS and DSCP marking
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="trustReceivedCosAndDscp">Trust the receieved COS and DSCP marking</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, trustReceivedCosAndDscp);

        }

        /// <summary>
        /// Trust the receieved COS and DSCP marking Trust the receieved COS and DSCP marking
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="trustReceivedCosAndDscp">Trust the receieved COS and DSCP marking</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscp trustReceivedCosAndDscp)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");
            // verify the required parameter 'trustReceivedCosAndDscp' is set
            if (trustReceivedCosAndDscp == null)
                throw new ApiException(400, "Missing required parameter 'trustReceivedCosAndDscp' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/trust-received-cos-and-dscp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (trustReceivedCosAndDscp != null && trustReceivedCosAndDscp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trustReceivedCosAndDscp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trustReceivedCosAndDscp; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameTrustReceivedCosAndDscpPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Interface ID Attachment Interface ID
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceId">Attachment Interface ID</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceId);
        }

        /// <summary>
        /// Attachment Interface ID Attachment Interface ID
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceId">Attachment Interface ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch");
            // verify the required parameter 'interfaceId' is set
            if (interfaceId == null)
                throw new ApiException(400, "Missing required parameter 'interfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (interfaceId != null && interfaceId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(interfaceId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = interfaceId; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Interface ID Attachment Interface ID
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceId">Attachment Interface ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceId);

        }

        /// <summary>
        /// Attachment Interface ID Attachment Interface ID
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceId">Attachment Interface ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceId interfaceId)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch");
            // verify the required parameter 'interfaceId' is set
            if (interfaceId == null)
                throw new ApiException(400, "Missing required parameter 'interfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (interfaceId != null && interfaceId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(interfaceId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = interfaceId; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment MTU Attachment MTU
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceMtu">Attachment MTU</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceMtu);
        }

        /// <summary>
        /// Attachment MTU Attachment MTU
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceMtu">Attachment MTU</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch");
            // verify the required parameter 'interfaceMtu' is set
            if (interfaceMtu == null)
                throw new ApiException(400, "Missing required parameter 'interfaceMtu' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-mtu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (interfaceMtu != null && interfaceMtu.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(interfaceMtu); // http body (model) parameter
            }
            else
            {
                localVarPostBody = interfaceMtu; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment MTU Attachment MTU
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceMtu">Attachment MTU</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceMtu);

        }

        /// <summary>
        /// Attachment MTU Attachment MTU
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceMtu">Attachment MTU</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtu interfaceMtu)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch");
            // verify the required parameter 'interfaceMtu' is set
            if (interfaceMtu == null)
                throw new ApiException(400, "Missing required parameter 'interfaceMtu' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-mtu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (interfaceMtu != null && interfaceMtu.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(interfaceMtu); // http body (model) parameter
            }
            else
            {
                localVarPostBody = interfaceMtu; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceMtuPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Interface Type Attachment Interface Type
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceType">Attachment Interface Type</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceType);
        }

        /// <summary>
        /// Attachment Interface Type Attachment Interface Type
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceType">Attachment Interface Type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch");
            // verify the required parameter 'interfaceType' is set
            if (interfaceType == null)
                throw new ApiException(400, "Missing required parameter 'interfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (interfaceType != null && interfaceType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(interfaceType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = interfaceType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Interface Type Attachment Interface Type
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceType">Attachment Interface Type</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, interfaceType);

        }

        /// <summary>
        /// Attachment Interface Type Attachment Interface Type
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="interfaceType">Attachment Interface Type</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType interfaceType)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch");
            // verify the required parameter 'interfaceType' is set
            if (interfaceType == null)
                throw new ApiException(400, "Missing required parameter 'interfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/interface-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (interfaceType != null && interfaceType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(interfaceType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = interfaceType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of tagged Attachment Interfaces List of tagged Attachment Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="taggedAttachmentInterface">List of tagged Attachment Interfaces</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, taggedAttachmentInterface);
        }

        /// <summary>
        /// List of tagged Attachment Interfaces List of tagged Attachment Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="taggedAttachmentInterface">List of tagged Attachment Interfaces</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterface' is set
            if (taggedAttachmentInterface == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterface' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (taggedAttachmentInterface != null && taggedAttachmentInterface.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taggedAttachmentInterface); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taggedAttachmentInterface; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of tagged Attachment Interfaces List of tagged Attachment Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="taggedAttachmentInterface">List of tagged Attachment Interfaces</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, taggedAttachmentInterface);

        }

        /// <summary>
        /// List of tagged Attachment Interfaces List of tagged Attachment Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="taggedAttachmentInterface">List of tagged Attachment Interfaces</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceId taggedAttachmentInterface)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch");
            // verify the required parameter 'taggedAttachmentInterface' is set
            if (taggedAttachmentInterface == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterface' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (taggedAttachmentInterface != null && taggedAttachmentInterface.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taggedAttachmentInterface); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taggedAttachmentInterface; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The name of the Contract Bandwidth Pool The name of the Contract Bandwidth Pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, contractBandwidthPoolName);
        }

        /// <summary>
        /// The name of the Contract Bandwidth Pool The name of the Contract Bandwidth Pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/contract-bandwidth-pool-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (contractBandwidthPoolName != null && contractBandwidthPoolName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractBandwidthPoolName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractBandwidthPoolName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The name of the Contract Bandwidth Pool The name of the Contract Bandwidth Pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, contractBandwidthPoolName);

        }

        /// <summary>
        /// The name of the Contract Bandwidth Pool The name of the Contract Bandwidth Pool
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolName contractBandwidthPoolName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/contract-bandwidth-pool-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (contractBandwidthPoolName != null && contractBandwidthPoolName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractBandwidthPoolName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractBandwidthPoolName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdContractBandwidthPoolNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, enableIpv4);
        }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");
            // verify the required parameter 'enableIpv4' is set
            if (enableIpv4 == null)
                throw new ApiException(400, "Missing required parameter 'enableIpv4' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/enable-ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (enableIpv4 != null && enableIpv4.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enableIpv4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enableIpv4; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, enableIpv4);

        }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 Enables the Logical Attachment Interface for IPv4
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4PatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4 enableIpv4)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");
            // verify the required parameter 'enableIpv4' is set
            if (enableIpv4 == null)
                throw new ApiException(400, "Missing required parameter 'enableIpv4' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/enable-ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (enableIpv4 != null && enableIpv4.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enableIpv4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enableIpv4; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdEnableIpv4Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 address IPv4 address
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4Address">IPv4 address</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4Address);
        }

        /// <summary>
        /// IPv4 address IPv4 address
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4Address">IPv4 address</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");
            // verify the required parameter 'ipv4Address' is set
            if (ipv4Address == null)
                throw new ApiException(400, "Missing required parameter 'ipv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4Address != null && ipv4Address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4Address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4Address; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 address IPv4 address
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4Address">IPv4 address</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4Address);

        }

        /// <summary>
        /// IPv4 address IPv4 address
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4Address">IPv4 address</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4Address ipv4Address)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");
            // verify the required parameter 'ipv4Address' is set
            if (ipv4Address == null)
                throw new ApiException(400, "Missing required parameter 'ipv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4Address != null && ipv4Address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4Address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4Address; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 prefix length IPv4 prefix length
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4PrefixLength">IPv4 prefix length</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4PrefixLength);
        }

        /// <summary>
        /// IPv4 prefix length IPv4 prefix length
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4PrefixLength">IPv4 prefix length</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");
            // verify the required parameter 'ipv4PrefixLength' is set
            if (ipv4PrefixLength == null)
                throw new ApiException(400, "Missing required parameter 'ipv4PrefixLength' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-prefix-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4PrefixLength != null && ipv4PrefixLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4PrefixLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4PrefixLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 prefix length IPv4 prefix length
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4PrefixLength">IPv4 prefix length</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4PrefixLength);

        }

        /// <summary>
        /// IPv4 prefix length IPv4 prefix length
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4PrefixLength">IPv4 prefix length</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLength ipv4PrefixLength)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");
            // verify the required parameter 'ipv4PrefixLength' is set
            if (ipv4PrefixLength == null)
                throw new ApiException(400, "Missing required parameter 'ipv4PrefixLength' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-prefix-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4PrefixLength != null && ipv4PrefixLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4PrefixLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4PrefixLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4PrefixLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 dotted-decimal subnet mask IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4SubnetMask">IPv4 dotted-decimal subnet mask</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4SubnetMask);
        }

        /// <summary>
        /// IPv4 dotted-decimal subnet mask IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4SubnetMask">IPv4 dotted-decimal subnet mask</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");
            // verify the required parameter 'ipv4SubnetMask' is set
            if (ipv4SubnetMask == null)
                throw new ApiException(400, "Missing required parameter 'ipv4SubnetMask' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-subnet-mask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4SubnetMask != null && ipv4SubnetMask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4SubnetMask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4SubnetMask; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 dotted-decimal subnet mask IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4SubnetMask">IPv4 dotted-decimal subnet mask</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4SubnetMask);

        }

        /// <summary>
        /// IPv4 dotted-decimal subnet mask IPv4 dotted-decimal subnet mask
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4SubnetMask">IPv4 dotted-decimal subnet mask</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMask ipv4SubnetMask)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");
            // verify the required parameter 'ipv4SubnetMask' is set
            if (ipv4SubnetMask == null)
                throw new ApiException(400, "Missing required parameter 'ipv4SubnetMask' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4/ipv4-subnet-mask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4SubnetMask != null && ipv4SubnetMask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4SubnetMask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4SubnetMask; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Ipv4SubnetMaskPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4);
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");
            // verify the required parameter 'ipv4' is set
            if (ipv4 == null)
                throw new ApiException(400, "Missing required parameter 'ipv4' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4 != null && ipv4.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4);

        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4 ipv4)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");
            // verify the required parameter 'ipv4' is set
            if (ipv4 == null)
                throw new ApiException(400, "Missing required parameter 'ipv4' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4 != null && ipv4.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vif);
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");
            // verify the required parameter 'vif' is set
            if (vif == null)
                throw new ApiException(400, "Missing required parameter 'vif' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (vif != null && vif.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vif); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vif; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vif);

        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");
            // verify the required parameter 'vif' is set
            if (vif == null)
                throw new ApiException(400, "Missing required parameter 'vif' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (vif != null && vif.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vif); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vif; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The vlan ID of the Vif The vlan ID of the Vif
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vlanId">The vlan ID of the Vif</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vlanId);
        }

        /// <summary>
        /// The vlan ID of the Vif The vlan ID of the Vif
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vlanId">The vlan ID of the Vif</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");
            // verify the required parameter 'vlanId' is set
            if (vlanId == null)
                throw new ApiException(400, "Missing required parameter 'vlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/vlan-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (vlanId != null && vlanId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vlanId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vlanId; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The vlan ID of the Vif The vlan ID of the Vif
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vlanId">The vlan ID of the Vif</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vlanId);

        }

        /// <summary>
        /// The vlan ID of the Vif The vlan ID of the Vif
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vlanId">The vlan ID of the Vif</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanId vlanId)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");
            // verify the required parameter 'vlanId' is set
            if (vlanId == null)
                throw new ApiException(400, "Missing required parameter 'vlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/vlan-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (vlanId != null && vlanId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vlanId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vlanId; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVlanIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vrfName);
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");
            // verify the required parameter 'vrfName' is set
            if (vrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (vrfName != null && vrfName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrfName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrfName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vrfName);

        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatchAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfName vrfName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");
            // verify the required parameter 'vrfName' is set
            if (vrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (vrfName != null && vrfName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrfName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrfName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The BGP peer is enabled for BFD The BGP peer is enabled for BFD
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, isBfdEnabled);
        }

        /// <summary>
        /// The BGP peer is enabled for BFD The BGP peer is enabled for BFD
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch");
            // verify the required parameter 'isBfdEnabled' is set
            if (isBfdEnabled == null)
                throw new ApiException(400, "Missing required parameter 'isBfdEnabled' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/is-bfd-enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (isBfdEnabled != null && isBfdEnabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isBfdEnabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isBfdEnabled; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The BGP peer is enabled for BFD The BGP peer is enabled for BFD
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, isBfdEnabled);

        }

        /// <summary>
        /// The BGP peer is enabled for BFD The BGP peer is enabled for BFD
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabled isBfdEnabled)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch");
            // verify the required parameter 'isBfdEnabled' is set
            if (isBfdEnabled == null)
                throw new ApiException(400, "Missing required parameter 'isBfdEnabled' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/is-bfd-enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (isBfdEnabled != null && isBfdEnabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isBfdEnabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isBfdEnabled; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsBfdEnabledPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The BGP peer is enabled for multi-hop The BGP peer is enabled for multi-hop
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, isMultiHop);
        }

        /// <summary>
        /// The BGP peer is enabled for multi-hop The BGP peer is enabled for multi-hop
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch");
            // verify the required parameter 'isMultiHop' is set
            if (isMultiHop == null)
                throw new ApiException(400, "Missing required parameter 'isMultiHop' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/is-multi-hop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (isMultiHop != null && isMultiHop.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isMultiHop); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isMultiHop; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The BGP peer is enabled for multi-hop The BGP peer is enabled for multi-hop
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, isMultiHop);

        }

        /// <summary>
        /// The BGP peer is enabled for multi-hop The BGP peer is enabled for multi-hop
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHop isMultiHop)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch");
            // verify the required parameter 'isMultiHop' is set
            if (isMultiHop == null)
                throw new ApiException(400, "Missing required parameter 'isMultiHop' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/is-multi-hop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (isMultiHop != null && isMultiHop.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isMultiHop); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isMultiHop; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIsMultiHopPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Maximum number of routes from the BGP peer Maximum number of routes from the BGP peer
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, maxPeerRoutes);
        }

        /// <summary>
        /// Maximum number of routes from the BGP peer Maximum number of routes from the BGP peer
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch");
            // verify the required parameter 'maxPeerRoutes' is set
            if (maxPeerRoutes == null)
                throw new ApiException(400, "Missing required parameter 'maxPeerRoutes' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/max-peer-routes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (maxPeerRoutes != null && maxPeerRoutes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(maxPeerRoutes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = maxPeerRoutes; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Maximum number of routes from the BGP peer Maximum number of routes from the BGP peer
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, maxPeerRoutes);

        }

        /// <summary>
        /// Maximum number of routes from the BGP peer Maximum number of routes from the BGP peer
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutes maxPeerRoutes)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch");
            // verify the required parameter 'maxPeerRoutes' is set
            if (maxPeerRoutes == null)
                throw new ApiException(400, "Missing required parameter 'maxPeerRoutes' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/max-peer-routes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (maxPeerRoutes != null && maxPeerRoutes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(maxPeerRoutes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = maxPeerRoutes; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressMaxPeerRoutesPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF BGP peers VRF BGP peers
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="bgpPeer">VRF BGP peers</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);
        }

        /// <summary>
        /// VRF BGP peers VRF BGP peers
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="bgpPeer">VRF BGP peers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeer' is set
            if (bgpPeer == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeer' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (bgpPeer != null && bgpPeer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bgpPeer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bgpPeer; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF BGP peers VRF BGP peers
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="bgpPeer">VRF BGP peers</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);

        }

        /// <summary>
        /// VRF BGP peers VRF BGP peers
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="bgpPeer">VRF BGP peers</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeer' is set
            if (bgpPeer == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeer' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (bgpPeer != null && bgpPeer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bgpPeer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bgpPeer; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The peer autonomous system number The peer autonomous system number
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerAutonomousSystem);
        }

        /// <summary>
        /// The peer autonomous system number The peer autonomous system number
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch");
            // verify the required parameter 'peerAutonomousSystem' is set
            if (peerAutonomousSystem == null)
                throw new ApiException(400, "Missing required parameter 'peerAutonomousSystem' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-autonomous-system";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerAutonomousSystem != null && peerAutonomousSystem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerAutonomousSystem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerAutonomousSystem; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The peer autonomous system number The peer autonomous system number
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerAutonomousSystem);

        }

        /// <summary>
        /// The peer autonomous system number The peer autonomous system number
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystem peerAutonomousSystem)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch");
            // verify the required parameter 'peerAutonomousSystem' is set
            if (peerAutonomousSystem == null)
                throw new ApiException(400, "Missing required parameter 'peerAutonomousSystem' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-autonomous-system";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerAutonomousSystem != null && peerAutonomousSystem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerAutonomousSystem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerAutonomousSystem; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerAutonomousSystemPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);
        }

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'peerIpv4Address' is set
            if (peerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'peerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerIpv4Address != null && peerIpv4Address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerIpv4Address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerIpv4Address; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);

        }

        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE The IPv4 address of the CE used to establish a BGP session with            the PE
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4Address peerIpv4Address)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'peerIpv4Address' is set
            if (peerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'peerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerIpv4Address != null && peerIpv4Address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerIpv4Address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerIpv4Address; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The BGP peer clear password The BGP peer clear password
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerPassword">The BGP peer clear password</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerPassword);
        }

        /// <summary>
        /// The BGP peer clear password The BGP peer clear password
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerPassword">The BGP peer clear password</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch");
            // verify the required parameter 'peerPassword' is set
            if (peerPassword == null)
                throw new ApiException(400, "Missing required parameter 'peerPassword' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerPassword != null && peerPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerPassword; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The BGP peer clear password The BGP peer clear password
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerPassword">The BGP peer clear password</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchAsync (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchAsyncWithHttpInfo(pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerPassword);

        }

        /// <summary>
        /// The BGP peer clear password The BGP peer clear password
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="bgpPeerPeerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE</param>
        /// <param name="peerPassword">The BGP peer clear password</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPassword peerPassword)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch");
            // verify the required parameter 'peerPassword' is set
            if (peerPassword == null)
                throw new ApiException(400, "Missing required parameter 'peerPassword' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerPassword != null && peerPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerPassword; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerPasswordPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchWithHttpInfo(pePeName, vrfVrfName, vrf);
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrf' is set
            if (vrf == null)
                throw new ApiException(400, "Missing required parameter 'vrf' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrf != null && vrf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrf; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo(pePeName, vrfVrfName, vrf);

        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrf' is set
            if (vrf == null)
                throw new ApiException(400, "Missing required parameter 'vrf' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrf != null && vrf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrf; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAdministratorSubfield">Defines the 2 byte administrator sub-field value of the route-distinguisher</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchWithHttpInfo(pePeName, vrfVrfName, rdAdministratorSubfield);
        }

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAdministratorSubfield">Defines the 2 byte administrator sub-field value of the route-distinguisher</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch");
            // verify the required parameter 'rdAdministratorSubfield' is set
            if (rdAdministratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'rdAdministratorSubfield' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/rd-administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (rdAdministratorSubfield != null && rdAdministratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rdAdministratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rdAdministratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAdministratorSubfield">Defines the 2 byte administrator sub-field value of the route-distinguisher</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchAsyncWithHttpInfo(pePeName, vrfVrfName, rdAdministratorSubfield);

        }

        /// <summary>
        /// Defines the 2 byte administrator sub-field value of the route-distinguisher Defines the 2 byte administrator sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAdministratorSubfield">Defines the 2 byte administrator sub-field value of the route-distinguisher</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfield rdAdministratorSubfield)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch");
            // verify the required parameter 'rdAdministratorSubfield' is set
            if (rdAdministratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'rdAdministratorSubfield' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/rd-administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (rdAdministratorSubfield != null && rdAdministratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rdAdministratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rdAdministratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAssignedNumberSubfield">Defines the 4 byte assigned-number sub-field value of the route-distinguisher</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchWithHttpInfo(pePeName, vrfVrfName, rdAssignedNumberSubfield);
        }

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAssignedNumberSubfield">Defines the 4 byte assigned-number sub-field value of the route-distinguisher</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch");
            // verify the required parameter 'rdAssignedNumberSubfield' is set
            if (rdAssignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'rdAssignedNumberSubfield' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/rd-assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (rdAssignedNumberSubfield != null && rdAssignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rdAssignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rdAssignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAssignedNumberSubfield">Defines the 4 byte assigned-number sub-field value of the route-distinguisher</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchAsyncWithHttpInfo(pePeName, vrfVrfName, rdAssignedNumberSubfield);

        }

        /// <summary>
        /// Defines the 4 byte assigned-number sub-field value of the route-distinguisher Defines the 4 byte assigned-number sub-field value of the route-distinguisher
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="rdAssignedNumberSubfield">Defines the 4 byte assigned-number sub-field value of the route-distinguisher</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfield rdAssignedNumberSubfield)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch");
            // verify the required parameter 'rdAssignedNumberSubfield' is set
            if (rdAssignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'rdAssignedNumberSubfield' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/rd-assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (rdAssignedNumberSubfield != null && rdAssignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rdAssignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rdAssignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameRdAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo(pePeName, vrfVrfName, vrfName);
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfName' is set
            if (vrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrfName != null && vrfName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrfName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrfName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo(pePeName, vrfVrfName, vrfName);

        }

        /// <summary>
        /// The name of the VRF The name of the VRF
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrfName">The name of the VRF</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfName vrfName)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfName' is set
            if (vrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfName' when calling PatchApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrfName != null && vrfName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrfName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrfName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNameVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns></returns>
        public void DataPatch (DataPutPatch data)
        {
             DataPatchWithHttpInfo(data);
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataPatchWithHttpInfo (DataPutPatch data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PatchApi->DataPatch");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataPatchAsync (DataPutPatch data)
        {
             await DataPatchAsyncWithHttpInfo(data);

        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataPatchAsyncWithHttpInfo (DataPutPatch data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PatchApi->DataPatch");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
