/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Model;

namespace IO.NovaAttSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth);

        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth);
        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4);

        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4);
        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPost (DataAttachmentAttachmentPost attachment);

        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPostWithHttpInfo (DataAttachmentAttachmentPost attachment);
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns></returns>
        void DataPost (DataPost data);

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataPostWithHttpInfo (DataPost data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth);

        /// <summary>
        /// Sevice Class bandwidth and units
        /// </summary>
        /// <remarks>
        /// Sevice Class bandwidth and units
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth);
        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4);

        /// <summary>
        /// Logical Attachment IPv4 configuration
        /// </summary>
        /// <remarks>
        /// Logical Attachment IPv4 configuration
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4);
        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPostAsync (DataAttachmentAttachmentPost attachment);

        /// <summary>
        /// Attachment
        /// </summary>
        /// <remarks>
        /// Attachment
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPostAsyncWithHttpInfo (DataAttachmentAttachmentPost attachment);
        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataPostAsync (DataPost data);

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataPostAsyncWithHttpInfo (DataPost data);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PostApi : IPostApi
    {
        private IO.NovaAttSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostApi(String basePath)
        {
            this.Configuration = new IO.NovaAttSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaAttSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PostApi(IO.NovaAttSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaAttSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaAttSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaAttSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaAttSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scBandwidth);
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'scBandwidth' is set
            if (scBandwidth == null)
                throw new ApiException(400, "Missing required parameter 'scBandwidth' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (scBandwidth != null && scBandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scBandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scBandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, serviceClassesScName, scBandwidth);

        }

        /// <summary>
        /// Sevice Class bandwidth and units Sevice Class bandwidth and units
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="serviceClassesScName"></param>
        /// <param name="scBandwidth">Sevice Class bandwidth and units</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPostAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, string serviceClassesScName, DataAttachmentContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost scBandwidth)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'serviceClassesScName' is set
            if (serviceClassesScName == null)
                throw new ApiException(400, "Missing required parameter 'serviceClassesScName' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");
            // verify the required parameter 'scBandwidth' is set
            if (scBandwidth == null)
                throw new ApiException(400, "Missing required parameter 'scBandwidth' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}/service-classes={service-classes-sc-name}/sc-bandwidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (serviceClassesScName != null) localVarPathParams.Add("service-classes-sc-name", this.Configuration.ApiClient.ParameterToString(serviceClassesScName)); // path parameter
            if (scBandwidth != null && scBandwidth.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scBandwidth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scBandwidth; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameServiceClassesServiceClassesScNameScBandwidthPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4);
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");
            // verify the required parameter 'ipv4' is set
            if (ipv4 == null)
                throw new ApiException(400, "Missing required parameter 'ipv4' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4 != null && ipv4.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, ipv4);

        }

        /// <summary>
        /// Logical Attachment IPv4 configuration Logical Attachment IPv4 configuration
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="ipv4">Logical Attachment IPv4 configuration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4PostAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post ipv4)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");
            // verify the required parameter 'ipv4' is set
            if (ipv4 == null)
                throw new ApiException(400, "Missing required parameter 'ipv4' when calling PostApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}/ipv4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (ipv4 != null && ipv4.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdIpv4Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPost (DataAttachmentAttachmentPost attachment)
        {
             DataAttachmentAttachmentPostWithHttpInfo(attachment);
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPostWithHttpInfo (DataAttachmentAttachmentPost attachment)
        {
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling PostApi->DataAttachmentAttachmentPost");

            var localVarPath = "/data/services/attachment:attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachment != null && attachment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachment; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPostAsync (DataAttachmentAttachmentPost attachment)
        {
             await DataAttachmentAttachmentPostAsyncWithHttpInfo(attachment);

        }

        /// <summary>
        /// Attachment Attachment
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment">Attachment</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPostAsyncWithHttpInfo (DataAttachmentAttachmentPost attachment)
        {
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling PostApi->DataAttachmentAttachmentPost");

            var localVarPath = "/data/services/attachment:attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachment != null && attachment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachment; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns></returns>
        public void DataPost (DataPost data)
        {
             DataPostWithHttpInfo(data);
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataPostWithHttpInfo (DataPost data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PostApi->DataPost");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataPostAsync (DataPost data)
        {
             await DataPostAsyncWithHttpInfo(data);

        }

        /// <summary>
        /// This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network. This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataPostAsyncWithHttpInfo (DataPost data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PostApi->DataPost");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
