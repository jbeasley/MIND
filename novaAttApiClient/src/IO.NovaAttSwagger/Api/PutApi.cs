/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaAttSwagger.Client;
using IO.NovaAttSwagger.Model;

namespace IO.NovaAttSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPutApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNamePut (string pePeName, DataAttachmentAttachmentPePePeName pe, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNamePutWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeName pe, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf, bool? noOutOfSyncCheck = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNamePutAsync (string pePeName, DataAttachmentAttachmentPePePeName pe, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of PE devices
        /// </summary>
        /// <remarks>
        /// List of PE devices
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNamePutAsyncWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeName pe, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <remarks>
        /// List of Contract Bandwidth Pools for this Attachment Interface
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of Virtual Interfaces
        /// </summary>
        /// <remarks>
        /// List of Virtual Interfaces
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VRFs
        /// </summary>
        /// <remarks>
        /// List of VRFs
        /// </remarks>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf, bool? noOutOfSyncCheck = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PutApi : IPutApi
    {
        private IO.NovaAttSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PutApi(String basePath)
        {
            this.Configuration = new IO.NovaAttSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaAttSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PutApi(IO.NovaAttSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaAttSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaAttSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaAttSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaAttSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNamePut (string pePeName, DataAttachmentAttachmentPePePeName pe, bool? noOutOfSyncCheck = null)
        {
             DataAttachmentAttachmentPePePeNamePutWithHttpInfo(pePeName, pe, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNamePutWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeName pe, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PutApi->DataAttachmentAttachmentPePePeNamePut");
            // verify the required parameter 'pe' is set
            if (pe == null)
                throw new ApiException(400, "Missing required parameter 'pe' when calling PutApi->DataAttachmentAttachmentPePePeNamePut");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (pe != null && pe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pe; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNamePutAsync (string pePeName, DataAttachmentAttachmentPePePeName pe, bool? noOutOfSyncCheck = null)
        {
             await DataAttachmentAttachmentPePePeNamePutAsyncWithHttpInfo(pePeName, pe, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of PE devices List of PE devices
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNamePutAsyncWithHttpInfo (string pePeName, DataAttachmentAttachmentPePePeName pe, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PutApi->DataAttachmentAttachmentPePePeNamePut");
            // verify the required parameter 'pe' is set
            if (pe == null)
                throw new ApiException(400, "Missing required parameter 'pe' when calling PutApi->DataAttachmentAttachmentPePePeNamePut");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (pe != null && pe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pe; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool, bool? noOutOfSyncCheck = null)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidthPool, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");
            // verify the required parameter 'contractBandwidthPool' is set
            if (contractBandwidthPool == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPool' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (contractBandwidthPool != null && contractBandwidthPool.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractBandwidthPool); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractBandwidthPool; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool, bool? noOutOfSyncCheck = null)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, contractBandwidthPoolName, contractBandwidthPool, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface List of Contract Bandwidth Pools for this Attachment Interface
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="contractBandwidthPoolName">Name of the Contract Bandwidth Poole</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePutAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, string contractBandwidthPoolName, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolName contractBandwidthPool, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");
            // verify the required parameter 'contractBandwidthPoolName' is set
            if (contractBandwidthPoolName == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPoolName' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");
            // verify the required parameter 'contractBandwidthPool' is set
            if (contractBandwidthPool == null)
                throw new ApiException(400, "Missing required parameter 'contractBandwidthPool' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/contract-bandwidth-pool={contract-bandwidth-pool-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (contractBandwidthPoolName != null) localVarPathParams.Add("contract-bandwidth-pool-name", this.Configuration.ApiClient.ParameterToString(contractBandwidthPoolName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (contractBandwidthPool != null && contractBandwidthPool.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractBandwidthPool); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractBandwidthPool; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif, bool? noOutOfSyncCheck = null)
        {
             DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vif, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");
            // verify the required parameter 'vif' is set
            if (vif == null)
                throw new ApiException(400, "Missing required parameter 'vif' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (vif != null && vif.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vif); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vif; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutAsync (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif, bool? noOutOfSyncCheck = null)
        {
             await DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutAsyncWithHttpInfo(pePeName, taggedAttachmentInterfaceInterfaceType, taggedAttachmentInterfaceInterfaceId, vifVlanId, vif, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of Virtual Interfaces List of Virtual Interfaces
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="taggedAttachmentInterfaceInterfaceType">Attachment Interface Type</param>
        /// <param name="taggedAttachmentInterfaceInterfaceId">Attachment Interface ID</param>
        /// <param name="vifVlanId">The vlan ID of the Vif</param>
        /// <param name="vif">List of Virtual Interfaces</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPutAsyncWithHttpInfo (string pePeName, string taggedAttachmentInterfaceInterfaceType, string taggedAttachmentInterfaceInterfaceId, int? vifVlanId, DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanId vif, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceType' is set
            if (taggedAttachmentInterfaceInterfaceType == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceType' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");
            // verify the required parameter 'taggedAttachmentInterfaceInterfaceId' is set
            if (taggedAttachmentInterfaceInterfaceId == null)
                throw new ApiException(400, "Missing required parameter 'taggedAttachmentInterfaceInterfaceId' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");
            // verify the required parameter 'vifVlanId' is set
            if (vifVlanId == null)
                throw new ApiException(400, "Missing required parameter 'vifVlanId' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");
            // verify the required parameter 'vif' is set
            if (vif == null)
                throw new ApiException(400, "Missing required parameter 'vif' when calling PutApi->DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/tagged-attachment-interface={tagged-attachment-interface-interface-type},{tagged-attachment-interface-interface-id}/vif={vif-vlan-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (taggedAttachmentInterfaceInterfaceType != null) localVarPathParams.Add("tagged-attachment-interface-interface-type", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceType)); // path parameter
            if (taggedAttachmentInterfaceInterfaceId != null) localVarPathParams.Add("tagged-attachment-interface-interface-id", this.Configuration.ApiClient.ParameterToString(taggedAttachmentInterfaceInterfaceId)); // path parameter
            if (vifVlanId != null) localVarPathParams.Add("vif-vlan-id", this.Configuration.ApiClient.ParameterToString(vifVlanId)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (vif != null && vif.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vif); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vif; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdVifVifVlanIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf, bool? noOutOfSyncCheck = null)
        {
             DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutWithHttpInfo(pePeName, vrfVrfName, vrf, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PutApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PutApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut");
            // verify the required parameter 'vrf' is set
            if (vrf == null)
                throw new ApiException(400, "Missing required parameter 'vrf' when calling PutApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (vrf != null && vrf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrf; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutAsync (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf, bool? noOutOfSyncCheck = null)
        {
             await DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutAsyncWithHttpInfo(pePeName, vrfVrfName, vrf, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of VRFs List of VRFs
        /// </summary>
        /// <exception cref="IO.NovaAttSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">The name of the VRF</param>
        /// <param name="vrf">List of VRFs</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePutAsyncWithHttpInfo (string pePeName, string vrfVrfName, DataAttachmentAttachmentPePePeNameVrfVrfVrfName vrf, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PutApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PutApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut");
            // verify the required parameter 'vrf' is set
            if (vrf == null)
                throw new ApiException(400, "Missing required parameter 'vrf' when calling PutApi->DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut");

            var localVarPath = "/data/services/attachment:attachment/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (vrf != null && vrf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrf; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataAttachmentAttachmentPePePeNameVrfVrfVrfNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
