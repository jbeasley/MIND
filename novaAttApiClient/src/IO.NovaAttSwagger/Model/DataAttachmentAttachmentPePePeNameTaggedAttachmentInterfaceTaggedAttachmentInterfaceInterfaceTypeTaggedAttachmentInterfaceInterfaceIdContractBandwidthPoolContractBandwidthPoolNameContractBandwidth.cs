/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaAttSwagger.Client.SwaggerDateConverter;

namespace IO.NovaAttSwagger.Model
{
    /// <summary>
    /// DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth
    /// </summary>
    [DataContract]
    public partial class DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth :  IEquatable<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth>, IValidatableObject
    {
        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec (leaf)
        /// </summary>
        /// <value>Service Contract Bandwidth value in Mbits/Sec (leaf)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentcontractBandwidthEnum
        {
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,
            
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 6,
            
            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 7,
            
            /// <summary>
            /// Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")]
            _30 = 8,
            
            /// <summary>
            /// Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")]
            _40 = 9,
            
            /// <summary>
            /// Enum _50 for value: 50
            /// </summary>
            [EnumMember(Value = "50")]
            _50 = 10,
            
            /// <summary>
            /// Enum _100 for value: 100
            /// </summary>
            [EnumMember(Value = "100")]
            _100 = 11,
            
            /// <summary>
            /// Enum _200 for value: 200
            /// </summary>
            [EnumMember(Value = "200")]
            _200 = 12,
            
            /// <summary>
            /// Enum _300 for value: 300
            /// </summary>
            [EnumMember(Value = "300")]
            _300 = 13,
            
            /// <summary>
            /// Enum _400 for value: 400
            /// </summary>
            [EnumMember(Value = "400")]
            _400 = 14,
            
            /// <summary>
            /// Enum _500 for value: 500
            /// </summary>
            [EnumMember(Value = "500")]
            _500 = 15,
            
            /// <summary>
            /// Enum _1000 for value: 1000
            /// </summary>
            [EnumMember(Value = "1000")]
            _1000 = 16,
            
            /// <summary>
            /// Enum _2000 for value: 2000
            /// </summary>
            [EnumMember(Value = "2000")]
            _2000 = 17,
            
            /// <summary>
            /// Enum _4000 for value: 4000
            /// </summary>
            [EnumMember(Value = "4000")]
            _4000 = 18,
            
            /// <summary>
            /// Enum _6000 for value: 6000
            /// </summary>
            [EnumMember(Value = "6000")]
            _6000 = 19,
            
            /// <summary>
            /// Enum _10000 for value: 10000
            /// </summary>
            [EnumMember(Value = "10000")]
            _10000 = 20,
            
            /// <summary>
            /// Enum _20000 for value: 20000
            /// </summary>
            [EnumMember(Value = "20000")]
            _20000 = 21,
            
            /// <summary>
            /// Enum _40000 for value: 40000
            /// </summary>
            [EnumMember(Value = "40000")]
            _40000 = 22,
            
            /// <summary>
            /// Enum _80000 for value: 80000
            /// </summary>
            [EnumMember(Value = "80000")]
            _80000 = 23,
            
            /// <summary>
            /// Enum _100000 for value: 100000
            /// </summary>
            [EnumMember(Value = "100000")]
            _100000 = 24
        }

        /// <summary>
        /// Service Contract Bandwidth value in Mbits/Sec (leaf)
        /// </summary>
        /// <value>Service Contract Bandwidth value in Mbits/Sec (leaf)</value>
        [DataMember(Name="attachment:contract-bandwidth", EmitDefaultValue=false)]
        public AttachmentcontractBandwidthEnum? AttachmentcontractBandwidth { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth" /> class.
        /// </summary>
        /// <param name="attachmentcontractBandwidth">Service Contract Bandwidth value in Mbits/Sec (leaf) (default to AttachmentcontractBandwidthEnum._1).</param>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth(AttachmentcontractBandwidthEnum? attachmentcontractBandwidth = AttachmentcontractBandwidthEnum._1)
        {
            // use default value if no "attachmentcontractBandwidth" provided
            if (attachmentcontractBandwidth == null)
            {
                this.AttachmentcontractBandwidth = AttachmentcontractBandwidthEnum._1;
            }
            else
            {
                this.AttachmentcontractBandwidth = attachmentcontractBandwidth;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth {\n");
            sb.Append("  AttachmentcontractBandwidth: ").Append(AttachmentcontractBandwidth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth);
        }

        /// <summary>
        /// Returns true if DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth instances are equal
        /// </summary>
        /// <param name="input">Instance of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdContractBandwidthPoolContractBandwidthPoolNameContractBandwidth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentcontractBandwidth == input.AttachmentcontractBandwidth ||
                    (this.AttachmentcontractBandwidth != null &&
                    this.AttachmentcontractBandwidth.Equals(input.AttachmentcontractBandwidth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentcontractBandwidth != null)
                    hashCode = hashCode * 59 + this.AttachmentcontractBandwidth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
