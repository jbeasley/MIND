/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaAttSwagger.Client.SwaggerDateConverter;

namespace IO.NovaAttSwagger.Model
{
    /// <summary>
    /// DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType
    /// </summary>
    [DataContract]
    public partial class DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType :  IEquatable<DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType>, IValidatableObject
    {
        /// <summary>
        /// Attachment Interface Type (leaf)
        /// </summary>
        /// <value>Attachment Interface Type (leaf)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentinterfaceTypeEnum
        {
            
            /// <summary>
            /// Enum GigabitEthernet for value: GigabitEthernet
            /// </summary>
            [EnumMember(Value = "GigabitEthernet")]
            GigabitEthernet = 1,
            
            /// <summary>
            /// Enum TenGigabitEthernet for value: TenGigabitEthernet
            /// </summary>
            [EnumMember(Value = "TenGigabitEthernet")]
            TenGigabitEthernet = 2,
            
            /// <summary>
            /// Enum FortyGigabitEthernet for value: FortyGigabitEthernet
            /// </summary>
            [EnumMember(Value = "FortyGigabitEthernet")]
            FortyGigabitEthernet = 3,
            
            /// <summary>
            /// Enum HundredGigE for value: HundredGigE
            /// </summary>
            [EnumMember(Value = "HundredGigE")]
            HundredGigE = 4,
            
            /// <summary>
            /// Enum Ge for value: ge
            /// </summary>
            [EnumMember(Value = "ge")]
            Ge = 5,
            
            /// <summary>
            /// Enum Xe for value: xe
            /// </summary>
            [EnumMember(Value = "xe")]
            Xe = 6,
            
            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 7
        }

        /// <summary>
        /// Attachment Interface Type (leaf)
        /// </summary>
        /// <value>Attachment Interface Type (leaf)</value>
        [DataMember(Name="attachment:interface-type", EmitDefaultValue=false)]
        public AttachmentinterfaceTypeEnum? AttachmentinterfaceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType" /> class.
        /// </summary>
        /// <param name="attachmentinterfaceType">Attachment Interface Type (leaf) (default to AttachmentinterfaceTypeEnum.GigabitEthernet).</param>
        public DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType(AttachmentinterfaceTypeEnum? attachmentinterfaceType = AttachmentinterfaceTypeEnum.GigabitEthernet)
        {
            // use default value if no "attachmentinterfaceType" provided
            if (attachmentinterfaceType == null)
            {
                this.AttachmentinterfaceType = AttachmentinterfaceTypeEnum.GigabitEthernet;
            }
            else
            {
                this.AttachmentinterfaceType = attachmentinterfaceType;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType {\n");
            sb.Append("  AttachmentinterfaceType: ").Append(AttachmentinterfaceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType);
        }

        /// <summary>
        /// Returns true if DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType instances are equal
        /// </summary>
        /// <param name="input">Instance of DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataAttachmentAttachmentPePePeNameTaggedAttachmentInterfaceTaggedAttachmentInterfaceInterfaceTypeTaggedAttachmentInterfaceInterfaceIdInterfaceType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentinterfaceType == input.AttachmentinterfaceType ||
                    (this.AttachmentinterfaceType != null &&
                    this.AttachmentinterfaceType.Equals(input.AttachmentinterfaceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentinterfaceType != null)
                    hashCode = hashCode * 59 + this.AttachmentinterfaceType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
