/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaAttSwagger.Client.SwaggerDateConverter;

namespace IO.NovaAttSwagger.Model
{
    /// <summary>
    /// DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface
    /// </summary>
    [DataContract]
    public partial class DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface :  IEquatable<DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface>, IValidatableObject
    {
        /// <summary>
        /// Attachment Interface Type (leaf)
        /// </summary>
        /// <value>Attachment Interface Type (leaf)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InterfaceTypeEnum
        {
            
            /// <summary>
            /// Enum GigabitEthernet for value: GigabitEthernet
            /// </summary>
            [EnumMember(Value = "GigabitEthernet")]
            GigabitEthernet = 1,
            
            /// <summary>
            /// Enum TenGigabitEthernet for value: TenGigabitEthernet
            /// </summary>
            [EnumMember(Value = "TenGigabitEthernet")]
            TenGigabitEthernet = 2,
            
            /// <summary>
            /// Enum FortyGigabitEthernet for value: FortyGigabitEthernet
            /// </summary>
            [EnumMember(Value = "FortyGigabitEthernet")]
            FortyGigabitEthernet = 3,
            
            /// <summary>
            /// Enum HundredGigE for value: HundredGigE
            /// </summary>
            [EnumMember(Value = "HundredGigE")]
            HundredGigE = 4,
            
            /// <summary>
            /// Enum Ge for value: ge
            /// </summary>
            [EnumMember(Value = "ge")]
            Ge = 5,
            
            /// <summary>
            /// Enum Xe for value: xe
            /// </summary>
            [EnumMember(Value = "xe")]
            Xe = 6,
            
            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 7
        }

        /// <summary>
        /// Attachment Interface Type (leaf)
        /// </summary>
        /// <value>Attachment Interface Type (leaf)</value>
        [DataMember(Name="interface-type", EmitDefaultValue=false)]
        public InterfaceTypeEnum? InterfaceType { get; set; }
        /// <summary>
        /// Attachment MTU (leaf)
        /// </summary>
        /// <value>Attachment MTU (leaf)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InterfaceMtuEnum
        {
            
            /// <summary>
            /// Enum _1500 for value: 1500
            /// </summary>
            [EnumMember(Value = "1500")]
            _1500 = 1,
            
            /// <summary>
            /// Enum _9000 for value: 9000
            /// </summary>
            [EnumMember(Value = "9000")]
            _9000 = 2
        }

        /// <summary>
        /// Attachment MTU (leaf)
        /// </summary>
        /// <value>Attachment MTU (leaf)</value>
        [DataMember(Name="interface-mtu", EmitDefaultValue=false)]
        public InterfaceMtuEnum? InterfaceMtu { get; set; }
        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec (leaf)
        /// </summary>
        /// <value>Attachment Bandwidth values in Gigabits/Sec (leaf)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentBandwidthEnum
        {
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 2,
            
            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 3,
            
            /// <summary>
            /// Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")]
            _40 = 4,
            
            /// <summary>
            /// Enum _100 for value: 100
            /// </summary>
            [EnumMember(Value = "100")]
            _100 = 5
        }

        /// <summary>
        /// Attachment Bandwidth values in Gigabits/Sec (leaf)
        /// </summary>
        /// <value>Attachment Bandwidth values in Gigabits/Sec (leaf)</value>
        [DataMember(Name="attachment-bandwidth", EmitDefaultValue=false)]
        public AttachmentBandwidthEnum? AttachmentBandwidth { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface" /> class.
        /// </summary>
        /// <param name="interfaceType">Attachment Interface Type (leaf) (default to InterfaceTypeEnum.GigabitEthernet).</param>
        /// <param name="interfaceId">Attachment Interface ID (leaf).</param>
        /// <param name="interfaceMtu">Attachment MTU (leaf) (default to InterfaceMtuEnum._1500).</param>
        /// <param name="attachmentBandwidth">Attachment Bandwidth values in Gigabits/Sec (leaf) (default to AttachmentBandwidthEnum._1).</param>
        /// <param name="contractBandwidthPool">List of Contract Bandwidth Pools for this Attachment Interface (list).</param>
        /// <param name="vif">List of Virtual Interfaces (list).</param>
        public DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface(InterfaceTypeEnum? interfaceType = InterfaceTypeEnum.GigabitEthernet, string interfaceId = default(string), InterfaceMtuEnum? interfaceMtu = InterfaceMtuEnum._1500, AttachmentBandwidthEnum? attachmentBandwidth = AttachmentBandwidthEnum._1, List<DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidContractbandwidthpoolContractbandwidthpoolnameAttachmentcontractbandwidthpool> contractBandwidthPool = default(List<DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidContractbandwidthpoolContractbandwidthpoolnameAttachmentcontractbandwidthpool>), List<DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif> vif = default(List<DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif>))
        {
            // use default value if no "interfaceType" provided
            if (interfaceType == null)
            {
                this.InterfaceType = InterfaceTypeEnum.GigabitEthernet;
            }
            else
            {
                this.InterfaceType = interfaceType;
            }
            this.InterfaceId = interfaceId;
            // use default value if no "interfaceMtu" provided
            if (interfaceMtu == null)
            {
                this.InterfaceMtu = InterfaceMtuEnum._1500;
            }
            else
            {
                this.InterfaceMtu = interfaceMtu;
            }
            // use default value if no "attachmentBandwidth" provided
            if (attachmentBandwidth == null)
            {
                this.AttachmentBandwidth = AttachmentBandwidthEnum._1;
            }
            else
            {
                this.AttachmentBandwidth = attachmentBandwidth;
            }
            this.ContractBandwidthPool = contractBandwidthPool;
            this.Vif = vif;
        }
        

        /// <summary>
        /// Attachment Interface ID (leaf)
        /// </summary>
        /// <value>Attachment Interface ID (leaf)</value>
        [DataMember(Name="interface-id", EmitDefaultValue=false)]
        public string InterfaceId { get; set; }



        /// <summary>
        /// List of Contract Bandwidth Pools for this Attachment Interface (list)
        /// </summary>
        /// <value>List of Contract Bandwidth Pools for this Attachment Interface (list)</value>
        [DataMember(Name="contract-bandwidth-pool", EmitDefaultValue=false)]
        public List<DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidContractbandwidthpoolContractbandwidthpoolnameAttachmentcontractbandwidthpool> ContractBandwidthPool { get; set; }

        /// <summary>
        /// List of Virtual Interfaces (list)
        /// </summary>
        /// <value>List of Virtual Interfaces (list)</value>
        [DataMember(Name="vif", EmitDefaultValue=false)]
        public List<DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif> Vif { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface {\n");
            sb.Append("  InterfaceType: ").Append(InterfaceType).Append("\n");
            sb.Append("  InterfaceId: ").Append(InterfaceId).Append("\n");
            sb.Append("  InterfaceMtu: ").Append(InterfaceMtu).Append("\n");
            sb.Append("  AttachmentBandwidth: ").Append(AttachmentBandwidth).Append("\n");
            sb.Append("  ContractBandwidthPool: ").Append(ContractBandwidthPool).Append("\n");
            sb.Append("  Vif: ").Append(Vif).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface);
        }

        /// <summary>
        /// Returns true if DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface instances are equal
        /// </summary>
        /// <param name="input">Instance of DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidAttachmenttaggedattachmentinterface input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InterfaceType == input.InterfaceType ||
                    (this.InterfaceType != null &&
                    this.InterfaceType.Equals(input.InterfaceType))
                ) && 
                (
                    this.InterfaceId == input.InterfaceId ||
                    (this.InterfaceId != null &&
                    this.InterfaceId.Equals(input.InterfaceId))
                ) && 
                (
                    this.InterfaceMtu == input.InterfaceMtu ||
                    (this.InterfaceMtu != null &&
                    this.InterfaceMtu.Equals(input.InterfaceMtu))
                ) && 
                (
                    this.AttachmentBandwidth == input.AttachmentBandwidth ||
                    (this.AttachmentBandwidth != null &&
                    this.AttachmentBandwidth.Equals(input.AttachmentBandwidth))
                ) && 
                (
                    this.ContractBandwidthPool == input.ContractBandwidthPool ||
                    this.ContractBandwidthPool != null &&
                    this.ContractBandwidthPool.SequenceEqual(input.ContractBandwidthPool)
                ) && 
                (
                    this.Vif == input.Vif ||
                    this.Vif != null &&
                    this.Vif.SequenceEqual(input.Vif)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InterfaceType != null)
                    hashCode = hashCode * 59 + this.InterfaceType.GetHashCode();
                if (this.InterfaceId != null)
                    hashCode = hashCode * 59 + this.InterfaceId.GetHashCode();
                if (this.InterfaceMtu != null)
                    hashCode = hashCode * 59 + this.InterfaceMtu.GetHashCode();
                if (this.AttachmentBandwidth != null)
                    hashCode = hashCode * 59 + this.AttachmentBandwidth.GetHashCode();
                if (this.ContractBandwidthPool != null)
                    hashCode = hashCode * 59 + this.ContractBandwidthPool.GetHashCode();
                if (this.Vif != null)
                    hashCode = hashCode * 59 + this.Vif.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
