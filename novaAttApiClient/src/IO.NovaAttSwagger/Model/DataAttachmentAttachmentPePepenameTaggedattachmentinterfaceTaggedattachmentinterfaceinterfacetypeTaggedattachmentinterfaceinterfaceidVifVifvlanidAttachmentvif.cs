/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaAttSwagger.Client.SwaggerDateConverter;

namespace IO.NovaAttSwagger.Model
{
    /// <summary>
    /// DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif
    /// </summary>
    [DataContract]
    public partial class DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif :  IEquatable<DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif" /> class.
        /// </summary>
        /// <param name="vlanId">The vlan ID of the Vif (leaf).</param>
        /// <param name="enableIpv4">Enables the Logical Attachment Interface for IPv4 (leaf).</param>
        /// <param name="ipv4">ipv4.</param>
        /// <param name="vrfName">The name of the VRF (leaf).</param>
        /// <param name="contractBandwidthPoolName">The name of the Contract Bandwidth Pool (leaf).</param>
        public DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif(int? vlanId = default(int?), string enableIpv4 = default(string), DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidIpv4Attachmentipv4 ipv4 = default(DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidIpv4Attachmentipv4), string vrfName = default(string), string contractBandwidthPoolName = default(string))
        {
            this.VlanId = vlanId;
            this.EnableIpv4 = enableIpv4;
            this.Ipv4 = ipv4;
            this.VrfName = vrfName;
            this.ContractBandwidthPoolName = contractBandwidthPoolName;
        }
        
        /// <summary>
        /// The vlan ID of the Vif (leaf)
        /// </summary>
        /// <value>The vlan ID of the Vif (leaf)</value>
        [DataMember(Name="vlan-id", EmitDefaultValue=false)]
        public int? VlanId { get; set; }

        /// <summary>
        /// Enables the Logical Attachment Interface for IPv4 (leaf)
        /// </summary>
        /// <value>Enables the Logical Attachment Interface for IPv4 (leaf)</value>
        [DataMember(Name="enable-ipv4", EmitDefaultValue=false)]
        public string EnableIpv4 { get; set; }

        /// <summary>
        /// Gets or Sets Ipv4
        /// </summary>
        [DataMember(Name="ipv4", EmitDefaultValue=false)]
        public DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidIpv4Attachmentipv4 Ipv4 { get; set; }

        /// <summary>
        /// The name of the VRF (leaf)
        /// </summary>
        /// <value>The name of the VRF (leaf)</value>
        [DataMember(Name="vrf-name", EmitDefaultValue=false)]
        public string VrfName { get; set; }

        /// <summary>
        /// The name of the Contract Bandwidth Pool (leaf)
        /// </summary>
        /// <value>The name of the Contract Bandwidth Pool (leaf)</value>
        [DataMember(Name="contract-bandwidth-pool-name", EmitDefaultValue=false)]
        public string ContractBandwidthPoolName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif {\n");
            sb.Append("  VlanId: ").Append(VlanId).Append("\n");
            sb.Append("  EnableIpv4: ").Append(EnableIpv4).Append("\n");
            sb.Append("  Ipv4: ").Append(Ipv4).Append("\n");
            sb.Append("  VrfName: ").Append(VrfName).Append("\n");
            sb.Append("  ContractBandwidthPoolName: ").Append(ContractBandwidthPoolName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif);
        }

        /// <summary>
        /// Returns true if DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif instances are equal
        /// </summary>
        /// <param name="input">Instance of DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataAttachmentAttachmentPePepenameTaggedattachmentinterfaceTaggedattachmentinterfaceinterfacetypeTaggedattachmentinterfaceinterfaceidVifVifvlanidAttachmentvif input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VlanId == input.VlanId ||
                    (this.VlanId != null &&
                    this.VlanId.Equals(input.VlanId))
                ) && 
                (
                    this.EnableIpv4 == input.EnableIpv4 ||
                    (this.EnableIpv4 != null &&
                    this.EnableIpv4.Equals(input.EnableIpv4))
                ) && 
                (
                    this.Ipv4 == input.Ipv4 ||
                    (this.Ipv4 != null &&
                    this.Ipv4.Equals(input.Ipv4))
                ) && 
                (
                    this.VrfName == input.VrfName ||
                    (this.VrfName != null &&
                    this.VrfName.Equals(input.VrfName))
                ) && 
                (
                    this.ContractBandwidthPoolName == input.ContractBandwidthPoolName ||
                    (this.ContractBandwidthPoolName != null &&
                    this.ContractBandwidthPoolName.Equals(input.ContractBandwidthPoolName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VlanId != null)
                    hashCode = hashCode * 59 + this.VlanId.GetHashCode();
                if (this.EnableIpv4 != null)
                    hashCode = hashCode * 59 + this.EnableIpv4.GetHashCode();
                if (this.Ipv4 != null)
                    hashCode = hashCode * 59 + this.Ipv4.GetHashCode();
                if (this.VrfName != null)
                    hashCode = hashCode * 59 + this.VrfName.GetHashCode();
                if (this.ContractBandwidthPoolName != null)
                    hashCode = hashCode * 59 + this.ContractBandwidthPoolName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
