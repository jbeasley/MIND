/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaAttSwagger.Client.SwaggerDateConverter;

namespace IO.NovaAttSwagger.Model
{
    /// <summary>
    /// DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer
    /// </summary>
    [DataContract]
    public partial class DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer :  IEquatable<DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer" /> class.
        /// </summary>
        /// <param name="peerIpv4Address">The IPv4 address of the CE used to establish a BGP session with            the PE (leaf).</param>
        /// <param name="peerAutonomousSystem">The peer autonomous system number (leaf).</param>
        /// <param name="peerPassword">The BGP peer clear password (leaf).</param>
        /// <param name="maxPeerRoutes">Maximum number of routes from the BGP peer (leaf).</param>
        /// <param name="isBfdEnabled">The BGP peer is enabled for BFD (leaf).</param>
        /// <param name="isMultiHop">The BGP peer is enabled for multi-hop (leaf).</param>
        public DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer(string peerIpv4Address = default(string), int? peerAutonomousSystem = default(int?), string peerPassword = default(string), int? maxPeerRoutes = default(int?), string isBfdEnabled = default(string), string isMultiHop = default(string))
        {
            this.PeerIpv4Address = peerIpv4Address;
            this.PeerAutonomousSystem = peerAutonomousSystem;
            this.PeerPassword = peerPassword;
            this.MaxPeerRoutes = maxPeerRoutes;
            this.IsBfdEnabled = isBfdEnabled;
            this.IsMultiHop = isMultiHop;
        }
        
        /// <summary>
        /// The IPv4 address of the CE used to establish a BGP session with            the PE (leaf)
        /// </summary>
        /// <value>The IPv4 address of the CE used to establish a BGP session with            the PE (leaf)</value>
        [DataMember(Name="peer-ipv4-address", EmitDefaultValue=false)]
        public string PeerIpv4Address { get; set; }

        /// <summary>
        /// The peer autonomous system number (leaf)
        /// </summary>
        /// <value>The peer autonomous system number (leaf)</value>
        [DataMember(Name="peer-autonomous-system", EmitDefaultValue=false)]
        public int? PeerAutonomousSystem { get; set; }

        /// <summary>
        /// The BGP peer clear password (leaf)
        /// </summary>
        /// <value>The BGP peer clear password (leaf)</value>
        [DataMember(Name="peer-password", EmitDefaultValue=false)]
        public string PeerPassword { get; set; }

        /// <summary>
        /// Maximum number of routes from the BGP peer (leaf)
        /// </summary>
        /// <value>Maximum number of routes from the BGP peer (leaf)</value>
        [DataMember(Name="max-peer-routes", EmitDefaultValue=false)]
        public int? MaxPeerRoutes { get; set; }

        /// <summary>
        /// The BGP peer is enabled for BFD (leaf)
        /// </summary>
        /// <value>The BGP peer is enabled for BFD (leaf)</value>
        [DataMember(Name="is-bfd-enabled", EmitDefaultValue=false)]
        public string IsBfdEnabled { get; set; }

        /// <summary>
        /// The BGP peer is enabled for multi-hop (leaf)
        /// </summary>
        /// <value>The BGP peer is enabled for multi-hop (leaf)</value>
        [DataMember(Name="is-multi-hop", EmitDefaultValue=false)]
        public string IsMultiHop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer {\n");
            sb.Append("  PeerIpv4Address: ").Append(PeerIpv4Address).Append("\n");
            sb.Append("  PeerAutonomousSystem: ").Append(PeerAutonomousSystem).Append("\n");
            sb.Append("  PeerPassword: ").Append(PeerPassword).Append("\n");
            sb.Append("  MaxPeerRoutes: ").Append(MaxPeerRoutes).Append("\n");
            sb.Append("  IsBfdEnabled: ").Append(IsBfdEnabled).Append("\n");
            sb.Append("  IsMultiHop: ").Append(IsMultiHop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer);
        }

        /// <summary>
        /// Returns true if DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer instances are equal
        /// </summary>
        /// <param name="input">Instance of DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataAttachmentAttachmentPePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressAttachmentbgppeer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PeerIpv4Address == input.PeerIpv4Address ||
                    (this.PeerIpv4Address != null &&
                    this.PeerIpv4Address.Equals(input.PeerIpv4Address))
                ) && 
                (
                    this.PeerAutonomousSystem == input.PeerAutonomousSystem ||
                    (this.PeerAutonomousSystem != null &&
                    this.PeerAutonomousSystem.Equals(input.PeerAutonomousSystem))
                ) && 
                (
                    this.PeerPassword == input.PeerPassword ||
                    (this.PeerPassword != null &&
                    this.PeerPassword.Equals(input.PeerPassword))
                ) && 
                (
                    this.MaxPeerRoutes == input.MaxPeerRoutes ||
                    (this.MaxPeerRoutes != null &&
                    this.MaxPeerRoutes.Equals(input.MaxPeerRoutes))
                ) && 
                (
                    this.IsBfdEnabled == input.IsBfdEnabled ||
                    (this.IsBfdEnabled != null &&
                    this.IsBfdEnabled.Equals(input.IsBfdEnabled))
                ) && 
                (
                    this.IsMultiHop == input.IsMultiHop ||
                    (this.IsMultiHop != null &&
                    this.IsMultiHop.Equals(input.IsMultiHop))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PeerIpv4Address != null)
                    hashCode = hashCode * 59 + this.PeerIpv4Address.GetHashCode();
                if (this.PeerAutonomousSystem != null)
                    hashCode = hashCode * 59 + this.PeerAutonomousSystem.GetHashCode();
                if (this.PeerPassword != null)
                    hashCode = hashCode * 59 + this.PeerPassword.GetHashCode();
                if (this.MaxPeerRoutes != null)
                    hashCode = hashCode * 59 + this.MaxPeerRoutes.GetHashCode();
                if (this.IsBfdEnabled != null)
                    hashCode = hashCode * 59 + this.IsBfdEnabled.GetHashCode();
                if (this.IsMultiHop != null)
                    hashCode = hashCode * 59 + this.IsMultiHop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
