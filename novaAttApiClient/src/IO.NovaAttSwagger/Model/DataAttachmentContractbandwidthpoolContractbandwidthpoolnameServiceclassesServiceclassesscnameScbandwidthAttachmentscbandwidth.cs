/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaAttSwagger.Client.SwaggerDateConverter;

namespace IO.NovaAttSwagger.Model
{
    /// <summary>
    /// Sevice Class bandwidth and units (non-presence)
    /// </summary>
    [DataContract]
    public partial class DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth :  IEquatable<DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth>, IValidatableObject
    {
        /// <summary>
        /// Bandwidth units (leaf)
        /// </summary>
        /// <value>Bandwidth units (leaf)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BwUnitsEnum
        {
            
            /// <summary>
            /// Enum Bps for value: bps
            /// </summary>
            [EnumMember(Value = "bps")]
            Bps = 1,
            
            /// <summary>
            /// Enum Gbps for value: gbps
            /// </summary>
            [EnumMember(Value = "gbps")]
            Gbps = 2,
            
            /// <summary>
            /// Enum Kbps for value: kbps
            /// </summary>
            [EnumMember(Value = "kbps")]
            Kbps = 3,
            
            /// <summary>
            /// Enum Mbps for value: mbps
            /// </summary>
            [EnumMember(Value = "mbps")]
            Mbps = 4
        }

        /// <summary>
        /// Bandwidth units (leaf)
        /// </summary>
        /// <value>Bandwidth units (leaf)</value>
        [DataMember(Name="bw-units", EmitDefaultValue=false)]
        public BwUnitsEnum? BwUnits { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth" /> class.
        /// </summary>
        /// <param name="bandwidth">Sevice Class bandwidth (leaf).</param>
        /// <param name="bwUnits">Bandwidth units (leaf) (default to BwUnitsEnum.Bps).</param>
        /// <param name="burstSize">Burst size in bytes (leaf).</param>
        public DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth(int? bandwidth = default(int?), BwUnitsEnum? bwUnits = BwUnitsEnum.Bps, int? burstSize = default(int?))
        {
            this.Bandwidth = bandwidth;
            // use default value if no "bwUnits" provided
            if (bwUnits == null)
            {
                this.BwUnits = BwUnitsEnum.Bps;
            }
            else
            {
                this.BwUnits = bwUnits;
            }
            this.BurstSize = burstSize;
        }
        
        /// <summary>
        /// Sevice Class bandwidth (leaf)
        /// </summary>
        /// <value>Sevice Class bandwidth (leaf)</value>
        [DataMember(Name="bandwidth", EmitDefaultValue=false)]
        public int? Bandwidth { get; set; }


        /// <summary>
        /// Burst size in bytes (leaf)
        /// </summary>
        /// <value>Burst size in bytes (leaf)</value>
        [DataMember(Name="burst-size", EmitDefaultValue=false)]
        public int? BurstSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth {\n");
            sb.Append("  Bandwidth: ").Append(Bandwidth).Append("\n");
            sb.Append("  BwUnits: ").Append(BwUnits).Append("\n");
            sb.Append("  BurstSize: ").Append(BurstSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth);
        }

        /// <summary>
        /// Returns true if DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth instances are equal
        /// </summary>
        /// <param name="input">Instance of DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataAttachmentContractbandwidthpoolContractbandwidthpoolnameServiceclassesServiceclassesscnameScbandwidthAttachmentscbandwidth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bandwidth == input.Bandwidth ||
                    (this.Bandwidth != null &&
                    this.Bandwidth.Equals(input.Bandwidth))
                ) && 
                (
                    this.BwUnits == input.BwUnits ||
                    (this.BwUnits != null &&
                    this.BwUnits.Equals(input.BwUnits))
                ) && 
                (
                    this.BurstSize == input.BurstSize ||
                    (this.BurstSize != null &&
                    this.BurstSize.Equals(input.BurstSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bandwidth != null)
                    hashCode = hashCode * 59 + this.Bandwidth.GetHashCode();
                if (this.BwUnits != null)
                    hashCode = hashCode * 59 + this.BwUnits.GetHashCode();
                if (this.BurstSize != null)
                    hashCode = hashCode * 59 + this.BurstSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
