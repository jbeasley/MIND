/* 
 * attachment
 *
 * This module defines the YANG model for CE Attachment to a Provider Domain PE. The model code is derived from the Nova VPN architecture. This model intends to provide a device-agnostic service API towards northbound systems and therefore abstracts the details of how various types of PE attachment are configured on the network.
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaAttSwagger.Client.SwaggerDateConverter;

namespace IO.NovaAttSwagger.Model
{
    /// <summary>
    /// This is the RESTCONF root resource for the RESTCONF datastore and operation resources. See RESTCONF RFC 8040 for further information.
    /// </summary>
    [DataContract]
    public partial class RootIetfrestconfrestconf :  IEquatable<RootIetfrestconfrestconf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RootIetfrestconfrestconf" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="operations">operations.</param>
        /// <param name="yangLibraryVersion">yangLibraryVersion.</param>
        public RootIetfrestconfrestconf(Object data = default(Object), Object operations = default(Object), string yangLibraryVersion = default(string))
        {
            this.Data = data;
            this.Operations = operations;
            this.YangLibraryVersion = yangLibraryVersion;
        }
        
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Object Data { get; set; }

        /// <summary>
        /// Gets or Sets Operations
        /// </summary>
        [DataMember(Name="operations", EmitDefaultValue=false)]
        public Object Operations { get; set; }

        /// <summary>
        /// Gets or Sets YangLibraryVersion
        /// </summary>
        [DataMember(Name="yang-library-version", EmitDefaultValue=false)]
        public string YangLibraryVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RootIetfrestconfrestconf {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  YangLibraryVersion: ").Append(YangLibraryVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RootIetfrestconfrestconf);
        }

        /// <summary>
        /// Returns true if RootIetfrestconfrestconf instances are equal
        /// </summary>
        /// <param name="input">Instance of RootIetfrestconfrestconf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RootIetfrestconfrestconf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Operations == input.Operations ||
                    (this.Operations != null &&
                    this.Operations.Equals(input.Operations))
                ) && 
                (
                    this.YangLibraryVersion == input.YangLibraryVersion ||
                    (this.YangLibraryVersion != null &&
                    this.YangLibraryVersion.Equals(input.YangLibraryVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Operations != null)
                    hashCode = hashCode * 59 + this.Operations.GetHashCode();
                if (this.YangLibraryVersion != null)
                    hashCode = hashCode * 59 + this.YangLibraryVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
