/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Api;
using IO.NovaVpnSwagger.Model;

namespace IO.NovaVpnSwagger.Test
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataApiTests
    {
        private DataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataApi
            //Assert.IsInstanceOfType(typeof(DataApi), instance, "instance is a DataApi");
        }

        
        /// <summary>
        /// Test DataGet
        /// </summary>
        [Test]
        public void DataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DataGet();
            //Assert.IsInstanceOf<Data> (response, "response is Data");
        }
        
        /// <summary>
        /// Test DataPatch
        /// </summary>
        [Test]
        public void DataPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataPutPatch data = null;
            //instance.DataPatch(data);
            
        }
        
        /// <summary>
        /// Test DataPost
        /// </summary>
        [Test]
        public void DataPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataPost data = null;
            //instance.DataPost(data);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnDelete
        /// </summary>
        [Test]
        public void DataVpnVpnDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DataVpnVpnDelete();
            
        }
        
        /// <summary>
        /// Test DataVpnVpnGet
        /// </summary>
        [Test]
        public void DataVpnVpnGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnGet(content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpn> (response, "response is DataVpnVpn");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameAddressFamilyDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameAddressFamilyDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameAddressFamilyDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameAddressFamilyGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameAddressFamilyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameAddressFamilyGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameAddressFamily> (response, "response is DataVpnVpnInstanceInstanceNameAddressFamily");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameAddressFamilyPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameAddressFamilyPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameAddressFamily addressFamily = null;
            //instance.DataVpnVpnInstanceInstanceNameAddressFamilyPatch(instanceName, addressFamily);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataVpnVpnInstanceInstanceNameDelete(instanceName, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceName> (response, "response is DataVpnVpnInstanceInstanceName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameIsExtranetDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameIsExtranetDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameIsExtranetDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameIsExtranetGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameIsExtranetGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameIsExtranetGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameIsExtranet> (response, "response is DataVpnVpnInstanceInstanceNameIsExtranet");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameIsExtranetPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameIsExtranetPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameIsExtranet isExtranet = null;
            //instance.DataVpnVpnInstanceInstanceNameIsExtranetPatch(instanceName, isExtranet);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameNameDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameNameGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameName> (response, "response is DataVpnVpnInstanceInstanceNameName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameName name = null;
            //instance.DataVpnVpnInstanceInstanceNameNamePatch(instanceName, name);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceName instance = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataVpnVpnInstanceInstanceNamePatch(instanceName, instance, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameProtocolTypeDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameProtocolTypeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameProtocolTypeDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameProtocolTypeGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameProtocolTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameProtocolTypeGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameProtocolType> (response, "response is DataVpnVpnInstanceInstanceNameProtocolType");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameProtocolTypePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameProtocolTypePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameProtocolType protocolType = null;
            //instance.DataVpnVpnInstanceInstanceNameProtocolTypePatch(instanceName, protocolType);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNamePut
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceName instance = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataVpnVpnInstanceInstanceNamePut(instanceName, instance, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch(instanceName, administratorSubfield);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch(instanceName, assignedNumberSubfield);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetADelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetADeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetADelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetAGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetA> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetA");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAPatch(instanceName, routeTargetA);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAPost
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAPost(instanceName, routeTargetA);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch(instanceName, administratorSubfield);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch(instanceName, assignedNumberSubfield);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetBGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetB> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetB");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBPatch(instanceName, routeTargetB);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBPost
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBPost(instanceName, routeTargetB);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameTopologyTypeDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameTopologyTypeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameTopologyTypeDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameTopologyTypeGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameTopologyTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameTopologyTypeGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameTopologyType> (response, "response is DataVpnVpnInstanceInstanceNameTopologyType");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameTopologyTypePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameTopologyTypePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameTopologyType topologyType = null;
            //instance.DataVpnVpnInstanceInstanceNameTopologyTypePatch(instanceName, topologyType);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete(instanceName, vpnAttachmentSetName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete(instanceName, vpnAttachmentSetName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch(instanceName, vpnAttachmentSetName, name);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch(instanceName, vpnAttachmentSetName, vpnAttachmentSet);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete(instanceName, vpnAttachmentSetName, pePeName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch(instanceName, vpnAttachmentSetName, pePeName, pe);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete(instanceName, vpnAttachmentSetName, pePeName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch(instanceName, vpnAttachmentSetName, pePeName, peName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicy> (response, "response is DataVpnIpv4InboundRoutingPolicy");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, localIpRoutingPreference);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, localIpRoutingPreference);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicy> (response, "response is DataVpnIpv4OutboundRoutingPolicy");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, advertisedIpRoutingPreference);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, advertisedIpRoutingPreference);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnPeerIpv4Address> (response, "response is DataVpnPeerIpv4Address");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnPeerIpv4Address peerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrf);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrfName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnPatch
        /// </summary>
        [Test]
        public void DataVpnVpnPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataVpnVpn vpn = null;
            //instance.DataVpnVpnPatch(vpn);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnPost
        /// </summary>
        [Test]
        public void DataVpnVpnPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataVpnVpnPost vpn = null;
            //instance.DataVpnVpnPost(vpn);
            
        }
        
    }

}
