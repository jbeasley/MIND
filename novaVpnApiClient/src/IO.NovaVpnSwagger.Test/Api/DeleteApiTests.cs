/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Api;

namespace IO.NovaVpnSwagger.Test
{
    /// <summary>
    ///  Class for testing DeleteApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeleteApiTests
    {
        private DeleteApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeleteApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeleteApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeleteApi
            //Assert.IsInstanceOfType(typeof(DeleteApi), instance, "instance is a DeleteApi");
        }

        
        /// <summary>
        /// Test DataVpnVpnDelete
        /// </summary>
        [Test]
        public void DataVpnVpnDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DataVpnVpnDelete();
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameAddressFamilyDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameAddressFamilyDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameAddressFamilyDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataVpnVpnInstanceInstanceNameDelete(instanceName, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameIsExtranetDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameIsExtranetDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameIsExtranetDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameNameDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameProtocolTypeDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameProtocolTypeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameProtocolTypeDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetADelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetADeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetADelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameTopologyTypeDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameTopologyTypeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //instance.DataVpnVpnInstanceInstanceNameTopologyTypeDelete(instanceName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete(instanceName, vpnAttachmentSetName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete(instanceName, vpnAttachmentSetName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete(instanceName, vpnAttachmentSetName, pePeName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete(instanceName, vpnAttachmentSetName, pePeName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);
            
        }
        
    }

}
