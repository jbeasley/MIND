/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Api;
using IO.NovaVpnSwagger.Model;

namespace IO.NovaVpnSwagger.Test
{
    /// <summary>
    ///  Class for testing GetApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GetApiTests
    {
        private GetApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GetApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GetApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GetApi
            //Assert.IsInstanceOfType(typeof(GetApi), instance, "instance is a GetApi");
        }

        
        /// <summary>
        /// Test DataGet
        /// </summary>
        [Test]
        public void DataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DataGet();
            //Assert.IsInstanceOf<Data> (response, "response is Data");
        }
        
        /// <summary>
        /// Test DataVpnVpnGet
        /// </summary>
        [Test]
        public void DataVpnVpnGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnGet(content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpn> (response, "response is DataVpnVpn");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameAddressFamilyGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameAddressFamilyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameAddressFamilyGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameAddressFamily> (response, "response is DataVpnVpnInstanceInstanceNameAddressFamily");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceName> (response, "response is DataVpnVpnInstanceInstanceName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameIsExtranetGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameIsExtranetGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameIsExtranetGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameIsExtranet> (response, "response is DataVpnVpnInstanceInstanceNameIsExtranet");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameNameGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameName> (response, "response is DataVpnVpnInstanceInstanceNameName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameProtocolTypeGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameProtocolTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameProtocolTypeGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameProtocolType> (response, "response is DataVpnVpnInstanceInstanceNameProtocolType");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetAGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetA> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetA");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameRouteTargetBGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameRouteTargetB> (response, "response is DataVpnVpnInstanceInstanceNameRouteTargetB");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameTopologyTypeGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameTopologyTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameTopologyTypeGet(instanceName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameTopologyType> (response, "response is DataVpnVpnInstanceInstanceNameTopologyType");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicy> (response, "response is DataVpnIpv4InboundRoutingPolicy");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> (response, "response is DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicy> (response, "response is DataVpnIpv4OutboundRoutingPolicy");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> (response, "response is DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnPeerIpv4Address> (response, "response is DataVpnPeerIpv4Address");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName");
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string content = null;
            //int? depth = null;
            //string fields = null;
            //string filter = null;
            //string withDefaults = null;
            //var response = instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
            //Assert.IsInstanceOf<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> (response, "response is DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName");
        }
        
        /// <summary>
        /// Test OperationsGet
        /// </summary>
        [Test]
        public void OperationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.OperationsGet();
            //Assert.IsInstanceOf<Operations> (response, "response is Operations");
        }
        
        /// <summary>
        /// Test RootGet
        /// </summary>
        [Test]
        public void RootGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RootGet();
            //Assert.IsInstanceOf<Root> (response, "response is Root");
        }
        
        /// <summary>
        /// Test YangLibraryVersionGet
        /// </summary>
        [Test]
        public void YangLibraryVersionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.YangLibraryVersionGet();
            //Assert.IsInstanceOf<YangLibraryVersion> (response, "response is YangLibraryVersion");
        }
        
    }

}
