/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Api;
using IO.NovaVpnSwagger.Model;

namespace IO.NovaVpnSwagger.Test
{
    /// <summary>
    ///  Class for testing PatchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PatchApiTests
    {
        private PatchApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PatchApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PatchApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PatchApi
            //Assert.IsInstanceOfType(typeof(PatchApi), instance, "instance is a PatchApi");
        }

        
        /// <summary>
        /// Test DataPatch
        /// </summary>
        [Test]
        public void DataPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataPutPatch data = null;
            //instance.DataPatch(data);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameAddressFamilyPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameAddressFamilyPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameAddressFamily addressFamily = null;
            //instance.DataVpnVpnInstanceInstanceNameAddressFamilyPatch(instanceName, addressFamily);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameIsExtranetPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameIsExtranetPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameIsExtranet isExtranet = null;
            //instance.DataVpnVpnInstanceInstanceNameIsExtranetPatch(instanceName, isExtranet);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameName name = null;
            //instance.DataVpnVpnInstanceInstanceNameNamePatch(instanceName, name);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceName instance = null;
            //bool? noOutOfSyncCheck = null;
            //instance.DataVpnVpnInstanceInstanceNamePatch(instanceName, instance, noOutOfSyncCheck);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameProtocolTypePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameProtocolTypePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameProtocolType protocolType = null;
            //instance.DataVpnVpnInstanceInstanceNameProtocolTypePatch(instanceName, protocolType);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch(instanceName, administratorSubfield);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch(instanceName, assignedNumberSubfield);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAPatch(instanceName, routeTargetA);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch(instanceName, administratorSubfield);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch(instanceName, assignedNumberSubfield);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBPatch(instanceName, routeTargetB);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameTopologyTypePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameTopologyTypePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameTopologyType topologyType = null;
            //instance.DataVpnVpnInstanceInstanceNameTopologyTypePatch(instanceName, topologyType);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch(instanceName, vpnAttachmentSetName, name);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch(instanceName, vpnAttachmentSetName, vpnAttachmentSet);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch(instanceName, vpnAttachmentSetName, pePeName, pe);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch(instanceName, vpnAttachmentSetName, pePeName, peName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, localIpRoutingPreference);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, localIpRoutingPreference);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, advertisedIpRoutingPreference);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //int? tenantCommunityAutonomousSystemNumber = null;
            //int? tenantCommunityNumber = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, advertisedIpRoutingPreference);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //string tenantIpv4PrefixPrefix = null;
            //DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnPeerIpv4Address peerIpv4Address = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrf);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrfName);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnPatch
        /// </summary>
        [Test]
        public void DataVpnVpnPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataVpnVpn vpn = null;
            //instance.DataVpnVpnPatch(vpn);
            
        }
        
    }

}
