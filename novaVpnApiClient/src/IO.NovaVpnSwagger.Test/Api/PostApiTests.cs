/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Api;
using IO.NovaVpnSwagger.Model;

namespace IO.NovaVpnSwagger.Test
{
    /// <summary>
    ///  Class for testing PostApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PostApiTests
    {
        private PostApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PostApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PostApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PostApi
            //Assert.IsInstanceOfType(typeof(PostApi), instance, "instance is a PostApi");
        }

        
        /// <summary>
        /// Test DataPost
        /// </summary>
        [Test]
        public void DataPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataPost data = null;
            //instance.DataPost(data);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetAPost
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetAPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetAPost(instanceName, routeTargetA);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameRouteTargetBPost
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameRouteTargetBPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB = null;
            //instance.DataVpnVpnInstanceInstanceNameRouteTargetBPost(instanceName, routeTargetB);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost
        /// </summary>
        [Test]
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceName = null;
            //string vpnAttachmentSetName = null;
            //string pePeName = null;
            //string vrfVrfName = null;
            //string bgpPeerPeerIpv4Address = null;
            //DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy = null;
            //instance.DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);
            
        }
        
        /// <summary>
        /// Test DataVpnVpnPost
        /// </summary>
        [Test]
        public void DataVpnVpnPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataVpnVpnPost vpn = null;
            //instance.DataVpnVpnPost(vpn);
            
        }
        
    }

}
