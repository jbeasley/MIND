/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Model;

namespace IO.NovaVpnSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Data</returns>
        Data DataGet ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Data</returns>
        ApiResponse<Data> DataGetWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns></returns>
        void DataPatch (DataPutPatch data);

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataPatchWithHttpInfo (DataPutPatch data);
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns></returns>
        void DataPost (DataPost data);

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataPostWithHttpInfo (DataPost data);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DataVpnVpnDelete ();

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnDeleteWithHttpInfo ();
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpn</returns>
        DataVpnVpn DataVpnVpnGet (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpn</returns>
        ApiResponse<DataVpnVpn> DataVpnVpnGetWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameAddressFamilyDelete (string instanceName);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameAddressFamilyDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        DataVpnVpnInstanceInstanceNameAddressFamily DataVpnVpnInstanceInstanceNameAddressFamilyGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily> DataVpnVpnInstanceInstanceNameAddressFamilyGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameAddressFamilyPatch (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameAddressFamilyPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameDelete (string instanceName, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameDeleteWithHttpInfo (string instanceName, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceName</returns>
        DataVpnVpnInstanceInstanceName DataVpnVpnInstanceInstanceNameGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceName> DataVpnVpnInstanceInstanceNameGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameIsExtranetDelete (string instanceName);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameIsExtranetDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        DataVpnVpnInstanceInstanceNameIsExtranet DataVpnVpnInstanceInstanceNameIsExtranetGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet> DataVpnVpnInstanceInstanceNameIsExtranetGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameIsExtranetPatch (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameIsExtranetPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameNameDelete (string instanceName);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameNameDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameName</returns>
        DataVpnVpnInstanceInstanceNameName DataVpnVpnInstanceInstanceNameNameGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameName> DataVpnVpnInstanceInstanceNameNameGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameNamePatch (string instanceName, DataVpnVpnInstanceInstanceNameName name);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameNamePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameName name);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNamePatch (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNamePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameProtocolTypeDelete (string instanceName);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameProtocolTypeDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameProtocolType</returns>
        DataVpnVpnInstanceInstanceNameProtocolType DataVpnVpnInstanceInstanceNameProtocolTypeGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameProtocolType</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType> DataVpnVpnInstanceInstanceNameProtocolTypeGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameProtocolTypePatch (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameProtocolTypePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNamePut (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNamePutWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetADelete (string instanceName);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetADeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetA DataVpnVpnInstanceInstanceNameRouteTargetAGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA> DataVpnVpnInstanceInstanceNameRouteTargetAGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAPost (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAPostWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBDelete (string instanceName);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetB DataVpnVpnInstanceInstanceNameRouteTargetBGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB> DataVpnVpnInstanceInstanceNameRouteTargetBGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBPost (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBPostWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameTopologyTypeDelete (string instanceName);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameTopologyTypeDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameTopologyType</returns>
        DataVpnVpnInstanceInstanceNameTopologyType DataVpnVpnInstanceInstanceNameTopologyTypeGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameTopologyType</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType> DataVpnVpnInstanceInstanceNameTopologyTypeGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameTopologyTypePatch (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameTopologyTypePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete (string instanceName, string vpnAttachmentSetName);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete (string instanceName, string vpnAttachmentSetName);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicy</returns>
        DataVpnIpv4InboundRoutingPolicy DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicy</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicy</returns>
        DataVpnIpv4OutboundRoutingPolicy DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicy</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnPeerIpv4Address</returns>
        DataVpnPeerIpv4Address DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnPeerIpv4Address</returns>
        ApiResponse<DataVpnPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns></returns>
        void DataVpnVpnPatch (DataVpnVpn vpn);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnPatchWithHttpInfo (DataVpnVpn vpn);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns></returns>
        void DataVpnVpnPost (DataVpnVpnPost vpn);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnPostWithHttpInfo (DataVpnVpnPost vpn);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Data</returns>
        System.Threading.Tasks.Task<Data> DataGetAsync ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Data)</returns>
        System.Threading.Tasks.Task<ApiResponse<Data>> DataGetAsyncWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataPatchAsync (DataPutPatch data);

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataPatchAsyncWithHttpInfo (DataPutPatch data);
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataPostAsync (DataPost data);

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataPostAsyncWithHttpInfo (DataPost data);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnDeleteAsync ();

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpn</returns>
        System.Threading.Tasks.Task<DataVpnVpn> DataVpnVpnGetAsync (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpn>> DataVpnVpnGetAsyncWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsync (string instanceName);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameAddressFamily> DataVpnVpnInstanceInstanceNameAddressFamilyGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameAddressFamily)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily>> DataVpnVpnInstanceInstanceNameAddressFamilyGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameDeleteAsync (string instanceName, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameDeleteAsyncWithHttpInfo (string instanceName, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceName> DataVpnVpnInstanceInstanceNameGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceName>> DataVpnVpnInstanceInstanceNameGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsync (string instanceName);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameIsExtranet> DataVpnVpnInstanceInstanceNameIsExtranetGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameIsExtranet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet>> DataVpnVpnInstanceInstanceNameIsExtranetGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameIsExtranetPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameIsExtranetPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameNameDeleteAsync (string instanceName);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameNameDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameName> DataVpnVpnInstanceInstanceNameNameGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameName>> DataVpnVpnInstanceInstanceNameNameGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameNamePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameName name);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameNamePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameName name);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNamePatchAsync (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNamePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsync (string instanceName);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameProtocolType</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameProtocolType> DataVpnVpnInstanceInstanceNameProtocolTypeGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameProtocolType)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType>> DataVpnVpnInstanceInstanceNameProtocolTypeGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameProtocolTypePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameProtocolTypePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNamePutAsync (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNamePutAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsync (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsync (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsync (string instanceName);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetA> DataVpnVpnInstanceInstanceNameRouteTargetAGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetA)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA>> DataVpnVpnInstanceInstanceNameRouteTargetAGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAPostAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAPostAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsync (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsync (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsync (string instanceName);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetB> DataVpnVpnInstanceInstanceNameRouteTargetBGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetB)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB>> DataVpnVpnInstanceInstanceNameRouteTargetBGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBPostAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBPostAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsync (string instanceName);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameTopologyType</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameTopologyType> DataVpnVpnInstanceInstanceNameTopologyTypeGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameTopologyType)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType>> DataVpnVpnInstanceInstanceNameTopologyTypeGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameTopologyTypePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameTopologyTypePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsync (string instanceName, string vpnAttachmentSetName);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsync (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsync (string instanceName, string vpnAttachmentSetName);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsync (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsync (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsync (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicy</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicy>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicy</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicy>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnPeerIpv4Address</returns>
        System.Threading.Tasks.Task<DataVpnPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnPeerIpv4Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnPeerIpv4Address>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnPatchAsync (DataVpnVpn vpn);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnPatchAsyncWithHttpInfo (DataVpnVpn vpn);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnPostAsync (DataVpnVpnPost vpn);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnPostAsyncWithHttpInfo (DataVpnVpnPost vpn);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private IO.NovaVpnSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(String basePath)
        {
            this.Configuration = new IO.NovaVpnSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(IO.NovaVpnSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaVpnSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaVpnSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaVpnSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Data</returns>
        public Data DataGet ()
        {
             ApiResponse<Data> localVarResponse = DataGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Data</returns>
        public ApiResponse< Data > DataGetWithHttpInfo ()
        {

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Data</returns>
        public async System.Threading.Tasks.Task<Data> DataGetAsync ()
        {
             ApiResponse<Data> localVarResponse = await DataGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Data)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Data>> DataGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns></returns>
        public void DataPatch (DataPutPatch data)
        {
             DataPatchWithHttpInfo(data);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataPatchWithHttpInfo (DataPutPatch data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DataApi->DataPatch");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataPatchAsync (DataPutPatch data)
        {
             await DataPatchAsyncWithHttpInfo(data);

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataPatchAsyncWithHttpInfo (DataPutPatch data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DataApi->DataPatch");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns></returns>
        public void DataPost (DataPost data)
        {
             DataPostWithHttpInfo(data);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataPostWithHttpInfo (DataPost data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DataApi->DataPost");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataPostAsync (DataPost data)
        {
             await DataPostAsyncWithHttpInfo(data);

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataPostAsyncWithHttpInfo (DataPost data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DataApi->DataPost");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DataVpnVpnDelete ()
        {
             DataVpnVpnDeleteWithHttpInfo();
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnDeleteWithHttpInfo ()
        {

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnDeleteAsync ()
        {
             await DataVpnVpnDeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnDeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpn</returns>
        public DataVpnVpn DataVpnVpnGet (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpn> localVarResponse = DataVpnVpnGetWithHttpInfo(content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpn</returns>
        public ApiResponse< DataVpnVpn > DataVpnVpnGetWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpn)));
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpn</returns>
        public async System.Threading.Tasks.Task<DataVpnVpn> DataVpnVpnGetAsync (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpn> localVarResponse = await DataVpnVpnGetAsyncWithHttpInfo(content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpn>> DataVpnVpnGetAsyncWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpn)));
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameAddressFamilyDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameAddressFamilyDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameAddressFamilyDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameAddressFamilyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameAddressFamilyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        public DataVpnVpnInstanceInstanceNameAddressFamily DataVpnVpnInstanceInstanceNameAddressFamilyGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily> localVarResponse = DataVpnVpnInstanceInstanceNameAddressFamilyGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameAddressFamily > DataVpnVpnInstanceInstanceNameAddressFamilyGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameAddressFamilyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameAddressFamily) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameAddressFamily)));
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameAddressFamily> DataVpnVpnInstanceInstanceNameAddressFamilyGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily> localVarResponse = await DataVpnVpnInstanceInstanceNameAddressFamilyGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameAddressFamily)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily>> DataVpnVpnInstanceInstanceNameAddressFamilyGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameAddressFamilyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameAddressFamily) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameAddressFamily)));
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameAddressFamilyPatch (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily)
        {
             DataVpnVpnInstanceInstanceNameAddressFamilyPatchWithHttpInfo(instanceName, addressFamily);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameAddressFamilyPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameAddressFamilyPatch");
            // verify the required parameter 'addressFamily' is set
            if (addressFamily == null)
                throw new ApiException(400, "Missing required parameter 'addressFamily' when calling DataApi->DataVpnVpnInstanceInstanceNameAddressFamilyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (addressFamily != null && addressFamily.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressFamily); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressFamily; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily)
        {
             await DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsyncWithHttpInfo(instanceName, addressFamily);

        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameAddressFamilyPatch");
            // verify the required parameter 'addressFamily' is set
            if (addressFamily == null)
                throw new ApiException(400, "Missing required parameter 'addressFamily' when calling DataApi->DataVpnVpnInstanceInstanceNameAddressFamilyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (addressFamily != null && addressFamily.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressFamily); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressFamily; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameDelete (string instanceName, bool? noOutOfSyncCheck = null)
        {
             DataVpnVpnInstanceInstanceNameDeleteWithHttpInfo(instanceName, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameDeleteWithHttpInfo (string instanceName, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameDeleteAsync (string instanceName, bool? noOutOfSyncCheck = null)
        {
             await DataVpnVpnInstanceInstanceNameDeleteAsyncWithHttpInfo(instanceName, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameDeleteAsyncWithHttpInfo (string instanceName, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceName</returns>
        public DataVpnVpnInstanceInstanceName DataVpnVpnInstanceInstanceNameGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceName> localVarResponse = DataVpnVpnInstanceInstanceNameGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceName > DataVpnVpnInstanceInstanceNameGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceName)));
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceName> DataVpnVpnInstanceInstanceNameGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceName> localVarResponse = await DataVpnVpnInstanceInstanceNameGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceName>> DataVpnVpnInstanceInstanceNameGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceName)));
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameIsExtranetDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameIsExtranetDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameIsExtranetDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameIsExtranetDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameIsExtranetDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        public DataVpnVpnInstanceInstanceNameIsExtranet DataVpnVpnInstanceInstanceNameIsExtranetGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet> localVarResponse = DataVpnVpnInstanceInstanceNameIsExtranetGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameIsExtranet > DataVpnVpnInstanceInstanceNameIsExtranetGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameIsExtranetGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameIsExtranet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameIsExtranet)));
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameIsExtranet> DataVpnVpnInstanceInstanceNameIsExtranetGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet> localVarResponse = await DataVpnVpnInstanceInstanceNameIsExtranetGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameIsExtranet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet>> DataVpnVpnInstanceInstanceNameIsExtranetGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameIsExtranetGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameIsExtranet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameIsExtranet)));
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameIsExtranetPatch (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet)
        {
             DataVpnVpnInstanceInstanceNameIsExtranetPatchWithHttpInfo(instanceName, isExtranet);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameIsExtranetPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameIsExtranetPatch");
            // verify the required parameter 'isExtranet' is set
            if (isExtranet == null)
                throw new ApiException(400, "Missing required parameter 'isExtranet' when calling DataApi->DataVpnVpnInstanceInstanceNameIsExtranetPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (isExtranet != null && isExtranet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isExtranet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isExtranet; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameIsExtranetPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet)
        {
             await DataVpnVpnInstanceInstanceNameIsExtranetPatchAsyncWithHttpInfo(instanceName, isExtranet);

        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameIsExtranetPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameIsExtranetPatch");
            // verify the required parameter 'isExtranet' is set
            if (isExtranet == null)
                throw new ApiException(400, "Missing required parameter 'isExtranet' when calling DataApi->DataVpnVpnInstanceInstanceNameIsExtranetPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (isExtranet != null && isExtranet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isExtranet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isExtranet; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameNameDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameNameDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameNameDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameNameDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameNameDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameNameDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameName</returns>
        public DataVpnVpnInstanceInstanceNameName DataVpnVpnInstanceInstanceNameNameGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameName> localVarResponse = DataVpnVpnInstanceInstanceNameNameGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameName > DataVpnVpnInstanceInstanceNameNameGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameName)));
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameName> DataVpnVpnInstanceInstanceNameNameGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameName> localVarResponse = await DataVpnVpnInstanceInstanceNameNameGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameName>> DataVpnVpnInstanceInstanceNameNameGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameName)));
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameNamePatch (string instanceName, DataVpnVpnInstanceInstanceNameName name)
        {
             DataVpnVpnInstanceInstanceNameNamePatchWithHttpInfo(instanceName, name);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameNamePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameName name)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DataApi->DataVpnVpnInstanceInstanceNameNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameNamePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameName name)
        {
             await DataVpnVpnInstanceInstanceNameNamePatchAsyncWithHttpInfo(instanceName, name);

        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameNamePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameName name)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DataApi->DataVpnVpnInstanceInstanceNameNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNamePatch (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
             DataVpnVpnInstanceInstanceNamePatchWithHttpInfo(instanceName, instance, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNamePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNamePatch");
            // verify the required parameter 'instance' is set
            if (instance == null)
                throw new ApiException(400, "Missing required parameter 'instance' when calling DataApi->DataVpnVpnInstanceInstanceNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (instance != null && instance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instance; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNamePatchAsync (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
             await DataVpnVpnInstanceInstanceNamePatchAsyncWithHttpInfo(instanceName, instance, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNamePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNamePatch");
            // verify the required parameter 'instance' is set
            if (instance == null)
                throw new ApiException(400, "Missing required parameter 'instance' when calling DataApi->DataVpnVpnInstanceInstanceNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (instance != null && instance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instance; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameProtocolTypeDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameProtocolTypeDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameProtocolTypeDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameProtocolTypeDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameProtocolTypeDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameProtocolType</returns>
        public DataVpnVpnInstanceInstanceNameProtocolType DataVpnVpnInstanceInstanceNameProtocolTypeGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType> localVarResponse = DataVpnVpnInstanceInstanceNameProtocolTypeGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameProtocolType</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameProtocolType > DataVpnVpnInstanceInstanceNameProtocolTypeGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameProtocolTypeGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameProtocolType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameProtocolType)));
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameProtocolType</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameProtocolType> DataVpnVpnInstanceInstanceNameProtocolTypeGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType> localVarResponse = await DataVpnVpnInstanceInstanceNameProtocolTypeGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameProtocolType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType>> DataVpnVpnInstanceInstanceNameProtocolTypeGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameProtocolTypeGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameProtocolType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameProtocolType)));
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameProtocolTypePatch (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType)
        {
             DataVpnVpnInstanceInstanceNameProtocolTypePatchWithHttpInfo(instanceName, protocolType);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameProtocolTypePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameProtocolTypePatch");
            // verify the required parameter 'protocolType' is set
            if (protocolType == null)
                throw new ApiException(400, "Missing required parameter 'protocolType' when calling DataApi->DataVpnVpnInstanceInstanceNameProtocolTypePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (protocolType != null && protocolType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(protocolType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protocolType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameProtocolTypePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType)
        {
             await DataVpnVpnInstanceInstanceNameProtocolTypePatchAsyncWithHttpInfo(instanceName, protocolType);

        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameProtocolTypePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameProtocolTypePatch");
            // verify the required parameter 'protocolType' is set
            if (protocolType == null)
                throw new ApiException(400, "Missing required parameter 'protocolType' when calling DataApi->DataVpnVpnInstanceInstanceNameProtocolTypePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (protocolType != null && protocolType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(protocolType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protocolType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNamePut (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
             DataVpnVpnInstanceInstanceNamePutWithHttpInfo(instanceName, instance, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNamePutWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNamePut");
            // verify the required parameter 'instance' is set
            if (instance == null)
                throw new ApiException(400, "Missing required parameter 'instance' when calling DataApi->DataVpnVpnInstanceInstanceNamePut");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (instance != null && instance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instance; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNamePutAsync (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
             await DataVpnVpnInstanceInstanceNamePutAsyncWithHttpInfo(instanceName, instance, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNamePutAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNamePut");
            // verify the required parameter 'instance' is set
            if (instance == null)
                throw new ApiException(400, "Missing required parameter 'instance' when calling DataApi->DataVpnVpnInstanceInstanceNamePut");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (instance != null && instance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instance; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield > DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchWithHttpInfo(instanceName, administratorSubfield);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch");
            // verify the required parameter 'administratorSubfield' is set
            if (administratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'administratorSubfield' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (administratorSubfield != null && administratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(administratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = administratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsyncWithHttpInfo(instanceName, administratorSubfield);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch");
            // verify the required parameter 'administratorSubfield' is set
            if (administratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'administratorSubfield' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (administratorSubfield != null && administratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(administratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = administratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield > DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchWithHttpInfo(instanceName, assignedNumberSubfield);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch");
            // verify the required parameter 'assignedNumberSubfield' is set
            if (assignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'assignedNumberSubfield' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (assignedNumberSubfield != null && assignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsyncWithHttpInfo(instanceName, assignedNumberSubfield);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch");
            // verify the required parameter 'assignedNumberSubfield' is set
            if (assignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'assignedNumberSubfield' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (assignedNumberSubfield != null && assignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetADelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetADeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetADeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetADelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetADelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetADelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetADelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetA DataVpnVpnInstanceInstanceNameRouteTargetAGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetAGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetA > DataVpnVpnInstanceInstanceNameRouteTargetAGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetA) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetA)));
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetA> DataVpnVpnInstanceInstanceNameRouteTargetAGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetAGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetA)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA>> DataVpnVpnInstanceInstanceNameRouteTargetAGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetA) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetA)));
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAPatchWithHttpInfo(instanceName, routeTargetA);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAPatch");
            // verify the required parameter 'routeTargetA' is set
            if (routeTargetA == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetA' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetA != null && routeTargetA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetA; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsyncWithHttpInfo(instanceName, routeTargetA);

        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAPatch");
            // verify the required parameter 'routeTargetA' is set
            if (routeTargetA == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetA' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetA != null && routeTargetA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetA; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAPost (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAPostWithHttpInfo(instanceName, routeTargetA);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAPostWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAPost");
            // verify the required parameter 'routeTargetA' is set
            if (routeTargetA == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetA' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetA != null && routeTargetA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetA; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAPostAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAPostAsyncWithHttpInfo(instanceName, routeTargetA);

        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAPostAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAPost");
            // verify the required parameter 'routeTargetA' is set
            if (routeTargetA == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetA' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetAPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetA != null && routeTargetA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetA; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield > DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchWithHttpInfo(instanceName, administratorSubfield);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch");
            // verify the required parameter 'administratorSubfield' is set
            if (administratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'administratorSubfield' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (administratorSubfield != null && administratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(administratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = administratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsyncWithHttpInfo(instanceName, administratorSubfield);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch");
            // verify the required parameter 'administratorSubfield' is set
            if (administratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'administratorSubfield' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (administratorSubfield != null && administratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(administratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = administratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield > DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchWithHttpInfo(instanceName, assignedNumberSubfield);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch");
            // verify the required parameter 'assignedNumberSubfield' is set
            if (assignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'assignedNumberSubfield' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (assignedNumberSubfield != null && assignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsyncWithHttpInfo(instanceName, assignedNumberSubfield);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch");
            // verify the required parameter 'assignedNumberSubfield' is set
            if (assignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'assignedNumberSubfield' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (assignedNumberSubfield != null && assignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetB DataVpnVpnInstanceInstanceNameRouteTargetBGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetBGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetB > DataVpnVpnInstanceInstanceNameRouteTargetBGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetB) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetB)));
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetB> DataVpnVpnInstanceInstanceNameRouteTargetBGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetBGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetB)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB>> DataVpnVpnInstanceInstanceNameRouteTargetBGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetB) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetB)));
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBPatchWithHttpInfo(instanceName, routeTargetB);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBPatch");
            // verify the required parameter 'routeTargetB' is set
            if (routeTargetB == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetB' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetB != null && routeTargetB.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetB); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetB; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsyncWithHttpInfo(instanceName, routeTargetB);

        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBPatch");
            // verify the required parameter 'routeTargetB' is set
            if (routeTargetB == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetB' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetB != null && routeTargetB.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetB); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetB; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBPost (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBPostWithHttpInfo(instanceName, routeTargetB);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBPostWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBPost");
            // verify the required parameter 'routeTargetB' is set
            if (routeTargetB == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetB' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetB != null && routeTargetB.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetB); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetB; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBPostAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBPostAsyncWithHttpInfo(instanceName, routeTargetB);

        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBPostAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBPost");
            // verify the required parameter 'routeTargetB' is set
            if (routeTargetB == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetB' when calling DataApi->DataVpnVpnInstanceInstanceNameRouteTargetBPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetB != null && routeTargetB.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetB); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetB; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameTopologyTypeDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameTopologyTypeDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameTopologyTypeDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameTopologyTypeDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameTopologyTypeDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameTopologyType</returns>
        public DataVpnVpnInstanceInstanceNameTopologyType DataVpnVpnInstanceInstanceNameTopologyTypeGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType> localVarResponse = DataVpnVpnInstanceInstanceNameTopologyTypeGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameTopologyType</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameTopologyType > DataVpnVpnInstanceInstanceNameTopologyTypeGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameTopologyTypeGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameTopologyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameTopologyType)));
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameTopologyType</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameTopologyType> DataVpnVpnInstanceInstanceNameTopologyTypeGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType> localVarResponse = await DataVpnVpnInstanceInstanceNameTopologyTypeGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameTopologyType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType>> DataVpnVpnInstanceInstanceNameTopologyTypeGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameTopologyTypeGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameTopologyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameTopologyType)));
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameTopologyTypePatch (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType)
        {
             DataVpnVpnInstanceInstanceNameTopologyTypePatchWithHttpInfo(instanceName, topologyType);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameTopologyTypePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameTopologyTypePatch");
            // verify the required parameter 'topologyType' is set
            if (topologyType == null)
                throw new ApiException(400, "Missing required parameter 'topologyType' when calling DataApi->DataVpnVpnInstanceInstanceNameTopologyTypePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (topologyType != null && topologyType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(topologyType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = topologyType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameTopologyTypePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType)
        {
             await DataVpnVpnInstanceInstanceNameTopologyTypePatchAsyncWithHttpInfo(instanceName, topologyType);

        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameTopologyTypePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameTopologyTypePatch");
            // verify the required parameter 'topologyType' is set
            if (topologyType == null)
                throw new ApiException(400, "Missing required parameter 'topologyType' when calling DataApi->DataVpnVpnInstanceInstanceNameTopologyTypePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (topologyType != null && topologyType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(topologyType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = topologyType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete (string instanceName, string vpnAttachmentSetName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsync (string instanceName, string vpnAttachmentSetName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName);

        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName)));
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsync (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName)));
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete (string instanceName, string vpnAttachmentSetName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsync (string instanceName, string vpnAttachmentSetName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName);

        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName)));
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsync (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName)));
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, name);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsync (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, name);

        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, vpnAttachmentSet);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");
            // verify the required parameter 'vpnAttachmentSet' is set
            if (vpnAttachmentSet == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSet' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (vpnAttachmentSet != null && vpnAttachmentSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpnAttachmentSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpnAttachmentSet; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsync (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, vpnAttachmentSet);

        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");
            // verify the required parameter 'vpnAttachmentSet' is set
            if (vpnAttachmentSet == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSet' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (vpnAttachmentSet != null && vpnAttachmentSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpnAttachmentSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpnAttachmentSet; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName);

        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName)));
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName)));
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, pe);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'pe' is set
            if (pe == null)
                throw new ApiException(400, "Missing required parameter 'pe' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (pe != null && pe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pe; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, pe);

        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'pe' is set
            if (pe == null)
                throw new ApiException(400, "Missing required parameter 'pe' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (pe != null && pe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pe; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName);

        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName)));
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName)));
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, peName);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'peName' is set
            if (peName == null)
                throw new ApiException(400, "Missing required parameter 'peName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (peName != null && peName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, peName);

        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'peName' is set
            if (peName == null)
                throw new ApiException(400, "Missing required parameter 'peName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (peName != null && peName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);

        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)));
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicy</returns>
        public DataVpnIpv4InboundRoutingPolicy DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicy> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicy</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicy > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicy)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicy</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicy> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicy>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicy)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'ipv4InboundRoutingPolicy' is set
            if (ipv4InboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4InboundRoutingPolicy' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4InboundRoutingPolicy != null && ipv4InboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4InboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4InboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'ipv4InboundRoutingPolicy' is set
            if (ipv4InboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4InboundRoutingPolicy' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4InboundRoutingPolicy != null && ipv4InboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4InboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4InboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'ipv4InboundRoutingPolicy' is set
            if (ipv4InboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4InboundRoutingPolicy' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4InboundRoutingPolicy != null && ipv4InboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4InboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4InboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'ipv4InboundRoutingPolicy' is set
            if (ipv4InboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4InboundRoutingPolicy' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4InboundRoutingPolicy != null && ipv4InboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4InboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4InboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference)));
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference)));
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, localIpRoutingPreference);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'localIpRoutingPreference' is set
            if (localIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'localIpRoutingPreference' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (localIpRoutingPreference != null && localIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, localIpRoutingPreference);

        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'localIpRoutingPreference' is set
            if (localIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'localIpRoutingPreference' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (localIpRoutingPreference != null && localIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);

        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)));
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'lessThanOrEqualToLength' is set
            if (lessThanOrEqualToLength == null)
                throw new ApiException(400, "Missing required parameter 'lessThanOrEqualToLength' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (lessThanOrEqualToLength != null && lessThanOrEqualToLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lessThanOrEqualToLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lessThanOrEqualToLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'lessThanOrEqualToLength' is set
            if (lessThanOrEqualToLength == null)
                throw new ApiException(400, "Missing required parameter 'lessThanOrEqualToLength' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (lessThanOrEqualToLength != null && lessThanOrEqualToLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lessThanOrEqualToLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lessThanOrEqualToLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference)));
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference)));
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, localIpRoutingPreference);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'localIpRoutingPreference' is set
            if (localIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'localIpRoutingPreference' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (localIpRoutingPreference != null && localIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, localIpRoutingPreference);

        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'localIpRoutingPreference' is set
            if (localIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'localIpRoutingPreference' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (localIpRoutingPreference != null && localIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4Prefix' is set
            if (tenantIpv4Prefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4Prefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantIpv4Prefix != null && tenantIpv4Prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantIpv4Prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantIpv4Prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4Prefix' is set
            if (tenantIpv4Prefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4Prefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantIpv4Prefix != null && tenantIpv4Prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantIpv4Prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantIpv4Prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)));
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)));
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (prefix != null && prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (prefix != null && prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);

        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicy</returns>
        public DataVpnIpv4OutboundRoutingPolicy DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicy> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicy</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicy > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicy)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicy</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicy> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicy>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicy)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'ipv4OutboundRoutingPolicy' is set
            if (ipv4OutboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4OutboundRoutingPolicy' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4OutboundRoutingPolicy != null && ipv4OutboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4OutboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4OutboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'ipv4OutboundRoutingPolicy' is set
            if (ipv4OutboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4OutboundRoutingPolicy' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4OutboundRoutingPolicy != null && ipv4OutboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4OutboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4OutboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'ipv4OutboundRoutingPolicy' is set
            if (ipv4OutboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4OutboundRoutingPolicy' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4OutboundRoutingPolicy != null && ipv4OutboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4OutboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4OutboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'ipv4OutboundRoutingPolicy' is set
            if (ipv4OutboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4OutboundRoutingPolicy' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4OutboundRoutingPolicy != null && ipv4OutboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4OutboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4OutboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference)));
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference)));
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, advertisedIpRoutingPreference);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'advertisedIpRoutingPreference' is set
            if (advertisedIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'advertisedIpRoutingPreference' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (advertisedIpRoutingPreference != null && advertisedIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(advertisedIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = advertisedIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, advertisedIpRoutingPreference);

        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'advertisedIpRoutingPreference' is set
            if (advertisedIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'advertisedIpRoutingPreference' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (advertisedIpRoutingPreference != null && advertisedIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(advertisedIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = advertisedIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);

        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference)));
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference)));
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, advertisedIpRoutingPreference);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'advertisedIpRoutingPreference' is set
            if (advertisedIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'advertisedIpRoutingPreference' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (advertisedIpRoutingPreference != null && advertisedIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(advertisedIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = advertisedIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, advertisedIpRoutingPreference);

        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'advertisedIpRoutingPreference' is set
            if (advertisedIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'advertisedIpRoutingPreference' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (advertisedIpRoutingPreference != null && advertisedIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(advertisedIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = advertisedIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)));
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'lessThanOrEqualToLength' is set
            if (lessThanOrEqualToLength == null)
                throw new ApiException(400, "Missing required parameter 'lessThanOrEqualToLength' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (lessThanOrEqualToLength != null && lessThanOrEqualToLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lessThanOrEqualToLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lessThanOrEqualToLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'lessThanOrEqualToLength' is set
            if (lessThanOrEqualToLength == null)
                throw new ApiException(400, "Missing required parameter 'lessThanOrEqualToLength' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (lessThanOrEqualToLength != null && lessThanOrEqualToLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lessThanOrEqualToLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lessThanOrEqualToLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4Prefix' is set
            if (tenantIpv4Prefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4Prefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantIpv4Prefix != null && tenantIpv4Prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantIpv4Prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantIpv4Prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4Prefix' is set
            if (tenantIpv4Prefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4Prefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantIpv4Prefix != null && tenantIpv4Prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantIpv4Prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantIpv4Prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)));
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)));
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (prefix != null && prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (prefix != null && prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeer' is set
            if (bgpPeer == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeer' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (bgpPeer != null && bgpPeer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bgpPeer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bgpPeer; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);

        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeer' is set
            if (bgpPeer == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeer' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (bgpPeer != null && bgpPeer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bgpPeer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bgpPeer; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnPeerIpv4Address</returns>
        public DataVpnPeerIpv4Address DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnPeerIpv4Address> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnPeerIpv4Address</returns>
        public ApiResponse< DataVpnPeerIpv4Address > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnPeerIpv4Address)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnPeerIpv4Address</returns>
        public async System.Threading.Tasks.Task<DataVpnPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnPeerIpv4Address> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnPeerIpv4Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnPeerIpv4Address>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnPeerIpv4Address)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'peerIpv4Address' is set
            if (peerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'peerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerIpv4Address != null && peerIpv4Address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerIpv4Address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerIpv4Address; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'peerIpv4Address' is set
            if (peerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'peerIpv4Address' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerIpv4Address != null && peerIpv4Address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerIpv4Address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerIpv4Address; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);

        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName)));
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName)));
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrf);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrf' is set
            if (vrf == null)
                throw new ApiException(400, "Missing required parameter 'vrf' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrf != null && vrf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrf; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrf);

        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrf' is set
            if (vrf == null)
                throw new ApiException(400, "Missing required parameter 'vrf' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrf != null && vrf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrf; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);

        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName)));
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName)));
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrfName);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfName' is set
            if (vrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrfName != null && vrfName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrfName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrfName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrfName);

        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfName' is set
            if (vrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfName' when calling DataApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrfName != null && vrfName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrfName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrfName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns></returns>
        public void DataVpnVpnPatch (DataVpnVpn vpn)
        {
             DataVpnVpnPatchWithHttpInfo(vpn);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnPatchWithHttpInfo (DataVpnVpn vpn)
        {
            // verify the required parameter 'vpn' is set
            if (vpn == null)
                throw new ApiException(400, "Missing required parameter 'vpn' when calling DataApi->DataVpnVpnPatch");

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vpn != null && vpn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpn; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnPatchAsync (DataVpnVpn vpn)
        {
             await DataVpnVpnPatchAsyncWithHttpInfo(vpn);

        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnPatchAsyncWithHttpInfo (DataVpnVpn vpn)
        {
            // verify the required parameter 'vpn' is set
            if (vpn == null)
                throw new ApiException(400, "Missing required parameter 'vpn' when calling DataApi->DataVpnVpnPatch");

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vpn != null && vpn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpn; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns></returns>
        public void DataVpnVpnPost (DataVpnVpnPost vpn)
        {
             DataVpnVpnPostWithHttpInfo(vpn);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnPostWithHttpInfo (DataVpnVpnPost vpn)
        {
            // verify the required parameter 'vpn' is set
            if (vpn == null)
                throw new ApiException(400, "Missing required parameter 'vpn' when calling DataApi->DataVpnVpnPost");

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vpn != null && vpn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpn; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnPostAsync (DataVpnVpnPost vpn)
        {
             await DataVpnVpnPostAsyncWithHttpInfo(vpn);

        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnPostAsyncWithHttpInfo (DataVpnVpnPost vpn)
        {
            // verify the required parameter 'vpn' is set
            if (vpn == null)
                throw new ApiException(400, "Missing required parameter 'vpn' when calling DataApi->DataVpnVpnPost");

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vpn != null && vpn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpn; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
