/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaVpnSwagger.Client;

namespace IO.NovaVpnSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeleteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DataVpnVpnDelete ();

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnDeleteWithHttpInfo ();
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameAddressFamilyDelete (string instanceName);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameAddressFamilyDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameDelete (string instanceName, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameDeleteWithHttpInfo (string instanceName, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameIsExtranetDelete (string instanceName);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameIsExtranetDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameNameDelete (string instanceName);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameNameDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameProtocolTypeDelete (string instanceName);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameProtocolTypeDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetADelete (string instanceName);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetADeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBDelete (string instanceName);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameTopologyTypeDelete (string instanceName);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameTopologyTypeDeleteWithHttpInfo (string instanceName);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete (string instanceName, string vpnAttachmentSetName);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete (string instanceName, string vpnAttachmentSetName);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnDeleteAsync ();

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsync (string instanceName);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameDeleteAsync (string instanceName, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameDeleteAsyncWithHttpInfo (string instanceName, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsync (string instanceName);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameNameDeleteAsync (string instanceName);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameNameDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsync (string instanceName);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsync (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsync (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsync (string instanceName);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsync (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsync (string instanceName);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsync (string instanceName);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsync (string instanceName);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsyncWithHttpInfo (string instanceName);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsync (string instanceName, string vpnAttachmentSetName);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsync (string instanceName, string vpnAttachmentSetName);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeleteApi : IDeleteApi
    {
        private IO.NovaVpnSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeleteApi(String basePath)
        {
            this.Configuration = new IO.NovaVpnSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeleteApi(IO.NovaVpnSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaVpnSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaVpnSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaVpnSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DataVpnVpnDelete ()
        {
             DataVpnVpnDeleteWithHttpInfo();
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnDeleteWithHttpInfo ()
        {

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnDeleteAsync ()
        {
             await DataVpnVpnDeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnDeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameAddressFamilyDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameAddressFamilyDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameAddressFamilyDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameAddressFamilyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameAddressFamilyDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameAddressFamilyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameDelete (string instanceName, bool? noOutOfSyncCheck = null)
        {
             DataVpnVpnInstanceInstanceNameDeleteWithHttpInfo(instanceName, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameDeleteWithHttpInfo (string instanceName, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameDeleteAsync (string instanceName, bool? noOutOfSyncCheck = null)
        {
             await DataVpnVpnInstanceInstanceNameDeleteAsyncWithHttpInfo(instanceName, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameDeleteAsyncWithHttpInfo (string instanceName, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameIsExtranetDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameIsExtranetDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameIsExtranetDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameIsExtranetDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameIsExtranetDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameIsExtranetDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameNameDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameNameDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameNameDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameNameDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameNameDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameNameDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameProtocolTypeDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameProtocolTypeDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameProtocolTypeDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameProtocolTypeDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameProtocolTypeDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameProtocolTypeDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetADelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetADeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetADeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetADelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetADelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetADeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetADelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetADelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetBDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameRouteTargetBDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameTopologyTypeDelete (string instanceName)
        {
             DataVpnVpnInstanceInstanceNameTopologyTypeDeleteWithHttpInfo(instanceName);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameTopologyTypeDeleteWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameTopologyTypeDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsync (string instanceName)
        {
             await DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsyncWithHttpInfo(instanceName);

        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameTopologyTypeDeleteAsyncWithHttpInfo (string instanceName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameTopologyTypeDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete (string instanceName, string vpnAttachmentSetName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsync (string instanceName, string vpnAttachmentSetName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName);

        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete (string instanceName, string vpnAttachmentSetName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsync (string instanceName, string vpnAttachmentSetName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName);

        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName);

        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName);

        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);

        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix);

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);

        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName);

        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDeleteAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling DeleteApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
