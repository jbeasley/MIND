/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Model;

namespace IO.NovaVpnSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Data</returns>
        Data DataGet ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Data</returns>
        ApiResponse<Data> DataGetWithHttpInfo ();
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpn</returns>
        DataVpnVpn DataVpnVpnGet (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpn</returns>
        ApiResponse<DataVpnVpn> DataVpnVpnGetWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        DataVpnVpnInstanceInstanceNameAddressFamily DataVpnVpnInstanceInstanceNameAddressFamilyGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily> DataVpnVpnInstanceInstanceNameAddressFamilyGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceName</returns>
        DataVpnVpnInstanceInstanceName DataVpnVpnInstanceInstanceNameGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceName> DataVpnVpnInstanceInstanceNameGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        DataVpnVpnInstanceInstanceNameIsExtranet DataVpnVpnInstanceInstanceNameIsExtranetGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet> DataVpnVpnInstanceInstanceNameIsExtranetGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameName</returns>
        DataVpnVpnInstanceInstanceNameName DataVpnVpnInstanceInstanceNameNameGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameName> DataVpnVpnInstanceInstanceNameNameGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameProtocolType</returns>
        DataVpnVpnInstanceInstanceNameProtocolType DataVpnVpnInstanceInstanceNameProtocolTypeGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameProtocolType</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType> DataVpnVpnInstanceInstanceNameProtocolTypeGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetA DataVpnVpnInstanceInstanceNameRouteTargetAGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA> DataVpnVpnInstanceInstanceNameRouteTargetAGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        DataVpnVpnInstanceInstanceNameRouteTargetB DataVpnVpnInstanceInstanceNameRouteTargetBGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB> DataVpnVpnInstanceInstanceNameRouteTargetBGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameTopologyType</returns>
        DataVpnVpnInstanceInstanceNameTopologyType DataVpnVpnInstanceInstanceNameTopologyTypeGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameTopologyType</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType> DataVpnVpnInstanceInstanceNameTopologyTypeGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicy</returns>
        DataVpnIpv4InboundRoutingPolicy DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicy</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicy</returns>
        DataVpnIpv4OutboundRoutingPolicy DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicy</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnPeerIpv4Address</returns>
        DataVpnPeerIpv4Address DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnPeerIpv4Address</returns>
        ApiResponse<DataVpnPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Operations</returns>
        Operations OperationsGet ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Operations</returns>
        ApiResponse<Operations> OperationsGetWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Root</returns>
        Root RootGet ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Root</returns>
        ApiResponse<Root> RootGetWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>YangLibraryVersion</returns>
        YangLibraryVersion YangLibraryVersionGet ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of YangLibraryVersion</returns>
        ApiResponse<YangLibraryVersion> YangLibraryVersionGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Data</returns>
        System.Threading.Tasks.Task<Data> DataGetAsync ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Data)</returns>
        System.Threading.Tasks.Task<ApiResponse<Data>> DataGetAsyncWithHttpInfo ();
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpn</returns>
        System.Threading.Tasks.Task<DataVpnVpn> DataVpnVpnGetAsync (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpn>> DataVpnVpnGetAsyncWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameAddressFamily> DataVpnVpnInstanceInstanceNameAddressFamilyGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameAddressFamily)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily>> DataVpnVpnInstanceInstanceNameAddressFamilyGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceName> DataVpnVpnInstanceInstanceNameGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceName>> DataVpnVpnInstanceInstanceNameGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameIsExtranet> DataVpnVpnInstanceInstanceNameIsExtranetGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameIsExtranet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet>> DataVpnVpnInstanceInstanceNameIsExtranetGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameName> DataVpnVpnInstanceInstanceNameNameGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameName>> DataVpnVpnInstanceInstanceNameNameGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameProtocolType</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameProtocolType> DataVpnVpnInstanceInstanceNameProtocolTypeGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameProtocolType)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType>> DataVpnVpnInstanceInstanceNameProtocolTypeGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetA> DataVpnVpnInstanceInstanceNameRouteTargetAGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetA)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA>> DataVpnVpnInstanceInstanceNameRouteTargetAGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetB> DataVpnVpnInstanceInstanceNameRouteTargetBGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetB)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB>> DataVpnVpnInstanceInstanceNameRouteTargetBGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameTopologyType</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameTopologyType> DataVpnVpnInstanceInstanceNameTopologyTypeGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameTopologyType)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType>> DataVpnVpnInstanceInstanceNameTopologyTypeGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsync (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsync (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicy</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicy>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicy</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicy>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnPeerIpv4Address</returns>
        System.Threading.Tasks.Task<DataVpnPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnPeerIpv4Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnPeerIpv4Address>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null);
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Operations</returns>
        System.Threading.Tasks.Task<Operations> OperationsGetAsync ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Operations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operations>> OperationsGetAsyncWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Root</returns>
        System.Threading.Tasks.Task<Root> RootGetAsync ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Root)</returns>
        System.Threading.Tasks.Task<ApiResponse<Root>> RootGetAsyncWithHttpInfo ();
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of YangLibraryVersion</returns>
        System.Threading.Tasks.Task<YangLibraryVersion> YangLibraryVersionGetAsync ();

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (YangLibraryVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<YangLibraryVersion>> YangLibraryVersionGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetApi : IGetApi
    {
        private IO.NovaVpnSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetApi(String basePath)
        {
            this.Configuration = new IO.NovaVpnSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GetApi(IO.NovaVpnSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaVpnSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaVpnSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaVpnSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Data</returns>
        public Data DataGet ()
        {
             ApiResponse<Data> localVarResponse = DataGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Data</returns>
        public ApiResponse< Data > DataGetWithHttpInfo ()
        {

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Data</returns>
        public async System.Threading.Tasks.Task<Data> DataGetAsync ()
        {
             ApiResponse<Data> localVarResponse = await DataGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Data)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Data>> DataGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Data) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Data)));
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpn</returns>
        public DataVpnVpn DataVpnVpnGet (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpn> localVarResponse = DataVpnVpnGetWithHttpInfo(content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpn</returns>
        public ApiResponse< DataVpnVpn > DataVpnVpnGetWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpn)));
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpn</returns>
        public async System.Threading.Tasks.Task<DataVpnVpn> DataVpnVpnGetAsync (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpn> localVarResponse = await DataVpnVpnGetAsyncWithHttpInfo(content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpn>> DataVpnVpnGetAsyncWithHttpInfo (string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpn)));
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        public DataVpnVpnInstanceInstanceNameAddressFamily DataVpnVpnInstanceInstanceNameAddressFamilyGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily> localVarResponse = DataVpnVpnInstanceInstanceNameAddressFamilyGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameAddressFamily > DataVpnVpnInstanceInstanceNameAddressFamilyGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameAddressFamilyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameAddressFamily) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameAddressFamily)));
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameAddressFamily</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameAddressFamily> DataVpnVpnInstanceInstanceNameAddressFamilyGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily> localVarResponse = await DataVpnVpnInstanceInstanceNameAddressFamilyGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameAddressFamily)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily>> DataVpnVpnInstanceInstanceNameAddressFamilyGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameAddressFamilyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameAddressFamily>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameAddressFamily) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameAddressFamily)));
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceName</returns>
        public DataVpnVpnInstanceInstanceName DataVpnVpnInstanceInstanceNameGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceName> localVarResponse = DataVpnVpnInstanceInstanceNameGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceName > DataVpnVpnInstanceInstanceNameGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceName)));
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceName> DataVpnVpnInstanceInstanceNameGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceName> localVarResponse = await DataVpnVpnInstanceInstanceNameGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceName>> DataVpnVpnInstanceInstanceNameGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceName)));
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        public DataVpnVpnInstanceInstanceNameIsExtranet DataVpnVpnInstanceInstanceNameIsExtranetGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet> localVarResponse = DataVpnVpnInstanceInstanceNameIsExtranetGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameIsExtranet > DataVpnVpnInstanceInstanceNameIsExtranetGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameIsExtranetGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameIsExtranet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameIsExtranet)));
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameIsExtranet</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameIsExtranet> DataVpnVpnInstanceInstanceNameIsExtranetGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet> localVarResponse = await DataVpnVpnInstanceInstanceNameIsExtranetGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameIsExtranet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet>> DataVpnVpnInstanceInstanceNameIsExtranetGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameIsExtranetGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameIsExtranet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameIsExtranet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameIsExtranet)));
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameName</returns>
        public DataVpnVpnInstanceInstanceNameName DataVpnVpnInstanceInstanceNameNameGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameName> localVarResponse = DataVpnVpnInstanceInstanceNameNameGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameName > DataVpnVpnInstanceInstanceNameNameGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameName)));
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameName> DataVpnVpnInstanceInstanceNameNameGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameName> localVarResponse = await DataVpnVpnInstanceInstanceNameNameGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameName>> DataVpnVpnInstanceInstanceNameNameGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameName)));
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameProtocolType</returns>
        public DataVpnVpnInstanceInstanceNameProtocolType DataVpnVpnInstanceInstanceNameProtocolTypeGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType> localVarResponse = DataVpnVpnInstanceInstanceNameProtocolTypeGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameProtocolType</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameProtocolType > DataVpnVpnInstanceInstanceNameProtocolTypeGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameProtocolTypeGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameProtocolType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameProtocolType)));
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameProtocolType</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameProtocolType> DataVpnVpnInstanceInstanceNameProtocolTypeGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType> localVarResponse = await DataVpnVpnInstanceInstanceNameProtocolTypeGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameProtocolType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType>> DataVpnVpnInstanceInstanceNameProtocolTypeGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameProtocolTypeGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameProtocolType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameProtocolType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameProtocolType)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield > DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield > DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield)));
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetA DataVpnVpnInstanceInstanceNameRouteTargetAGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetAGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetA > DataVpnVpnInstanceInstanceNameRouteTargetAGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetAGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetA) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetA)));
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetA</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetA> DataVpnVpnInstanceInstanceNameRouteTargetAGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetAGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetA)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA>> DataVpnVpnInstanceInstanceNameRouteTargetAGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetAGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetA>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetA) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetA)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield > DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield > DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield)));
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield)));
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        public DataVpnVpnInstanceInstanceNameRouteTargetB DataVpnVpnInstanceInstanceNameRouteTargetBGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB> localVarResponse = DataVpnVpnInstanceInstanceNameRouteTargetBGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameRouteTargetB > DataVpnVpnInstanceInstanceNameRouteTargetBGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetBGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetB) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetB)));
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameRouteTargetB</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameRouteTargetB> DataVpnVpnInstanceInstanceNameRouteTargetBGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB> localVarResponse = await DataVpnVpnInstanceInstanceNameRouteTargetBGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameRouteTargetB)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB>> DataVpnVpnInstanceInstanceNameRouteTargetBGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameRouteTargetBGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameRouteTargetB>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameRouteTargetB) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameRouteTargetB)));
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameTopologyType</returns>
        public DataVpnVpnInstanceInstanceNameTopologyType DataVpnVpnInstanceInstanceNameTopologyTypeGet (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType> localVarResponse = DataVpnVpnInstanceInstanceNameTopologyTypeGetWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameTopologyType</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameTopologyType > DataVpnVpnInstanceInstanceNameTopologyTypeGetWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameTopologyTypeGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameTopologyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameTopologyType)));
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameTopologyType</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameTopologyType> DataVpnVpnInstanceInstanceNameTopologyTypeGetAsync (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType> localVarResponse = await DataVpnVpnInstanceInstanceNameTopologyTypeGetAsyncWithHttpInfo(instanceName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameTopologyType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType>> DataVpnVpnInstanceInstanceNameTopologyTypeGetAsyncWithHttpInfo (string instanceName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameTopologyTypeGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameTopologyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameTopologyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameTopologyType)));
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName)));
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsync (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName)));
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName)));
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsync (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName)));
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName)));
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName)));
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName)));
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName)));
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)));
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicy</returns>
        public DataVpnIpv4InboundRoutingPolicy DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicy> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicy</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicy > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicy)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicy</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicy> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicy>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicy)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference)));
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)));
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)));
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference)));
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference)));
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)));
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public ApiResponse< DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicy</returns>
        public DataVpnIpv4OutboundRoutingPolicy DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicy> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicy</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicy > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicy)));
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicy</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicy> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicy> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicy>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicy)));
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference)));
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber)));
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber)));
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference)));
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference)));
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)));
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)));
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength)));
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public ApiResponse< DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)));
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix</returns>
        public async System.Threading.Tasks.Task<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnPeerIpv4Address</returns>
        public DataVpnPeerIpv4Address DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnPeerIpv4Address> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnPeerIpv4Address</returns>
        public ApiResponse< DataVpnPeerIpv4Address > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnPeerIpv4Address)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnPeerIpv4Address</returns>
        public async System.Threading.Tasks.Task<DataVpnPeerIpv4Address> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnPeerIpv4Address> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnPeerIpv4Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnPeerIpv4Address>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnPeerIpv4Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnPeerIpv4Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnPeerIpv4Address)));
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName)));
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName)));
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        public DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> localVarResponse = DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>ApiResponse of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        public ApiResponse< DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName > DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName)));
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName</returns>
        public async System.Threading.Tasks.Task<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
             ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName> localVarResponse = await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, content, depth, fields, filter, withDefaults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="content">controlling descendant nodes in response (optional, default to config)</param>
        /// <param name="depth">limit the depth of nodes in response (optional)</param>
        /// <param name="fields">optionally identify specific data nodes in response (optional)</param>
        /// <param name="filter">xpath expression to filter data nodes in response (optional)</param>
        /// <param name="withDefaults">controlling default values in response (optional, default to report-all)</param>
        /// <returns>Task of ApiResponse (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGetAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string content = null, int? depth = null, string fields = null, string filter = null, string withDefaults = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling GetApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (depth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "depth", depth)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (withDefaults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with-defaults", withDefaults)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Operations</returns>
        public Operations OperationsGet ()
        {
             ApiResponse<Operations> localVarResponse = OperationsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Operations</returns>
        public ApiResponse< Operations > OperationsGetWithHttpInfo ()
        {

            var localVarPath = "/operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OperationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operations)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Operations</returns>
        public async System.Threading.Tasks.Task<Operations> OperationsGetAsync ()
        {
             ApiResponse<Operations> localVarResponse = await OperationsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Operations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Operations>> OperationsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/operations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OperationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operations)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Root</returns>
        public Root RootGet ()
        {
             ApiResponse<Root> localVarResponse = RootGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Root</returns>
        public ApiResponse< Root > RootGetWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Root>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Root) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Root)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Root</returns>
        public async System.Threading.Tasks.Task<Root> RootGetAsync ()
        {
             ApiResponse<Root> localVarResponse = await RootGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Root)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Root>> RootGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Root>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Root) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Root)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>YangLibraryVersion</returns>
        public YangLibraryVersion YangLibraryVersionGet ()
        {
             ApiResponse<YangLibraryVersion> localVarResponse = YangLibraryVersionGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of YangLibraryVersion</returns>
        public ApiResponse< YangLibraryVersion > YangLibraryVersionGetWithHttpInfo ()
        {

            var localVarPath = "/yang-library-version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YangLibraryVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YangLibraryVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (YangLibraryVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YangLibraryVersion)));
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of YangLibraryVersion</returns>
        public async System.Threading.Tasks.Task<YangLibraryVersion> YangLibraryVersionGetAsync ()
        {
             ApiResponse<YangLibraryVersion> localVarResponse = await YangLibraryVersionGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (YangLibraryVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<YangLibraryVersion>> YangLibraryVersionGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/yang-library-version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YangLibraryVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YangLibraryVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (YangLibraryVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YangLibraryVersion)));
        }

    }
}
