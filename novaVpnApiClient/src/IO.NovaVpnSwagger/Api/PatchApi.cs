/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Model;

namespace IO.NovaVpnSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPatchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns></returns>
        void DataPatch (DataPutPatch data);

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataPatchWithHttpInfo (DataPutPatch data);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameAddressFamilyPatch (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameAddressFamilyPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameIsExtranetPatch (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameIsExtranetPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameNamePatch (string instanceName, DataVpnVpnInstanceInstanceNameName name);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameNamePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameName name);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNamePatch (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNamePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameProtocolTypePatch (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameProtocolTypePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameTopologyTypePatch (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameTopologyTypePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns></returns>
        void DataVpnVpnPatch (DataVpnVpn vpn);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnPatchWithHttpInfo (DataVpnVpn vpn);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataPatchAsync (DataPutPatch data);

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataPatchAsyncWithHttpInfo (DataPutPatch data);
        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily);

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <remarks>
        /// The address-family of the IP VPN (e.g. IPv4)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily);
        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameIsExtranetPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet);

        /// <summary>
        /// Determines whether the VPN supports Extranet
        /// </summary>
        /// <remarks>
        /// Determines whether the VPN supports Extranet
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameIsExtranetPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet);
        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameNamePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameName name);

        /// <summary>
        /// VPN service name
        /// </summary>
        /// <remarks>
        /// VPN service name
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameNamePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameName name);
        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNamePatchAsync (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);

        /// <summary>
        /// List of VPN instances
        /// </summary>
        /// <remarks>
        /// List of VPN instances
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNamePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null);
        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameProtocolTypePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType);

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <remarks>
        /// The Protocol Type of the VPN (e.g. IP)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameProtocolTypePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield);
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield);

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <remarks>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB);
        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameTopologyTypePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType);

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <remarks>
        /// The Topology Type of the IP VPN (e.g. any-to-any)
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameTopologyTypePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType);
        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsync (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name);

        /// <summary>
        /// Name of the Attachment Set.
        /// </summary>
        /// <remarks>
        /// Name of the Attachment Set.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name);
        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsync (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet);

        /// <summary>
        /// VRF membership of the VPN
        /// </summary>
        /// <remarks>
        /// VRF membership of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet);
        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe);

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of PE devices which have one or more VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe);
        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName);

        /// <summary>
        /// Name of the PE device
        /// </summary>
        /// <remarks>
        /// Name of the PE device
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference);

        /// <summary>
        /// The local IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The local IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);
        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference);

        /// <summary>
        /// The IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <remarks>
        /// List of BGP communities which are associated with the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy);
        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference);

        /// <summary>
        /// The advertised IP routing preference for the community.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the community.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference);
        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);

        /// <summary>
        /// Autonomous System Number component of the community
        /// </summary>
        /// <remarks>
        /// Autonomous System Number component of the community
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number);
        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <remarks>
        /// List of BGP communities for sets of Tenant Routes.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity);
        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference);

        /// <summary>
        /// The advertised IP routing preference for the prefix.
        /// </summary>
        /// <remarks>
        /// The advertised IP routing preference for the prefix.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference);
        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);

        /// <summary>
        /// Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <remarks>
        /// Include prefix lengths up to and including the specified length.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength);
        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <remarks>
        /// List of IPv4 prefixes for routes towards Tenant Networks.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix);
        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <remarks>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix);
        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <remarks>
        /// List of BGP peers which require network-based outbound routing                policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address);
        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf);

        /// <summary>
        /// List of VRFs which are members of the VPN
        /// </summary>
        /// <remarks>
        /// List of VRFs which are members of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf);
        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName);

        /// <summary>
        /// VRF which is a member of the VPN
        /// </summary>
        /// <remarks>
        /// VRF which is a member of the VPN
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnPatchAsync (DataVpnVpn vpn);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnPatchAsyncWithHttpInfo (DataVpnVpn vpn);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PatchApi : IPatchApi
    {
        private IO.NovaVpnSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PatchApi(String basePath)
        {
            this.Configuration = new IO.NovaVpnSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PatchApi(IO.NovaVpnSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaVpnSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaVpnSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaVpnSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns></returns>
        public void DataPatch (DataPutPatch data)
        {
             DataPatchWithHttpInfo(data);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataPatchWithHttpInfo (DataPutPatch data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PatchApi->DataPatch");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataPatchAsync (DataPutPatch data)
        {
             await DataPatchAsyncWithHttpInfo(data);

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataPatchAsyncWithHttpInfo (DataPutPatch data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PatchApi->DataPatch");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameAddressFamilyPatch (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily)
        {
             DataVpnVpnInstanceInstanceNameAddressFamilyPatchWithHttpInfo(instanceName, addressFamily);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameAddressFamilyPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameAddressFamilyPatch");
            // verify the required parameter 'addressFamily' is set
            if (addressFamily == null)
                throw new ApiException(400, "Missing required parameter 'addressFamily' when calling PatchApi->DataVpnVpnInstanceInstanceNameAddressFamilyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (addressFamily != null && addressFamily.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressFamily); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressFamily; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily)
        {
             await DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsyncWithHttpInfo(instanceName, addressFamily);

        }

        /// <summary>
        /// The address-family of the IP VPN (e.g. IPv4) The address-family of the IP VPN (e.g. IPv4)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="addressFamily">The address-family of the IP VPN (e.g. IPv4)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameAddressFamilyPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameAddressFamily addressFamily)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameAddressFamilyPatch");
            // verify the required parameter 'addressFamily' is set
            if (addressFamily == null)
                throw new ApiException(400, "Missing required parameter 'addressFamily' when calling PatchApi->DataVpnVpnInstanceInstanceNameAddressFamilyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/address-family";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (addressFamily != null && addressFamily.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addressFamily); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addressFamily; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameAddressFamilyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameIsExtranetPatch (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet)
        {
             DataVpnVpnInstanceInstanceNameIsExtranetPatchWithHttpInfo(instanceName, isExtranet);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameIsExtranetPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameIsExtranetPatch");
            // verify the required parameter 'isExtranet' is set
            if (isExtranet == null)
                throw new ApiException(400, "Missing required parameter 'isExtranet' when calling PatchApi->DataVpnVpnInstanceInstanceNameIsExtranetPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (isExtranet != null && isExtranet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isExtranet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isExtranet; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameIsExtranetPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet)
        {
             await DataVpnVpnInstanceInstanceNameIsExtranetPatchAsyncWithHttpInfo(instanceName, isExtranet);

        }

        /// <summary>
        /// Determines whether the VPN supports Extranet Determines whether the VPN supports Extranet
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="isExtranet">Determines whether the VPN supports Extranet</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameIsExtranetPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameIsExtranet isExtranet)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameIsExtranetPatch");
            // verify the required parameter 'isExtranet' is set
            if (isExtranet == null)
                throw new ApiException(400, "Missing required parameter 'isExtranet' when calling PatchApi->DataVpnVpnInstanceInstanceNameIsExtranetPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/is-extranet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (isExtranet != null && isExtranet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isExtranet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isExtranet; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameIsExtranetPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameNamePatch (string instanceName, DataVpnVpnInstanceInstanceNameName name)
        {
             DataVpnVpnInstanceInstanceNameNamePatchWithHttpInfo(instanceName, name);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameNamePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameName name)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PatchApi->DataVpnVpnInstanceInstanceNameNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameNamePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameName name)
        {
             await DataVpnVpnInstanceInstanceNameNamePatchAsyncWithHttpInfo(instanceName, name);

        }

        /// <summary>
        /// VPN service name VPN service name
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="name">VPN service name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameNamePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameName name)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PatchApi->DataVpnVpnInstanceInstanceNameNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNamePatch (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
             DataVpnVpnInstanceInstanceNamePatchWithHttpInfo(instanceName, instance, noOutOfSyncCheck);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNamePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNamePatch");
            // verify the required parameter 'instance' is set
            if (instance == null)
                throw new ApiException(400, "Missing required parameter 'instance' when calling PatchApi->DataVpnVpnInstanceInstanceNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (instance != null && instance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instance; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNamePatchAsync (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
             await DataVpnVpnInstanceInstanceNamePatchAsyncWithHttpInfo(instanceName, instance, noOutOfSyncCheck);

        }

        /// <summary>
        /// List of VPN instances List of VPN instances
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="instance">List of VPN instances</param>
        /// <param name="noOutOfSyncCheck">Commit even if out of sync (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNamePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceName instance, bool? noOutOfSyncCheck = null)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNamePatch");
            // verify the required parameter 'instance' is set
            if (instance == null)
                throw new ApiException(400, "Missing required parameter 'instance' when calling PatchApi->DataVpnVpnInstanceInstanceNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (noOutOfSyncCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-out-of-sync-check", noOutOfSyncCheck)); // query parameter
            if (instance != null && instance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instance; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameProtocolTypePatch (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType)
        {
             DataVpnVpnInstanceInstanceNameProtocolTypePatchWithHttpInfo(instanceName, protocolType);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameProtocolTypePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameProtocolTypePatch");
            // verify the required parameter 'protocolType' is set
            if (protocolType == null)
                throw new ApiException(400, "Missing required parameter 'protocolType' when calling PatchApi->DataVpnVpnInstanceInstanceNameProtocolTypePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (protocolType != null && protocolType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(protocolType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protocolType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameProtocolTypePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType)
        {
             await DataVpnVpnInstanceInstanceNameProtocolTypePatchAsyncWithHttpInfo(instanceName, protocolType);

        }

        /// <summary>
        /// The Protocol Type of the VPN (e.g. IP) The Protocol Type of the VPN (e.g. IP)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="protocolType">The Protocol Type of the VPN (e.g. IP)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameProtocolTypePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameProtocolType protocolType)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameProtocolTypePatch");
            // verify the required parameter 'protocolType' is set
            if (protocolType == null)
                throw new ApiException(400, "Missing required parameter 'protocolType' when calling PatchApi->DataVpnVpnInstanceInstanceNameProtocolTypePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/protocol-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (protocolType != null && protocolType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(protocolType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protocolType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameProtocolTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchWithHttpInfo(instanceName, administratorSubfield);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch");
            // verify the required parameter 'administratorSubfield' is set
            if (administratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'administratorSubfield' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (administratorSubfield != null && administratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(administratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = administratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsyncWithHttpInfo(instanceName, administratorSubfield);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfield administratorSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch");
            // verify the required parameter 'administratorSubfield' is set
            if (administratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'administratorSubfield' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (administratorSubfield != null && administratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(administratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = administratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchWithHttpInfo(instanceName, assignedNumberSubfield);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch");
            // verify the required parameter 'assignedNumberSubfield' is set
            if (assignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'assignedNumberSubfield' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (assignedNumberSubfield != null && assignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsyncWithHttpInfo(instanceName, assignedNumberSubfield);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfield assignedNumberSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch");
            // verify the required parameter 'assignedNumberSubfield' is set
            if (assignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'assignedNumberSubfield' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (assignedNumberSubfield != null && assignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAPatchWithHttpInfo(instanceName, routeTargetA);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAPatch");
            // verify the required parameter 'routeTargetA' is set
            if (routeTargetA == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetA' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetA != null && routeTargetA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetA; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsyncWithHttpInfo(instanceName, routeTargetA);

        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetA routeTargetA)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAPatch");
            // verify the required parameter 'routeTargetA' is set
            if (routeTargetA == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetA' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetAPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetA != null && routeTargetA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetA; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchWithHttpInfo(instanceName, administratorSubfield);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch");
            // verify the required parameter 'administratorSubfield' is set
            if (administratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'administratorSubfield' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (administratorSubfield != null && administratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(administratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = administratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsyncWithHttpInfo(instanceName, administratorSubfield);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfield administratorSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch");
            // verify the required parameter 'administratorSubfield' is set
            if (administratorSubfield == null)
                throw new ApiException(400, "Missing required parameter 'administratorSubfield' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/administrator-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (administratorSubfield != null && administratorSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(administratorSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = administratorSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAdministratorSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchWithHttpInfo(instanceName, assignedNumberSubfield);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch");
            // verify the required parameter 'assignedNumberSubfield' is set
            if (assignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'assignedNumberSubfield' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (assignedNumberSubfield != null && assignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsyncWithHttpInfo(instanceName, assignedNumberSubfield);

        }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target The 2 byte or 4 byte administrator sub-field value of the route-target
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfield assignedNumberSubfield)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch");
            // verify the required parameter 'assignedNumberSubfield' is set
            if (assignedNumberSubfield == null)
                throw new ApiException(400, "Missing required parameter 'assignedNumberSubfield' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B/assigned-number-subfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (assignedNumberSubfield != null && assignedNumberSubfield.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignedNumberSubfield); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignedNumberSubfield; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBAssignedNumberSubfieldPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBPatch (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBPatchWithHttpInfo(instanceName, routeTargetB);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBPatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBPatch");
            // verify the required parameter 'routeTargetB' is set
            if (routeTargetB == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetB' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetB != null && routeTargetB.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetB); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetB; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsyncWithHttpInfo(instanceName, routeTargetB);

        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBPatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetB routeTargetB)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBPatch");
            // verify the required parameter 'routeTargetB' is set
            if (routeTargetB == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetB' when calling PatchApi->DataVpnVpnInstanceInstanceNameRouteTargetBPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetB != null && routeTargetB.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetB); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetB; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameTopologyTypePatch (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType)
        {
             DataVpnVpnInstanceInstanceNameTopologyTypePatchWithHttpInfo(instanceName, topologyType);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameTopologyTypePatchWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameTopologyTypePatch");
            // verify the required parameter 'topologyType' is set
            if (topologyType == null)
                throw new ApiException(400, "Missing required parameter 'topologyType' when calling PatchApi->DataVpnVpnInstanceInstanceNameTopologyTypePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (topologyType != null && topologyType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(topologyType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = topologyType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameTopologyTypePatchAsync (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType)
        {
             await DataVpnVpnInstanceInstanceNameTopologyTypePatchAsyncWithHttpInfo(instanceName, topologyType);

        }

        /// <summary>
        /// The Topology Type of the IP VPN (e.g. any-to-any) The Topology Type of the IP VPN (e.g. any-to-any)
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="topologyType">The Topology Type of the IP VPN (e.g. any-to-any)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameTopologyTypePatchAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameTopologyType topologyType)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameTopologyTypePatch");
            // verify the required parameter 'topologyType' is set
            if (topologyType == null)
                throw new ApiException(400, "Missing required parameter 'topologyType' when calling PatchApi->DataVpnVpnInstanceInstanceNameTopologyTypePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/topology-type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (topologyType != null && topologyType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(topologyType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = topologyType; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameTopologyTypePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, name);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsync (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, name);

        }

        /// <summary>
        /// Name of the Attachment Set. Name of the Attachment Set.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="name">Name of the Attachment Set.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameName name)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNameNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, vpnAttachmentSet);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");
            // verify the required parameter 'vpnAttachmentSet' is set
            if (vpnAttachmentSet == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSet' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (vpnAttachmentSet != null && vpnAttachmentSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpnAttachmentSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpnAttachmentSet; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsync (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, vpnAttachmentSet);

        }

        /// <summary>
        /// VRF membership of the VPN VRF membership of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="vpnAttachmentSet">VRF membership of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetName vpnAttachmentSet)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");
            // verify the required parameter 'vpnAttachmentSet' is set
            if (vpnAttachmentSet == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSet' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (vpnAttachmentSet != null && vpnAttachmentSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpnAttachmentSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpnAttachmentSet; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, pe);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'pe' is set
            if (pe == null)
                throw new ApiException(400, "Missing required parameter 'pe' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (pe != null && pe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pe; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, pe);

        }

        /// <summary>
        /// List of PE devices which have one or more VRFs which are members of the VPN List of PE devices which have one or more VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="pe">List of PE devices which have one or more VRFs which are members of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeName pe)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");
            // verify the required parameter 'pe' is set
            if (pe == null)
                throw new ApiException(400, "Missing required parameter 'pe' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (pe != null && pe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pe; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, peName);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'peName' is set
            if (peName == null)
                throw new ApiException(400, "Missing required parameter 'peName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (peName != null && peName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, peName);

        }

        /// <summary>
        /// Name of the PE device Name of the PE device
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="peName">Name of the PE device</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeName peName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");
            // verify the required parameter 'peName' is set
            if (peName == null)
                throw new ApiException(400, "Missing required parameter 'peName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/pe-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (peName != null && peName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNamePeNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'ipv4InboundRoutingPolicy' is set
            if (ipv4InboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4InboundRoutingPolicy' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4InboundRoutingPolicy != null && ipv4InboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4InboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4InboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicy ipv4InboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");
            // verify the required parameter 'ipv4InboundRoutingPolicy' is set
            if (ipv4InboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4InboundRoutingPolicy' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4InboundRoutingPolicy != null && ipv4InboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4InboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4InboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, localIpRoutingPreference);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'localIpRoutingPreference' is set
            if (localIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'localIpRoutingPreference' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (localIpRoutingPreference != null && localIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, localIpRoutingPreference);

        }

        /// <summary>
        /// The local IP routing preference for the community. The local IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="localIpRoutingPreference">The local IP routing preference for the community.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreference localIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");
            // verify the required parameter 'localIpRoutingPreference' is set
            if (localIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'localIpRoutingPreference' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (localIpRoutingPreference != null && localIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberLocalIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);

        }

        /// <summary>
        /// List of BGP communities for routes towards Tenant Networks. List of BGP communities for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'lessThanOrEqualToLength' is set
            if (lessThanOrEqualToLength == null)
                throw new ApiException(400, "Missing required parameter 'lessThanOrEqualToLength' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (lessThanOrEqualToLength != null && lessThanOrEqualToLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lessThanOrEqualToLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lessThanOrEqualToLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'lessThanOrEqualToLength' is set
            if (lessThanOrEqualToLength == null)
                throw new ApiException(400, "Missing required parameter 'lessThanOrEqualToLength' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (lessThanOrEqualToLength != null && lessThanOrEqualToLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lessThanOrEqualToLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lessThanOrEqualToLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, localIpRoutingPreference);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'localIpRoutingPreference' is set
            if (localIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'localIpRoutingPreference' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (localIpRoutingPreference != null && localIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, localIpRoutingPreference);

        }

        /// <summary>
        /// The IP routing preference for the prefix. The IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="localIpRoutingPreference">The IP routing preference for the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreference localIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");
            // verify the required parameter 'localIpRoutingPreference' is set
            if (localIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'localIpRoutingPreference' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/local-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (localIpRoutingPreference != null && localIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLocalIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4Prefix' is set
            if (tenantIpv4Prefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4Prefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantIpv4Prefix != null && tenantIpv4Prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantIpv4Prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantIpv4Prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4Prefix' is set
            if (tenantIpv4Prefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4Prefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantIpv4Prefix != null && tenantIpv4Prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantIpv4Prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantIpv4Prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (prefix != null && prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (prefix != null && prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);

        }

        /// <summary>
        /// List of BGP communities which are associated with the prefix. List of BGP communities which are associated with the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities which are associated with the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'ipv4OutboundRoutingPolicy' is set
            if (ipv4OutboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4OutboundRoutingPolicy' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4OutboundRoutingPolicy != null && ipv4OutboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4OutboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4OutboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicy ipv4OutboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");
            // verify the required parameter 'ipv4OutboundRoutingPolicy' is set
            if (ipv4OutboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4OutboundRoutingPolicy' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4OutboundRoutingPolicy != null && ipv4OutboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4OutboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4OutboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, advertisedIpRoutingPreference);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'advertisedIpRoutingPreference' is set
            if (advertisedIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'advertisedIpRoutingPreference' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (advertisedIpRoutingPreference != null && advertisedIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(advertisedIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = advertisedIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, advertisedIpRoutingPreference);

        }

        /// <summary>
        /// The advertised IP routing preference for the community. The advertised IP routing preference for the community.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the community.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'advertisedIpRoutingPreference' is set
            if (advertisedIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'advertisedIpRoutingPreference' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (advertisedIpRoutingPreference != null && advertisedIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(advertisedIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = advertisedIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAdvertisedIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, autonomousSystemNumber);

        }

        /// <summary>
        /// Autonomous System Number component of the community Autonomous System Number component of the community
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="autonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumber autonomousSystemNumber)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");
            // verify the required parameter 'autonomousSystemNumber' is set
            if (autonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'autonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/autonomous-system-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (autonomousSystemNumber != null && autonomousSystemNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autonomousSystemNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autonomousSystemNumber; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberAutonomousSystemNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, number);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="number"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumber number)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (number != null && number.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(number); // http body (model) parameter
            }
            else
            {
                localVarPostBody = number; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantCommunityAutonomousSystemNumber, tenantCommunityNumber, tenantCommunity);

        }

        /// <summary>
        /// List of BGP communities for sets of Tenant Routes. List of BGP communities for sets of Tenant Routes.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantCommunityAutonomousSystemNumber">Autonomous System Number component of the community</param>
        /// <param name="tenantCommunityNumber"></param>
        /// <param name="tenantCommunity">List of BGP communities for sets of Tenant Routes.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, int? tenantCommunityAutonomousSystemNumber, int? tenantCommunityNumber, DataVpnIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumber tenantCommunity)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityAutonomousSystemNumber' is set
            if (tenantCommunityAutonomousSystemNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityAutonomousSystemNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunityNumber' is set
            if (tenantCommunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunityNumber' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");
            // verify the required parameter 'tenantCommunity' is set
            if (tenantCommunity == null)
                throw new ApiException(400, "Missing required parameter 'tenantCommunity' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-community={tenant-community-autonomous-system-number},{tenant-community-number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantCommunityAutonomousSystemNumber != null) localVarPathParams.Add("tenant-community-autonomous-system-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityAutonomousSystemNumber)); // path parameter
            if (tenantCommunityNumber != null) localVarPathParams.Add("tenant-community-number", this.Configuration.ApiClient.ParameterToString(tenantCommunityNumber)); // path parameter
            if (tenantCommunity != null && tenantCommunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantCommunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantCommunity; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantCommunityTenantCommunityAutonomousSystemNumberTenantCommunityNumberPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, advertisedIpRoutingPreference);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'advertisedIpRoutingPreference' is set
            if (advertisedIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'advertisedIpRoutingPreference' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (advertisedIpRoutingPreference != null && advertisedIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(advertisedIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = advertisedIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, advertisedIpRoutingPreference);

        }

        /// <summary>
        /// The advertised IP routing preference for the prefix. The advertised IP routing preference for the prefix.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="advertisedIpRoutingPreference">The advertised IP routing preference for the prefix.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreference advertisedIpRoutingPreference)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");
            // verify the required parameter 'advertisedIpRoutingPreference' is set
            if (advertisedIpRoutingPreference == null)
                throw new ApiException(400, "Missing required parameter 'advertisedIpRoutingPreference' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/advertised-ip-routing-preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (advertisedIpRoutingPreference != null && advertisedIpRoutingPreference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(advertisedIpRoutingPreference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = advertisedIpRoutingPreference; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixAdvertisedIpRoutingPreferencePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'lessThanOrEqualToLength' is set
            if (lessThanOrEqualToLength == null)
                throw new ApiException(400, "Missing required parameter 'lessThanOrEqualToLength' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (lessThanOrEqualToLength != null && lessThanOrEqualToLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lessThanOrEqualToLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lessThanOrEqualToLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, lessThanOrEqualToLength);

        }

        /// <summary>
        /// Include prefix lengths up to and including the specified length. Include prefix lengths up to and including the specified length.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="lessThanOrEqualToLength">Include prefix lengths up to and including the specified length.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLength lessThanOrEqualToLength)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");
            // verify the required parameter 'lessThanOrEqualToLength' is set
            if (lessThanOrEqualToLength == null)
                throw new ApiException(400, "Missing required parameter 'lessThanOrEqualToLength' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/less-than-or-equal-to-length";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (lessThanOrEqualToLength != null && lessThanOrEqualToLength.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lessThanOrEqualToLength); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lessThanOrEqualToLength; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixLessThanOrEqualToLengthPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4Prefix' is set
            if (tenantIpv4Prefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4Prefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantIpv4Prefix != null && tenantIpv4Prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantIpv4Prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantIpv4Prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, tenantIpv4Prefix);

        }

        /// <summary>
        /// List of IPv4 prefixes for routes towards Tenant Networks. List of IPv4 prefixes for routes towards Tenant Networks.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="tenantIpv4Prefix">List of IPv4 prefixes for routes towards Tenant Networks.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefix tenantIpv4Prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4Prefix' is set
            if (tenantIpv4Prefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4Prefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (tenantIpv4Prefix != null && tenantIpv4Prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tenantIpv4Prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tenantIpv4Prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (prefix != null && prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, tenantIpv4PrefixPrefix, prefix);

        }

        /// <summary>
        /// An IPv4 prefix and length in CIDR form, x.x.x.x/n An IPv4 prefix and length in CIDR form, x.x.x.x/n
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="tenantIpv4PrefixPrefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <param name="prefix">An IPv4 prefix and length in CIDR form, x.x.x.x/n</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, string tenantIpv4PrefixPrefix, DataVpnIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefix prefix)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'tenantIpv4PrefixPrefix' is set
            if (tenantIpv4PrefixPrefix == null)
                throw new ApiException(400, "Missing required parameter 'tenantIpv4PrefixPrefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");
            // verify the required parameter 'prefix' is set
            if (prefix == null)
                throw new ApiException(400, "Missing required parameter 'prefix' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy/tenant-ipv4-prefix={tenant-ipv4-prefix-prefix}/prefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (tenantIpv4PrefixPrefix != null) localVarPathParams.Add("tenant-ipv4-prefix-prefix", this.Configuration.ApiClient.ParameterToString(tenantIpv4PrefixPrefix)); // path parameter
            if (prefix != null && prefix.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(prefix); // http body (model) parameter
            }
            else
            {
                localVarPostBody = prefix; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyTenantIpv4PrefixTenantIpv4PrefixPrefixPrefixPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeer' is set
            if (bgpPeer == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeer' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (bgpPeer != null && bgpPeer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bgpPeer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bgpPeer; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, bgpPeer);

        }

        /// <summary>
        /// List of BGP peers which require network-based outbound routing                policy. List of BGP peers which require network-based outbound routing                policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="bgpPeer">List of BGP peers which require network-based outbound routing                policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4Address bgpPeer)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeer' is set
            if (bgpPeer == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeer' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (bgpPeer != null && bgpPeer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bgpPeer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bgpPeer; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'peerIpv4Address' is set
            if (peerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'peerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerIpv4Address != null && peerIpv4Address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerIpv4Address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerIpv4Address; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, peerIpv4Address);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="peerIpv4Address"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnPeerIpv4Address peerIpv4Address)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");
            // verify the required parameter 'peerIpv4Address' is set
            if (peerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'peerIpv4Address' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/peer-ipv4-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (peerIpv4Address != null && peerIpv4Address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(peerIpv4Address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = peerIpv4Address; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressPeerIpv4AddressPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrf);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrf' is set
            if (vrf == null)
                throw new ApiException(400, "Missing required parameter 'vrf' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrf != null && vrf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrf; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrf);

        }

        /// <summary>
        /// List of VRFs which are members of the VPN List of VRFs which are members of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrf">List of VRFs which are members of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfName vrf)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");
            // verify the required parameter 'vrf' is set
            if (vrf == null)
                throw new ApiException(400, "Missing required parameter 'vrf' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrf != null && vrf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrf; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrfName);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfName' is set
            if (vrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrfName != null && vrfName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrfName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrfName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, vrfName);

        }

        /// <summary>
        /// VRF which is a member of the VPN VRF which is a member of the VPN
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="vrfName">VRF which is a member of the VPN</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatchAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfName vrfName)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");
            // verify the required parameter 'vrfName' is set
            if (vrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfName' when calling PatchApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/vrf-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (vrfName != null && vrfName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vrfName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vrfName; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameVrfNamePatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns></returns>
        public void DataVpnVpnPatch (DataVpnVpn vpn)
        {
             DataVpnVpnPatchWithHttpInfo(vpn);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnPatchWithHttpInfo (DataVpnVpn vpn)
        {
            // verify the required parameter 'vpn' is set
            if (vpn == null)
                throw new ApiException(400, "Missing required parameter 'vpn' when calling PatchApi->DataVpnVpnPatch");

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vpn != null && vpn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpn; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnPatchAsync (DataVpnVpn vpn)
        {
             await DataVpnVpnPatchAsyncWithHttpInfo(vpn);

        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnPatchAsyncWithHttpInfo (DataVpnVpn vpn)
        {
            // verify the required parameter 'vpn' is set
            if (vpn == null)
                throw new ApiException(400, "Missing required parameter 'vpn' when calling PatchApi->DataVpnVpnPatch");

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vpn != null && vpn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpn; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
