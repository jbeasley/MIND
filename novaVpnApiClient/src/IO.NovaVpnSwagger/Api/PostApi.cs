/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.NovaVpnSwagger.Client;
using IO.NovaVpnSwagger.Model;

namespace IO.NovaVpnSwagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns></returns>
        void DataPost (DataPost data);

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataPostWithHttpInfo (DataPost data);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetAPost (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAPostWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameRouteTargetBPost (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBPostWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns></returns>
        void DataVpnVpnPost (DataVpnVpnPost vpn);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataVpnVpnPostWithHttpInfo (DataVpnVpnPost vpn);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataPostAsync (DataPost data);

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <remarks>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataPostAsyncWithHttpInfo (DataPost data);
        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAPostAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA);

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <remarks>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAPostAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA);
        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBPostAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB);

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <remarks>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBPostAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy);
        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy);

        /// <summary>
        /// IPv4 outbound routing policy.
        /// </summary>
        /// <remarks>
        /// IPv4 outbound routing policy.
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy);
        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataVpnVpnPostAsync (DataVpnVpnPost vpn);

        /// <summary>
        /// VPN service container
        /// </summary>
        /// <remarks>
        /// VPN service container
        /// </remarks>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnPostAsyncWithHttpInfo (DataVpnVpnPost vpn);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PostApi : IPostApi
    {
        private IO.NovaVpnSwagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostApi(String basePath)
        {
            this.Configuration = new IO.NovaVpnSwagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PostApi(IO.NovaVpnSwagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.NovaVpnSwagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.NovaVpnSwagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.NovaVpnSwagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.NovaVpnSwagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns></returns>
        public void DataPost (DataPost data)
        {
             DataPostWithHttpInfo(data);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataPostWithHttpInfo (DataPost data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PostApi->DataPost");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataPostAsync (DataPost data)
        {
             await DataPostAsyncWithHttpInfo(data);

        }

        /// <summary>
        /// This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018 This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataPostAsyncWithHttpInfo (DataPost data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PostApi->DataPost");

            var localVarPath = "/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetAPost (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetAPostWithHttpInfo(instanceName, routeTargetA);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetAPostWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PostApi->DataVpnVpnInstanceInstanceNameRouteTargetAPost");
            // verify the required parameter 'routeTargetA' is set
            if (routeTargetA == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetA' when calling PostApi->DataVpnVpnInstanceInstanceNameRouteTargetAPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetA != null && routeTargetA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetA; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetAPostAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetAPostAsyncWithHttpInfo(instanceName, routeTargetA);

        }

        /// <summary>
        /// Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetA">Route-target &#39;A&#39;. If this VPN topology is Any-to-Any then this route-target is used for both import and export. If this VPN topology is Hub-and-Spoke then this route-target is used for export at hub VRFs and for import at spoke VRFs</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetAPostAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetAPost routeTargetA)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PostApi->DataVpnVpnInstanceInstanceNameRouteTargetAPost");
            // verify the required parameter 'routeTargetA' is set
            if (routeTargetA == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetA' when calling PostApi->DataVpnVpnInstanceInstanceNameRouteTargetAPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetA != null && routeTargetA.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetA); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetA; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetAPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameRouteTargetBPost (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB)
        {
             DataVpnVpnInstanceInstanceNameRouteTargetBPostWithHttpInfo(instanceName, routeTargetB);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameRouteTargetBPostWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PostApi->DataVpnVpnInstanceInstanceNameRouteTargetBPost");
            // verify the required parameter 'routeTargetB' is set
            if (routeTargetB == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetB' when calling PostApi->DataVpnVpnInstanceInstanceNameRouteTargetBPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetB != null && routeTargetB.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetB); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetB; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameRouteTargetBPostAsync (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB)
        {
             await DataVpnVpnInstanceInstanceNameRouteTargetBPostAsyncWithHttpInfo(instanceName, routeTargetB);

        }

        /// <summary>
        /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs 
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="routeTargetB">Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameRouteTargetBPostAsyncWithHttpInfo (string instanceName, DataVpnVpnInstanceInstanceNameRouteTargetBPost routeTargetB)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PostApi->DataVpnVpnInstanceInstanceNameRouteTargetBPost");
            // verify the required parameter 'routeTargetB' is set
            if (routeTargetB == null)
                throw new ApiException(400, "Missing required parameter 'routeTargetB' when calling PostApi->DataVpnVpnInstanceInstanceNameRouteTargetBPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/route-target-B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (routeTargetB != null && routeTargetB.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(routeTargetB); // http body (model) parameter
            }
            else
            {
                localVarPostBody = routeTargetB; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameRouteTargetBPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'ipv4InboundRoutingPolicy' is set
            if (ipv4InboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4InboundRoutingPolicy' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4InboundRoutingPolicy != null && ipv4InboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4InboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4InboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4InboundRoutingPolicy);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4InboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPostAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4InboundRoutingPolicyPost ipv4InboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");
            // verify the required parameter 'ipv4InboundRoutingPolicy' is set
            if (ipv4InboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4InboundRoutingPolicy' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-inbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4InboundRoutingPolicy != null && ipv4InboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4InboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4InboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4InboundRoutingPolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns></returns>
        public void DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy)
        {
             DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'ipv4OutboundRoutingPolicy' is set
            if (ipv4OutboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4OutboundRoutingPolicy' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4OutboundRoutingPolicy != null && ipv4OutboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4OutboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4OutboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsync (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy)
        {
             await DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsyncWithHttpInfo(instanceName, vpnAttachmentSetName, pePeName, vrfVrfName, bgpPeerPeerIpv4Address, ipv4OutboundRoutingPolicy);

        }

        /// <summary>
        /// IPv4 outbound routing policy. IPv4 outbound routing policy.
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName">VPN service name</param>
        /// <param name="vpnAttachmentSetName">Name of the Attachment Set.</param>
        /// <param name="pePeName">Name of the PE device</param>
        /// <param name="vrfVrfName">VRF which is a member of the VPN</param>
        /// <param name="bgpPeerPeerIpv4Address"></param>
        /// <param name="ipv4OutboundRoutingPolicy">IPv4 outbound routing policy.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPostAsyncWithHttpInfo (string instanceName, string vpnAttachmentSetName, string pePeName, string vrfVrfName, string bgpPeerPeerIpv4Address, DataVpnIpv4OutboundRoutingPolicyPost ipv4OutboundRoutingPolicy)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
                throw new ApiException(400, "Missing required parameter 'instanceName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'vpnAttachmentSetName' is set
            if (vpnAttachmentSetName == null)
                throw new ApiException(400, "Missing required parameter 'vpnAttachmentSetName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'pePeName' is set
            if (pePeName == null)
                throw new ApiException(400, "Missing required parameter 'pePeName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'vrfVrfName' is set
            if (vrfVrfName == null)
                throw new ApiException(400, "Missing required parameter 'vrfVrfName' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'bgpPeerPeerIpv4Address' is set
            if (bgpPeerPeerIpv4Address == null)
                throw new ApiException(400, "Missing required parameter 'bgpPeerPeerIpv4Address' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");
            // verify the required parameter 'ipv4OutboundRoutingPolicy' is set
            if (ipv4OutboundRoutingPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ipv4OutboundRoutingPolicy' when calling PostApi->DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost");

            var localVarPath = "/data/services/vpn:vpn/instance={instance-name}/vpn-attachment-set={vpn-attachment-set-name}/pe={pe-pe-name}/vrf={vrf-vrf-name}/bgp-peer={bgp-peer-peer-ipv4-address}/ipv4-outbound-routing-policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceName != null) localVarPathParams.Add("instance-name", this.Configuration.ApiClient.ParameterToString(instanceName)); // path parameter
            if (vpnAttachmentSetName != null) localVarPathParams.Add("vpn-attachment-set-name", this.Configuration.ApiClient.ParameterToString(vpnAttachmentSetName)); // path parameter
            if (pePeName != null) localVarPathParams.Add("pe-pe-name", this.Configuration.ApiClient.ParameterToString(pePeName)); // path parameter
            if (vrfVrfName != null) localVarPathParams.Add("vrf-vrf-name", this.Configuration.ApiClient.ParameterToString(vrfVrfName)); // path parameter
            if (bgpPeerPeerIpv4Address != null) localVarPathParams.Add("bgp-peer-peer-ipv4-address", this.Configuration.ApiClient.ParameterToString(bgpPeerPeerIpv4Address)); // path parameter
            if (ipv4OutboundRoutingPolicy != null && ipv4OutboundRoutingPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ipv4OutboundRoutingPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ipv4OutboundRoutingPolicy; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnInstanceInstanceNameVpnAttachmentSetVpnAttachmentSetNamePePePeNameVrfVrfVrfNameBgpPeerBgpPeerPeerIpv4AddressIpv4OutboundRoutingPolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns></returns>
        public void DataVpnVpnPost (DataVpnVpnPost vpn)
        {
             DataVpnVpnPostWithHttpInfo(vpn);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataVpnVpnPostWithHttpInfo (DataVpnVpnPost vpn)
        {
            // verify the required parameter 'vpn' is set
            if (vpn == null)
                throw new ApiException(400, "Missing required parameter 'vpn' when calling PostApi->DataVpnVpnPost");

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vpn != null && vpn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpn; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataVpnVpnPostAsync (DataVpnVpnPost vpn)
        {
             await DataVpnVpnPostAsyncWithHttpInfo(vpn);

        }

        /// <summary>
        /// VPN service container VPN service container
        /// </summary>
        /// <exception cref="IO.NovaVpnSwagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vpn">VPN service container</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataVpnVpnPostAsyncWithHttpInfo (DataVpnVpnPost vpn)
        {
            // verify the required parameter 'vpn' is set
            if (vpn == null)
                throw new ApiException(400, "Missing required parameter 'vpn' when calling PostApi->DataVpnVpnPost");

            var localVarPath = "/data/services/vpn:vpn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yang-data+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vpn != null && vpn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vpn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vpn; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataVpnVpnPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
