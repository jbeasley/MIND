/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaVpnSwagger.Client.SwaggerDateConverter;

namespace IO.NovaVpnSwagger.Model
{
    /// <summary>
    /// DataVpnIpv4InboundRoutingPolicy
    /// </summary>
    [DataContract]
    public partial class DataVpnIpv4InboundRoutingPolicy :  IEquatable<DataVpnIpv4InboundRoutingPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataVpnIpv4InboundRoutingPolicy" /> class.
        /// </summary>
        /// <param name="vpnipv4InboundRoutingPolicy">vpnipv4InboundRoutingPolicy.</param>
        public DataVpnIpv4InboundRoutingPolicy(DataVpnIpv4inboundroutingpolicyVpnipv4inboundroutingpolicy vpnipv4InboundRoutingPolicy = default(DataVpnIpv4inboundroutingpolicyVpnipv4inboundroutingpolicy))
        {
            this.Vpnipv4InboundRoutingPolicy = vpnipv4InboundRoutingPolicy;
        }
        
        /// <summary>
        /// Gets or Sets Vpnipv4InboundRoutingPolicy
        /// </summary>
        [DataMember(Name="vpn:ipv4-inbound-routing-policy", EmitDefaultValue=false)]
        public DataVpnIpv4inboundroutingpolicyVpnipv4inboundroutingpolicy Vpnipv4InboundRoutingPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataVpnIpv4InboundRoutingPolicy {\n");
            sb.Append("  Vpnipv4InboundRoutingPolicy: ").Append(Vpnipv4InboundRoutingPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataVpnIpv4InboundRoutingPolicy);
        }

        /// <summary>
        /// Returns true if DataVpnIpv4InboundRoutingPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of DataVpnIpv4InboundRoutingPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataVpnIpv4InboundRoutingPolicy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Vpnipv4InboundRoutingPolicy == input.Vpnipv4InboundRoutingPolicy ||
                    (this.Vpnipv4InboundRoutingPolicy != null &&
                    this.Vpnipv4InboundRoutingPolicy.Equals(input.Vpnipv4InboundRoutingPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Vpnipv4InboundRoutingPolicy != null)
                    hashCode = hashCode * 59 + this.Vpnipv4InboundRoutingPolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
