/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaVpnSwagger.Client.SwaggerDateConverter;

namespace IO.NovaVpnSwagger.Model
{
    /// <summary>
    /// Route-target &#39;B&#39;. If this VPN topology is Any-to-Any then this route-target is NOT used. If this VPN topology is Hub-and-Spoke then this route-target is used for import at hub VRFs and for export at spoke VRFs  (presence)
    /// </summary>
    [DataContract]
    public partial class DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB :  IEquatable<DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB" /> class.
        /// </summary>
        /// <param name="administratorSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target (leaf).</param>
        /// <param name="assignedNumberSubfield">The 2 byte or 4 byte administrator sub-field value of the route-target (leaf).</param>
        public DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB(int? administratorSubfield = default(int?), int? assignedNumberSubfield = default(int?))
        {
            this.AdministratorSubfield = administratorSubfield;
            this.AssignedNumberSubfield = assignedNumberSubfield;
        }
        
        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target (leaf)
        /// </summary>
        /// <value>The 2 byte or 4 byte administrator sub-field value of the route-target (leaf)</value>
        [DataMember(Name="administrator-subfield", EmitDefaultValue=false)]
        public int? AdministratorSubfield { get; set; }

        /// <summary>
        /// The 2 byte or 4 byte administrator sub-field value of the route-target (leaf)
        /// </summary>
        /// <value>The 2 byte or 4 byte administrator sub-field value of the route-target (leaf)</value>
        [DataMember(Name="assigned-number-subfield", EmitDefaultValue=false)]
        public int? AssignedNumberSubfield { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB {\n");
            sb.Append("  AdministratorSubfield: ").Append(AdministratorSubfield).Append("\n");
            sb.Append("  AssignedNumberSubfield: ").Append(AssignedNumberSubfield).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB);
        }

        /// <summary>
        /// Returns true if DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB instances are equal
        /// </summary>
        /// <param name="input">Instance of DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataVpnVpnInstanceInstancenameRoutetargetBVpnroutetargetB input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdministratorSubfield == input.AdministratorSubfield ||
                    (this.AdministratorSubfield != null &&
                    this.AdministratorSubfield.Equals(input.AdministratorSubfield))
                ) && 
                (
                    this.AssignedNumberSubfield == input.AssignedNumberSubfield ||
                    (this.AssignedNumberSubfield != null &&
                    this.AssignedNumberSubfield.Equals(input.AssignedNumberSubfield))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdministratorSubfield != null)
                    hashCode = hashCode * 59 + this.AdministratorSubfield.GetHashCode();
                if (this.AssignedNumberSubfield != null)
                    hashCode = hashCode * 59 + this.AssignedNumberSubfield.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
