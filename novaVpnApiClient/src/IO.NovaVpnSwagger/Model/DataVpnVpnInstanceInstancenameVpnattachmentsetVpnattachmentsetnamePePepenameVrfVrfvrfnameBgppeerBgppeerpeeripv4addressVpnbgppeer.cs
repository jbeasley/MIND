/* 
 * vpn
 *
 * This module defines the YANG model for Nova IPv4 VPN services. The model can be used to create a swagger API definition using the yanger tool.Written by Jon Beasley - WAN Architecture and Strategy - 2018
 *
 * OpenAPI spec version: 1.0.0.1
 * Contact: jonathan.beasley@refinitiv.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.NovaVpnSwagger.Client.SwaggerDateConverter;

namespace IO.NovaVpnSwagger.Model
{
    /// <summary>
    /// DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer
    /// </summary>
    [DataContract]
    public partial class DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer :  IEquatable<DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer" /> class.
        /// </summary>
        /// <param name="peerIpv4Address">(leaf).</param>
        /// <param name="ipv4OutboundRoutingPolicy">ipv4OutboundRoutingPolicy.</param>
        /// <param name="ipv4InboundRoutingPolicy">ipv4InboundRoutingPolicy.</param>
        public DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer(string peerIpv4Address = default(string), DataVpnIpv4outboundroutingpolicyVpnipv4outboundroutingpolicy ipv4OutboundRoutingPolicy = default(DataVpnIpv4outboundroutingpolicyVpnipv4outboundroutingpolicy), DataVpnIpv4inboundroutingpolicyVpnipv4inboundroutingpolicy ipv4InboundRoutingPolicy = default(DataVpnIpv4inboundroutingpolicyVpnipv4inboundroutingpolicy))
        {
            this.PeerIpv4Address = peerIpv4Address;
            this.Ipv4OutboundRoutingPolicy = ipv4OutboundRoutingPolicy;
            this.Ipv4InboundRoutingPolicy = ipv4InboundRoutingPolicy;
        }
        
        /// <summary>
        /// (leaf)
        /// </summary>
        /// <value>(leaf)</value>
        [DataMember(Name="peer-ipv4-address", EmitDefaultValue=false)]
        public string PeerIpv4Address { get; set; }

        /// <summary>
        /// Gets or Sets Ipv4OutboundRoutingPolicy
        /// </summary>
        [DataMember(Name="ipv4-outbound-routing-policy", EmitDefaultValue=false)]
        public DataVpnIpv4outboundroutingpolicyVpnipv4outboundroutingpolicy Ipv4OutboundRoutingPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Ipv4InboundRoutingPolicy
        /// </summary>
        [DataMember(Name="ipv4-inbound-routing-policy", EmitDefaultValue=false)]
        public DataVpnIpv4inboundroutingpolicyVpnipv4inboundroutingpolicy Ipv4InboundRoutingPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer {\n");
            sb.Append("  PeerIpv4Address: ").Append(PeerIpv4Address).Append("\n");
            sb.Append("  Ipv4OutboundRoutingPolicy: ").Append(Ipv4OutboundRoutingPolicy).Append("\n");
            sb.Append("  Ipv4InboundRoutingPolicy: ").Append(Ipv4InboundRoutingPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer);
        }

        /// <summary>
        /// Returns true if DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer instances are equal
        /// </summary>
        /// <param name="input">Instance of DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataVpnVpnInstanceInstancenameVpnattachmentsetVpnattachmentsetnamePePepenameVrfVrfvrfnameBgppeerBgppeerpeeripv4addressVpnbgppeer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PeerIpv4Address == input.PeerIpv4Address ||
                    (this.PeerIpv4Address != null &&
                    this.PeerIpv4Address.Equals(input.PeerIpv4Address))
                ) && 
                (
                    this.Ipv4OutboundRoutingPolicy == input.Ipv4OutboundRoutingPolicy ||
                    (this.Ipv4OutboundRoutingPolicy != null &&
                    this.Ipv4OutboundRoutingPolicy.Equals(input.Ipv4OutboundRoutingPolicy))
                ) && 
                (
                    this.Ipv4InboundRoutingPolicy == input.Ipv4InboundRoutingPolicy ||
                    (this.Ipv4InboundRoutingPolicy != null &&
                    this.Ipv4InboundRoutingPolicy.Equals(input.Ipv4InboundRoutingPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PeerIpv4Address != null)
                    hashCode = hashCode * 59 + this.PeerIpv4Address.GetHashCode();
                if (this.Ipv4OutboundRoutingPolicy != null)
                    hashCode = hashCode * 59 + this.Ipv4OutboundRoutingPolicy.GetHashCode();
                if (this.Ipv4InboundRoutingPolicy != null)
                    hashCode = hashCode * 59 + this.Ipv4InboundRoutingPolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
